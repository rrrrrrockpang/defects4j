diff --git a/src/main/java/org/apache/commons/io/input/ReaderInputStream.java b/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
index 35b61619..5f3fe412 100644
--- a/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/ReaderInputStream.java
@@ -24,7 +24,6 @@ import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
 import java.nio.charset.CoderResult;
-import java.nio.charset.CodingErrorAction;
 
 /**
  * {@link InputStream} implementation that reads a character stream from a {@link Reader}
@@ -101,43 +100,16 @@ public class ReaderInputStream extends InputStream {
      * Construct a new {@link ReaderInputStream}.
      * 
      * @param reader the target {@link Reader}
-     * @param encoder the charset encoder
-     * @since Commons IO 2.1
-     */
-    public ReaderInputStream(Reader reader, CharsetEncoder encoder) {
-        this(reader, encoder, DEFAULT_BUFFER_SIZE);
-    }
-
-    /**
-     * Construct a new {@link ReaderInputStream}.
-     * 
-     * @param reader the target {@link Reader}
-     * @param encoder the charset encoder
+     * @param charset the charset encoding
      * @param bufferSize the size of the input buffer in number of characters
-     * @since Commons IO 2.1
      */
-    public ReaderInputStream(Reader reader, CharsetEncoder encoder, int bufferSize) {
+    public ReaderInputStream(Reader reader, Charset charset, int bufferSize) {
         this.reader = reader;
-        this.encoder = encoder;
+        encoder = charset.newEncoder();
         encoderIn = CharBuffer.allocate(bufferSize);
         encoderIn.flip();
     }
 
-    /**
-     * Construct a new {@link ReaderInputStream}.
-     * 
-     * @param reader the target {@link Reader}
-     * @param charset the charset encoding
-     * @param bufferSize the size of the input buffer in number of characters
-     */
-    public ReaderInputStream(Reader reader, Charset charset, int bufferSize) {
-        this(reader,
-             charset.newEncoder()
-                    .onMalformedInput(CodingErrorAction.REPLACE)
-                    .onUnmappableCharacter(CodingErrorAction.REPLACE),
-             bufferSize);
-    }
-
     /**
      * Construct a new {@link ReaderInputStream} with a default input buffer size of
      * 1024 characters.
diff --git a/src/main/java/org/apache/commons/io/output/WriterOutputStream.java b/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
index ee688604..d37dcf8a 100644
--- a/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
+++ b/src/main/java/org/apache/commons/io/output/WriterOutputStream.java
@@ -92,61 +92,28 @@ public class WriterOutputStream extends OutputStream {
      */
     private final CharBuffer decoderOut;
 
-    /**
-     * Constructs a new {@link WriterOutputStream} with a default output buffer size of
-     * 1024 characters. The output buffer will only be flushed when it overflows or when
-     * {@link #flush()} or {@link #close()} is called.
-     * 
-     * @param writer the target {@link Writer}
-     * @param decoder the charset decoder
-     * @since Commons IO 2.1
-     */
-    public WriterOutputStream(Writer writer, CharsetDecoder decoder) {
-        this(writer, decoder, DEFAULT_BUFFER_SIZE, false);
-    }
-
     /**
      * Constructs a new {@link WriterOutputStream}.
      * 
      * @param writer the target {@link Writer}
-     * @param decoder the charset decoder
+     * @param charset the charset encoding
      * @param bufferSize the size of the output buffer in number of characters
      * @param writeImmediately If <tt>true</tt> the output buffer will be flushed after each
      *                         write operation, i.e. all available data will be written to the
      *                         underlying {@link Writer} immediately. If <tt>false</tt>, the
      *                         output buffer will only be flushed when it overflows or when
      *                         {@link #flush()} or {@link #close()} is called.
-     * @since Commons IO 2.1
      */
-    public WriterOutputStream(Writer writer, CharsetDecoder decoder, int bufferSize, boolean writeImmediately) {
+    public WriterOutputStream(Writer writer, Charset charset, int bufferSize, boolean writeImmediately) {
         this.writer = writer;
-        this.decoder = decoder;
+        decoder = charset.newDecoder();
+        decoder.onMalformedInput(CodingErrorAction.REPLACE);
+        decoder.onUnmappableCharacter(CodingErrorAction.REPLACE);
+        decoder.replaceWith("?");
         this.writeImmediately = writeImmediately;
         decoderOut = CharBuffer.allocate(bufferSize);
     }
 
-    /**
-     * Constructs a new {@link WriterOutputStream}.
-     * 
-     * @param writer the target {@link Writer}
-     * @param charset the charset encoding
-     * @param bufferSize the size of the output buffer in number of characters
-     * @param writeImmediately If <tt>true</tt> the output buffer will be flushed after each
-     *                         write operation, i.e. all available data will be written to the
-     *                         underlying {@link Writer} immediately. If <tt>false</tt>, the
-     *                         output buffer will only be flushed when it overflows or when
-     *                         {@link #flush()} or {@link #close()} is called.
-     */
-    public WriterOutputStream(Writer writer, Charset charset, int bufferSize, boolean writeImmediately) {
-        this(writer,
-             charset.newDecoder()
-                    .onMalformedInput(CodingErrorAction.REPLACE)
-                    .onUnmappableCharacter(CodingErrorAction.REPLACE)
-                    .replaceWith("?"),
-             bufferSize,
-             writeImmediately);
-    }
-
     /**
      * Constructs a new {@link WriterOutputStream} with a default output buffer size of
      * 1024 characters. The output buffer will only be flushed when it overflows or when
