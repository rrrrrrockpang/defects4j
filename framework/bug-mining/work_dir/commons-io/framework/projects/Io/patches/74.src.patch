diff --git a/src/java/org/apache/commons/io/input/CountingInputStream.java b/src/java/org/apache/commons/io/input/CountingInputStream.java
index c9f78637..9fcddc65 100644
--- a/src/java/org/apache/commons/io/input/CountingInputStream.java
+++ b/src/java/org/apache/commons/io/input/CountingInputStream.java
@@ -55,7 +55,7 @@ public class CountingInputStream extends ProxyInputStream {
      * @see java.io.InputStream#skip(long)
      */
     @Override
-    public synchronized long skip(final long length) throws IOException {
+    public long skip(final long length) throws IOException {
         final long skip = super.skip(length);
         this.count += skip;
         return skip;
@@ -68,7 +68,7 @@ public class CountingInputStream extends ProxyInputStream {
      * @since Commons IO 2.0
      */
     @Override
-    protected synchronized void afterRead(int n) {
+    protected void afterRead(int n) {
         if (n != -1) {
             this.count += n;
         }
@@ -85,7 +85,7 @@ public class CountingInputStream extends ProxyInputStream {
      * @return the number of bytes accumulated
      * @throws ArithmeticException if the byte count is too large
      */
-    public int getCount() {
+    public synchronized int getCount() {
         long result = getByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
@@ -103,7 +103,7 @@ public class CountingInputStream extends ProxyInputStream {
      * @return the count previous to resetting
      * @throws ArithmeticException if the byte count is too large
      */
-    public int resetCount() {
+    public synchronized int resetCount() {
         long result = resetByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
diff --git a/src/java/org/apache/commons/io/output/CountingOutputStream.java b/src/java/org/apache/commons/io/output/CountingOutputStream.java
index e1a3eda2..f825e26d 100644
--- a/src/java/org/apache/commons/io/output/CountingOutputStream.java
+++ b/src/java/org/apache/commons/io/output/CountingOutputStream.java
@@ -50,7 +50,7 @@ public class CountingOutputStream extends ProxyOutputStream {
      * @since Commons IO 2.0
      */
     @Override
-    protected synchronized void beforeWrite(int n) {
+    protected void beforeWrite(int n) {
         count += n;
     }
 
@@ -65,7 +65,7 @@ public class CountingOutputStream extends ProxyOutputStream {
      * @return the number of bytes accumulated
      * @throws ArithmeticException if the byte count is too large
      */
-    public int getCount() {
+    public synchronized int getCount() {
         long result = getByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
@@ -83,7 +83,7 @@ public class CountingOutputStream extends ProxyOutputStream {
      * @return the count previous to resetting
      * @throws ArithmeticException if the byte count is too large
      */
-    public int resetCount() {
+    public synchronized int resetCount() {
         long result = resetByteCount();
         if (result > Integer.MAX_VALUE) {
             throw new ArithmeticException("The byte count " + result + " is too large to be converted to an int");
