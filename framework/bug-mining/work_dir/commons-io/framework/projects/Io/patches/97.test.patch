diff --git a/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java b/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java
index 1c18bbe2..0be9c891 100644
--- a/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java
+++ b/src/test/java/org/apache/commons/io/output/TeeOutputStreamTest.java
@@ -16,12 +16,12 @@
  */
 package org.apache.commons.io.output;
 
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
 import junit.framework.TestCase;
 
-import org.junit.Assert;
 
 /**
  * @version $Revision$ $Date$
@@ -29,88 +29,37 @@ import org.junit.Assert;
 
 public class TeeOutputStreamTest extends TestCase {
 
-    private static class ExceptionOnCloseByteArrayOutputStream extends ByteArrayOutputStream {
-
-        public void close() throws IOException {
-            throw new IOException();
-        }
-    }
-
-    private static class RecordCloseByteArrayOutputStream extends ByteArrayOutputStream {
-
-        boolean closed;
-
-        public void close() throws IOException {
-            super.close();
-            closed = true;
-        }
-    }
-
     public TeeOutputStreamTest(String name) {
         super(name);
     }
 
-    /**
-     * Tests that the branch {@code OutputStream} is closed when closing the main {@code OutputStream} throws an
-     * exception on {@link TeeOutputStream#close()}.
-     */
-    public void testCloseBranchIOException() {
-        ByteArrayOutputStream badOs = new ExceptionOnCloseByteArrayOutputStream();
-        RecordCloseByteArrayOutputStream goodOs = new RecordCloseByteArrayOutputStream();
-        TeeOutputStream tos = new TeeOutputStream(goodOs, badOs);
-        try {
-            tos.close();
-            Assert.fail("Expected " + IOException.class.getName());
-        } catch (IOException e) {
-            Assert.assertTrue(goodOs.closed);
-        }
-    }
-
-    /**
-     * Tests that the main {@code OutputStream} is closed when closing the branch {@code OutputStream} throws an
-     * exception on {@link TeeOutputStream#close()}.
-     */
-    public void testCloseMainIOException() {
-        ByteArrayOutputStream badOs = new ExceptionOnCloseByteArrayOutputStream();
-        RecordCloseByteArrayOutputStream goodOs = new RecordCloseByteArrayOutputStream();
-        TeeOutputStream tos = new TeeOutputStream(badOs, goodOs);
-        try {
-            tos.close();
-            Assert.fail("Expected " + IOException.class.getName());
-        } catch (IOException e) {
-            Assert.assertTrue(goodOs.closed);
-        }
-    }
-
     public void testTee() throws IOException {
         ByteArrayOutputStream baos1 = new ByteArrayOutputStream();
         ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
         TeeOutputStream tos = new TeeOutputStream(baos1, baos2);
-        for (int i = 0; i < 20; i++) {
+        for(int i = 0; i < 20; i++) {
             tos.write(i);
         }
-        assertByteArrayEquals("TeeOutputStream.write(int)", baos1.toByteArray(), baos2.toByteArray());
+        assertByteArrayEquals("TeeOutputStream.write(int)", baos1.toByteArray(), baos2.toByteArray() );
 
         byte[] array = new byte[10];
-        for (int i = 20; i < 30; i++) {
-            array[i - 20] = (byte) i;
+        for(int i = 20; i < 30; i++) {
+            array[i-20] = (byte)i;
         }
         tos.write(array);
-        assertByteArrayEquals("TeeOutputStream.write(byte[])", baos1.toByteArray(), baos2.toByteArray());
+        assertByteArrayEquals("TeeOutputStream.write(byte[])", baos1.toByteArray(), baos2.toByteArray() );
 
-        for (int i = 25; i < 35; i++) {
-            array[i - 25] = (byte) i;
+        for(int i = 25; i < 35; i++) {
+            array[i-25] = (byte)i;
         }
         tos.write(array, 5, 5);
-        assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", baos1.toByteArray(), baos2.toByteArray());
-        tos.flush();
-        tos.close();
+        assertByteArrayEquals("TeeOutputStream.write(byte[], int, int)", baos1.toByteArray(), baos2.toByteArray() );
     }
 
     private void assertByteArrayEquals(String msg, byte[] array1, byte[] array2) {
-        assertEquals(msg + ": array size mismatch", array1.length, array2.length);
-        for (int i = 0; i < array1.length; i++) {
-            assertEquals(msg + ": array[ " + i + "] mismatch", array1[i], array2[i]);
+        assertEquals(msg+": array size mismatch", array1.length, array2.length);
+        for(int i=0; i<array1.length; i++) {
+            assertEquals(msg+": array[ " + i + "] mismatch", array1[i], array2[i]);
         }
     }
 
