diff --git a/src/test/java/org/apache/commons/io/FileUtilsTestCase.java b/src/test/java/org/apache/commons/io/FileUtilsTestCase.java
index af318ae8..0679320b 100644
--- a/src/test/java/org/apache/commons/io/FileUtilsTestCase.java
+++ b/src/test/java/org/apache/commons/io/FileUtilsTestCase.java
@@ -58,7 +58,6 @@ import java.util.Map;
 import java.util.zip.CRC32;
 import java.util.zip.Checksum;
 
-import org.apache.commons.io.filefilter.IOFileFilter;
 import org.apache.commons.io.filefilter.NameFileFilter;
 import org.apache.commons.io.filefilter.WildcardFileFilter;
 import org.apache.commons.io.test.TestUtils;
@@ -76,57 +75,17 @@ import org.junit.jupiter.api.io.TempDir;
 @SuppressWarnings({"deprecation", "ResultOfMethodCallIgnored"}) // unit tests include tests of many deprecated methods
 public class FileUtilsTestCase {
 
-    /**
-     * DirectoryWalker implementation that recursively lists all files and directories.
-     */
-    static class ListDirectoryWalker extends DirectoryWalker<File> {
-
-        ListDirectoryWalker() {
-            super();
-        }
-
-        @Override
-        protected void handleDirectoryStart(final File directory, final int depth, final Collection<File> results) throws IOException {
-            // Add all directories except the starting directory
-            if (depth > 0) {
-                results.add(directory);
-            }
-        }
-
-        @Override
-        protected void handleFile(final File file, final int depth, final Collection<File> results) throws IOException {
-            results.add(file);
-        }
-
-        List<File> list(final File startDirectory) throws IOException {
-            final ArrayList<File> files = new ArrayList<>();
-            walk(startDirectory, files);
-            return files;
-        }
-    }
-
-    // Test helper class to pretend a file is shorter than it is
-    private static class ShorterFile extends File {
-        private static final long serialVersionUID = 1L;
-
-        public ShorterFile(final String pathname) {
-            super(pathname);
-        }
-
-        @Override
-        public long length() {
-            return super.length() - 1;
-        }
-    }
-
     private static final long DATE3 = 1000000002000L;
 
     private static final long DATE2 = 1000000001000L;
 
-    // Test data
-
     private static final long DATE1 = 1000000000000L;
 
+    @TempDir
+    public File temporaryFolder;
+
+    // Test data
+
     /**
      * Size of test directory.
      */
@@ -146,8 +105,6 @@ public class FileUtilsTestCase {
      * List files recursively
      */
     private static final ListDirectoryWalker LIST_WALKER = new ListDirectoryWalker();
-    @TempDir
-    public File temporaryFolder;
 
     /**
      * Delay in milliseconds to make sure test for "last modified date" are accurate
@@ -158,118 +115,8 @@ public class FileUtilsTestCase {
     private File testFile2;
 
     private long testFile1Size;
-
     private long testFile2Size;
 
-    private void backDateFile10Minutes(final File testFile) throws IOException {
-        final long mins10 = 1000 * 60 * 10;
-        final long lastModified1 = getLastModifiedMillis(testFile);
-        assertTrue(setLastModifiedMillis(testFile, lastModified1 - mins10));
-        // ensure it was changed
-        assertNotEquals(getLastModifiedMillis(testFile), lastModified1, "Should have changed source date");
-    }
-
-    private void consumeRemaining(Iterator<File> iterator) {
-        if (iterator != null) {
-            iterator.forEachRemaining(e -> {});
-        }
-    }
-
-    private void createCircularSymLink(final File file) throws IOException {
-        if (!FilenameUtils.isSystemWindows()) {
-            Runtime.getRuntime()
-                    .exec("ln -s " + file + "/.. " + file + "/cycle");
-        } else {
-            try {
-                Runtime.getRuntime()
-                        .exec("mklink /D " + file + "/cycle" + file + "/.. ");
-            } catch (final IOException ioe) { // So that tests run in FAT filesystems
-                //don't fail
-            }
-        }
-    }
-
-    private void createFilesForTestCopyDirectory(final File grandParentDir, final File parentDir, final File childDir) throws Exception {
-        final File childDir2 = new File(parentDir, "child2");
-        final File grandChildDir = new File(childDir, "grandChild");
-        final File grandChild2Dir = new File(childDir2, "grandChild2");
-        final File file1 = new File(grandParentDir, "file1.txt");
-        final File file2 = new File(parentDir, "file2.txt");
-        final File file3 = new File(childDir, "file3.txt");
-        final File file4 = new File(childDir2, "file4.txt");
-        final File file5 = new File(grandChildDir, "file5.txt");
-        final File file6 = new File(grandChild2Dir, "file6.txt");
-        FileUtils.deleteDirectory(grandParentDir);
-        grandChildDir.mkdirs();
-        grandChild2Dir.mkdirs();
-        FileUtils.writeStringToFile(file1, "File 1 in grandparent", "UTF8");
-        FileUtils.writeStringToFile(file2, "File 2 in parent", "UTF8");
-        FileUtils.writeStringToFile(file3, "File 3 in child", "UTF8");
-        FileUtils.writeStringToFile(file4, "File 4 in child2", "UTF8");
-        FileUtils.writeStringToFile(file5, "File 5 in grandChild", "UTF8");
-        FileUtils.writeStringToFile(file6, "File 6 in grandChild2", "UTF8");
-    }
-
-    private long getLastModifiedMillis(final File file) throws IOException {
-        return file.lastModified();
-        //https://bugs.openjdk.java.net/browse/JDK-8177809
-        //return Files.getLastModifiedTime(file.toPath()).toMillis();
-    }
-
-    private String getName() {
-        return this.getClass().getSimpleName();
-    }
-
-    private void iterateFilesAndDirs(final File dir, final IOFileFilter fileFilter,
-        final IOFileFilter dirFilter, Collection<File> expectedFilesAndDirs) {
-        Iterator<File> iterator;
-        int filesCount = 0;
-        iterator = FileUtils.iterateFilesAndDirs(dir, fileFilter, dirFilter);
-        try {
-            List<File> actualFiles = new ArrayList<>();
-            while (iterator.hasNext()) {
-                filesCount++;
-                final File file = iterator.next();
-                actualFiles.add(file);
-                assertTrue(expectedFilesAndDirs.contains(file),
-                    () -> "Unexpected directory/file " + file + ", expected one of " + expectedFilesAndDirs);
-            }
-            assertEquals(expectedFilesAndDirs.size(), filesCount, () -> actualFiles.toString());
-        } finally {
-            // MUST consume until the end in order to close the underlying stream.
-            consumeRemaining(iterator);
-        }
-    }
-
-    //-----------------------------------------------------------------------
-    void openOutputStream_noParent(final boolean createFile) throws Exception {
-        final File file = new File("test.txt");
-        assertNull(file.getParentFile());
-        try {
-            if (createFile) {
-                TestUtils.createLineBasedFile(file, new String[]{"Hello"});
-            }
-            try (FileOutputStream out = FileUtils.openOutputStream(file)) {
-                out.write(0);
-            }
-            assertTrue(file.exists());
-        } finally {
-            if (!file.delete()) {
-                file.deleteOnExit();
-            }
-        }
-    }
-
-    private boolean setLastModifiedMillis(final File testFile, final long millis) {
-        return testFile.setLastModified(millis);
-//        try {
-//            Files.setLastModifiedTime(testFile.toPath(), FileTime.fromMillis(millis));
-//        } catch (IOException e) {
-//            return false;
-//        }
-//        return true;
-    }
-
     @BeforeEach
     public void setUp() throws Exception {
         testFile1 = new File(temporaryFolder, "file1-test.txt");
@@ -313,6 +160,74 @@ public class FileUtilsTestCase {
         }
     }
 
+    private String getName() {
+        return this.getClass().getSimpleName();
+    }
+
+    //-----------------------------------------------------------------------
+    @Test
+    public void testGetFile() {
+        final File expected_A = new File("src");
+        final File expected_B = new File(expected_A, "main");
+        final File expected_C = new File(expected_B, "java");
+        assertEquals(expected_A, FileUtils.getFile("src"), "A");
+        assertEquals(expected_B, FileUtils.getFile("src", "main"), "B");
+        assertEquals(expected_C, FileUtils.getFile("src", "main", "java"), "C");
+        try {
+            FileUtils.getFile((String[]) null);
+            fail("Expected NullPointerException");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+    }
+
+    @Test
+    public void testGetFile_Parent() {
+        final File parent = new File("parent");
+        final File expected_A = new File(parent, "src");
+        final File expected_B = new File(expected_A, "main");
+        final File expected_C = new File(expected_B, "java");
+        assertEquals(expected_A, FileUtils.getFile(parent, "src"), "A");
+        assertEquals(expected_B, FileUtils.getFile(parent, "src", "main"), "B");
+        assertEquals(expected_C, FileUtils.getFile(parent, "src", "main", "java"), "C");
+        try {
+            FileUtils.getFile(parent, (String[]) null);
+            fail("Expected NullPointerException");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.getFile((File) null, "src");
+            fail("Expected NullPointerException");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+    }
+
+    @Test
+    public void testGetTempDirectoryPath() {
+        assertEquals(System.getProperty("java.io.tmpdir"),
+                FileUtils.getTempDirectoryPath());
+    }
+
+    @Test
+    public void testGetTempDirectory() {
+        final File tempDirectory = new File(System.getProperty("java.io.tmpdir"));
+        assertEquals(tempDirectory, FileUtils.getTempDirectory());
+    }
+
+    @Test
+    public void testGetUserDirectoryPath() {
+        assertEquals(System.getProperty("user.home"),
+                FileUtils.getUserDirectoryPath());
+    }
+
+    @Test
+    public void testGetUserDirectory() {
+        final File userDirectory = new File(System.getProperty("user.home"));
+        assertEquals(userDirectory, FileUtils.getUserDirectory());
+    }
+
     //-----------------------------------------------------------------------
     @Test
     public void test_openInputStream_exists() throws Exception {
@@ -344,6 +259,35 @@ public class FileUtilsTestCase {
         }
     }
 
+    //-----------------------------------------------------------------------
+    void openOutputStream_noParent(final boolean createFile) throws Exception {
+        final File file = new File("test.txt");
+        assertNull(file.getParentFile());
+        try {
+            if (createFile) {
+                TestUtils.createLineBasedFile(file, new String[]{"Hello"});
+            }
+            try (FileOutputStream out = FileUtils.openOutputStream(file)) {
+                out.write(0);
+            }
+            assertTrue(file.exists());
+        } finally {
+            if (!file.delete()) {
+                file.deleteOnExit();
+            }
+        }
+    }
+
+    @Test
+    public void test_openOutputStream_noParentCreateFile() throws Exception {
+        openOutputStream_noParent(true);
+    }
+
+    @Test
+    public void test_openOutputStream_noParentNoFile() throws Exception {
+        openOutputStream_noParent(false);
+    }
+
     @Test
     public void test_openOutputStream_exists() throws Exception {
         final File file = new File(temporaryFolder, "test.txt");
@@ -365,16 +309,6 @@ public class FileUtilsTestCase {
         }
     }
 
-    @Test
-    public void test_openOutputStream_noParentCreateFile() throws Exception {
-        openOutputStream_noParent(true);
-    }
-
-    @Test
-    public void test_openOutputStream_noParentNoFile() throws Exception {
-        openOutputStream_noParent(false);
-    }
-
     @Test
     public void test_openOutputStream_notExists() throws Exception {
         final File file = new File(temporaryFolder, "a/test.txt");
@@ -464,119 +398,188 @@ public class FileUtilsTestCase {
         assertEquals("1 GB", FileUtils.byteCountToDisplaySize(Integer.MAX_VALUE));
     }
 
+    //-----------------------------------------------------------------------
     @Test
-    public void testChecksum() throws Exception {
-        // create a test file
-        final String text = "Imagination is more important than knowledge - Einstein";
-        final File file = new File(temporaryFolder, "checksum-test.txt");
-        FileUtils.writeStringToFile(file, text, "US-ASCII");
+    public void testToFile1() throws Exception {
+        final URL url = new URL("file", null, "a/b/c/file.txt");
+        final File file = FileUtils.toFile(url);
+        assertTrue(file.toString().contains("file.txt"));
+    }
 
-        // compute the expected checksum
-        final Checksum expectedChecksum = new CRC32();
-        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
-        final long expectedValue = expectedChecksum.getValue();
+    @Test
+    public void testToFile2() throws Exception {
+        final URL url = new URL("file", null, "a/b/c/file%20n%61me%2520.tx%74");
+        final File file = FileUtils.toFile(url);
+        assertTrue(file.toString().contains("file name%20.txt"));
+    }
 
-        // compute the checksum of the file
-        final Checksum testChecksum = new CRC32();
-        final Checksum resultChecksum = FileUtils.checksum(file, testChecksum);
-        final long resultValue = resultChecksum.getValue();
+    @Test
+    public void testToFile3() throws Exception {
+        assertEquals(null, FileUtils.toFile(null));
+        assertEquals(null, FileUtils.toFile(new URL("http://jakarta.apache.org")));
+    }
 
-        assertSame(testChecksum, resultChecksum);
-        assertEquals(expectedValue, resultValue);
+    @Test
+    public void testToFile4() throws Exception {
+        final URL url = new URL("file", null, "a/b/c/file%%20%me.txt%");
+        final File file = FileUtils.toFile(url);
+        assertTrue(file.toString().contains("file% %me.txt%"));
     }
 
-    //-----------------------------------------------------------------------
+    /* IO-252 */
     @Test
-    public void testChecksumCRC32() throws Exception {
-        // create a test file
-        final String text = "Imagination is more important than knowledge - Einstein";
-        final File file = new File(temporaryFolder, "checksum-test.txt");
-        FileUtils.writeStringToFile(file, text, "US-ASCII");
+    public void testToFile5() throws Exception {
+        final URL url = new URL("file", null, "both%20are%20100%20%25%20true");
+        final File file = FileUtils.toFile(url);
+        assertEquals("both are 100 % true", file.toString());
+    }
 
-        // compute the expected checksum
-        final Checksum expectedChecksum = new CRC32();
-        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
-        final long expectedValue = expectedChecksum.getValue();
+    @Test
+    public void testToFileUtf8() throws Exception {
+        final URL url = new URL("file", null, "/home/%C3%A4%C3%B6%C3%BC%C3%9F");
+        final File file = FileUtils.toFile(url);
+        assertTrue(file.toString().contains("\u00E4\u00F6\u00FC\u00DF"));
+    }
 
-        // compute the checksum of the file
-        final long resultValue = FileUtils.checksumCRC32(file);
+    @Test
+    public void testDecodeUrl() {
+        assertEquals("", FileUtils.decodeUrl(""));
+        assertEquals("foo", FileUtils.decodeUrl("foo"));
+        assertEquals("+", FileUtils.decodeUrl("+"));
+        assertEquals("% ", FileUtils.decodeUrl("%25%20"));
+        assertEquals("%20", FileUtils.decodeUrl("%2520"));
+        assertEquals("jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class", FileUtils
+                .decodeUrl("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class"));
+    }
 
-        assertEquals(expectedValue, resultValue);
+    @Test
+    public void testDecodeUrlLenient() {
+        assertEquals(" ", FileUtils.decodeUrl(" "));
+        assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("\u00E4\u00F6\u00FC\u00DF"));
+        assertEquals("%", FileUtils.decodeUrl("%"));
+        assertEquals("% ", FileUtils.decodeUrl("%%20"));
+        assertEquals("%2", FileUtils.decodeUrl("%2"));
+        assertEquals("%2G", FileUtils.decodeUrl("%2G"));
     }
 
     @Test
-    public void testChecksumDouble() throws Exception {
-        // create a test file
-        final String text1 = "Imagination is more important than knowledge - Einstein";
-        final File file1 = new File(temporaryFolder, "checksum-test.txt");
-        FileUtils.writeStringToFile(file1, text1, "US-ASCII");
+    public void testDecodeUrlNullSafe() {
+        assertNull(FileUtils.decodeUrl(null));
+    }
 
-        // create a second test file
-        final String text2 = "To be or not to be - Shakespeare";
-        final File file2 = new File(temporaryFolder, "checksum-test2.txt");
-        FileUtils.writeStringToFile(file2, text2, "US-ASCII");
+    @Test
+    public void testDecodeUrlEncodingUtf8() {
+        assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("%C3%A4%C3%B6%C3%BC%C3%9F"));
+    }
 
-        // compute the expected checksum
-        final Checksum expectedChecksum = new CRC32();
-        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
-        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
-        final long expectedValue = expectedChecksum.getValue();
+    // toFiles
 
-        // compute the checksum of the file
-        final Checksum testChecksum = new CRC32();
-        FileUtils.checksum(file1, testChecksum);
-        FileUtils.checksum(file2, testChecksum);
-        final long resultValue = testChecksum.getValue();
+    @Test
+    public void testToFiles1() throws Exception {
+        final URL[] urls = new URL[]{
+                new URL("file", null, "file1.txt"),
+                new URL("file", null, "file2.txt"),
+        };
+        final File[] files = FileUtils.toFiles(urls);
 
-        assertEquals(expectedValue, resultValue);
+        assertEquals(urls.length, files.length);
+        assertEquals(true, files[0].toString().contains("file1.txt"), "File: " + files[0]);
+        assertEquals(true, files[1].toString().contains("file2.txt"), "File: " + files[1]);
     }
 
     @Test
-    public void testChecksumOnDirectory() throws Exception {
-        try {
-            FileUtils.checksum(new File("."), new CRC32());
-            fail();
-        } catch (final IllegalArgumentException ex) {
-            // expected
-        }
+    public void testToFiles2() throws Exception {
+        final URL[] urls = new URL[]{
+                new URL("file", null, "file1.txt"),
+                null,
+        };
+        final File[] files = FileUtils.toFiles(urls);
+
+        assertEquals(urls.length, files.length);
+        assertEquals(true, files[0].toString().contains("file1.txt"), "File: " + files[0]);
+        assertEquals(null, files[1], "File: " + files[1]);
     }
 
     @Test
-    public void testChecksumOnNullChecksum() throws Exception {
-        // create a test file
-        final String text = "Imagination is more important than knowledge - Einstein";
-        final File file = new File(temporaryFolder, "checksum-test.txt");
-        FileUtils.writeStringToFile(file, text, "US-ASCII");
-        try {
-            FileUtils.checksum(file, null);
-            fail();
-        } catch (final NullPointerException ex) {
-            // expected
-        }
+    public void testToFiles3() throws Exception {
+        final URL[] urls = null;
+        final File[] files = FileUtils.toFiles(urls);
+
+        assertEquals(0, files.length);
     }
 
     @Test
-    public void testChecksumOnNullFile() throws Exception {
+    public void testToFiles3a() throws Exception {
+        final URL[] urls = new URL[0]; // empty array
+        final File[] files = FileUtils.toFiles(urls);
+
+        assertEquals(0, files.length);
+    }
+
+    @Test
+    public void testToFiles4() throws Exception {
+        final URL[] urls = new URL[]{
+                new URL("file", null, "file1.txt"),
+                new URL("http", "jakarta.apache.org", "file1.txt"),
+        };
         try {
-            FileUtils.checksum(null, new CRC32());
+            FileUtils.toFiles(urls);
             fail();
-        } catch (final NullPointerException ex) {
-            // expected
+        } catch (final IllegalArgumentException ignore) {
         }
     }
 
-    // Compare sizes of a directory tree using long and BigInteger methods
+    // toURLs
+
     @Test
-    public void testCompareSizeOf() {
-        final File start = new File("src/test/java");
-        final long sizeLong1 = FileUtils.sizeOf(start);
-        final BigInteger sizeBig = FileUtils.sizeOfAsBigInteger(start);
-        final long sizeLong2 = FileUtils.sizeOf(start);
-        assertEquals(sizeLong1, sizeLong2, "Size should not change");
-        assertEquals(sizeLong1, sizeBig.longValue(), "longSize should equal BigSize");
+    public void testToURLs1() throws Exception {
+        final File[] files = new File[]{
+                new File(temporaryFolder, "file1.txt"),
+                new File(temporaryFolder, "file2.txt"),
+                new File(temporaryFolder, "test file.txt"),
+        };
+        final URL[] urls = FileUtils.toURLs(files);
+
+        assertEquals(files.length, urls.length);
+        assertTrue(urls[0].toExternalForm().startsWith("file:"));
+        assertTrue(urls[0].toExternalForm().contains("file1.txt"));
+        assertTrue(urls[1].toExternalForm().startsWith("file:"));
+        assertTrue(urls[1].toExternalForm().contains("file2.txt"));
+
+        // Test escaped char
+        assertTrue(urls[2].toExternalForm().startsWith("file:"));
+        assertTrue(urls[2].toExternalForm().contains("test%20file.txt"));
     }
 
-    // toFiles
+//   @Test public void testToURLs2() throws Exception {
+//        File[] files = new File[] {
+//            new File(temporaryFolder, "file1.txt"),
+//            null,
+//        };
+//        URL[] urls = FileUtils.toURLs(files);
+//
+//        assertEquals(files.length, urls.length);
+//        assertTrue(urls[0].toExternalForm().startsWith("file:"));
+//        assertTrue(urls[0].toExternalForm().indexOf("file1.txt") > 0);
+//        assertEquals(null, urls[1]);
+//    }
+//
+//   @Test public void testToURLs3() throws Exception {
+//        File[] files = null;
+//        URL[] urls = FileUtils.toURLs(files);
+//
+//        assertEquals(0, urls.length);
+//    }
+
+    @Test
+    public void testToURLs3a() throws Exception {
+        final File[] files = new File[0]; // empty array
+        final URL[] urls = FileUtils.toURLs(files);
+
+        assertEquals(0, urls.length);
+    }
+
+    // contentEquals
 
     @Test
     public void testContentEquals() throws Exception {
@@ -719,398 +722,499 @@ public class FileUtilsTestCase {
         assertTrue(FileUtils.contentEqualsIgnoreEOL(file1, file2, null));
     }
 
+    // copyURLToFile
+
     @Test
-    public void testCopyDirectoryErrors() throws Exception {
-        try {
-            FileUtils.copyDirectory(null, null);
-            fail();
-        } catch (final NullPointerException ignore) {
-        }
-        try {
-            FileUtils.copyDirectory(new File("a"), null);
-            fail();
-        } catch (final NullPointerException ignore) {
-        }
-        try {
-            FileUtils.copyDirectory(null, new File("a"));
-            fail();
-        } catch (final NullPointerException ignore) {
-        }
-        try {
-            FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
-            fail();
-        } catch (final IOException ignore) {
-        }
-        try {
-            FileUtils.copyDirectory(testFile1, new File("a"));
-            fail();
-        } catch (final IOException ignore) {
-        }
-        try {
-            FileUtils.copyDirectory(temporaryFolder, testFile1);
-            fail();
-        } catch (final IOException ignore) {
-        }
-        try {
-            FileUtils.copyDirectory(temporaryFolder, temporaryFolder);
-            fail();
-        } catch (final IOException ignore) {
+    public void testCopyURLToFile() throws Exception {
+        // Creates file
+        final File file = new File(temporaryFolder, getName());
+        file.deleteOnExit();
+
+        // Loads resource
+        final String resourceName = "/java/lang/Object.class";
+        FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
+
+        // Tests that resuorce was copied correctly
+        try (FileInputStream fis = new FileInputStream(file)) {
+            assertTrue(IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis),
+                    "Content is not equal.");
         }
+        //TODO Maybe test copy to itself like for copyFile()
     }
 
     @Test
-    public void testCopyDirectoryFiltered() throws Exception {
-        final File grandParentDir = new File(temporaryFolder, "grandparent");
-        final File parentDir = new File(grandParentDir, "parent");
-        final File childDir = new File(parentDir, "child");
-        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
+    public void testCopyURLToFileWithTimeout() throws Exception {
+        // Creates file
+        final File file = new File(temporaryFolder, "testCopyURLToFileWithTimeout");
+        file.deleteOnExit();
 
-        final NameFileFilter filter = new NameFileFilter(new String[]{"parent", "child", "file3.txt"});
-        final File destDir = new File(temporaryFolder, "copydest");
+        // Loads resource
+        final String resourceName = "/java/lang/Object.class";
+        FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
 
-        FileUtils.copyDirectory(grandParentDir, destDir, filter);
-        final List<File> files = LIST_WALKER.list(destDir);
-        assertEquals(3, files.size());
-        assertEquals("parent", files.get(0).getName());
-        assertEquals("child", files.get(1).getName());
-        assertEquals("file3.txt", files.get(2).getName());
+        // Tests that resuorce was copied correctly
+        try (FileInputStream fis = new FileInputStream(file)) {
+            assertTrue(IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis),
+                    "Content is not equal.");
+        }
+        //TODO Maybe test copy to itself like for copyFile()
     }
 
-    @Test
-    public void testCopyDirectoryPreserveDates() throws Exception {
-        final File source = new File(temporaryFolder, "source");
-        final File sourceDirectory = new File(source, "directory");
-        final File sourceFile = new File(sourceDirectory, "hello.txt");
+    // forceMkdir
 
-        // Prepare source data
-        source.mkdirs();
-        sourceDirectory.mkdir();
-        FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
-        // Set dates in reverse order to avoid overwriting previous values
-        // Also, use full seconds (arguments are in ms) close to today
-        // but still highly unlikely to occur in the real world
-        assertTrue(setLastModifiedMillis(sourceFile, DATE3));
-        assertTrue(setLastModifiedMillis(sourceDirectory, DATE2));
-        assertTrue(setLastModifiedMillis(source, DATE1));
+    @Test
+    public void testForceMkdir() throws Exception {
+        // Tests with existing directory
+        FileUtils.forceMkdir(temporaryFolder);
 
-        final File target = new File(temporaryFolder, "target");
-        final File targetDirectory = new File(target, "directory");
-        final File targetFile = new File(targetDirectory, "hello.txt");
+        // Creates test file
+        final File testFile = new File(temporaryFolder, getName());
+        testFile.deleteOnExit();
+        testFile.createNewFile();
+        assertTrue(testFile.exists(), "Test file does not exist.");
 
-        // Test with preserveFileDate disabled
-        // On Windows, the last modified time is copied by default.
-        FileUtils.copyDirectory(source, target, false);
-        assertNotEquals(DATE1, getLastModifiedMillis(target));
-        assertNotEquals(DATE2, getLastModifiedMillis(targetDirectory));
-        if (!SystemUtils.IS_OS_WINDOWS) {
-            assertNotEquals(DATE3, getLastModifiedMillis(targetFile));
+        // Tests with existing file
+        try {
+            FileUtils.forceMkdir(testFile);
+            fail("Exception expected.");
+        } catch (final IOException ignore) {
         }
-        FileUtils.deleteDirectory(target);
 
-        // Test with preserveFileDate enabled
-        FileUtils.copyDirectory(source, target, true);
-        assertEquals(DATE1, getLastModifiedMillis(target));
-        assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
-        assertEquals(DATE3, getLastModifiedMillis(targetFile));
-        FileUtils.deleteDirectory(target);
+        testFile.delete();
 
-        // also if the target directory already exists (IO-190)
-        target.mkdirs();
-        FileUtils.copyDirectory(source, target, true);
-        assertEquals(DATE1, getLastModifiedMillis(target));
-        assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
-        assertEquals(DATE3, getLastModifiedMillis(targetFile));
-        FileUtils.deleteDirectory(target);
+        // Tests with non-existent directory
+        FileUtils.forceMkdir(testFile);
+        assertTrue(testFile.exists(), "Directory was not created.");
+    }
 
-        // also if the target subdirectory already exists (IO-190)
-        targetDirectory.mkdirs();
-        FileUtils.copyDirectory(source, target, true);
-        assertEquals(DATE1, getLastModifiedMillis(target));
-        assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
-        assertEquals(DATE3, getLastModifiedMillis(targetFile));
-        FileUtils.deleteDirectory(target);
+    @Test
+    public void testForceMkdirParent() throws Exception {
+        // Tests with existing directory
+        assertTrue(temporaryFolder.exists());
+        final File testParentDir = new File(temporaryFolder, "testForceMkdirParent");
+        testParentDir.delete();
+        assertFalse(testParentDir.exists());
+        final File testFile = new File(testParentDir, "test.txt");
+        assertFalse(testParentDir.exists());
+        assertFalse(testFile.exists());
+        // Create
+        FileUtils.forceMkdirParent(testFile);
+        assertTrue(testParentDir.exists());
+        assertFalse(testFile.exists());
+        // Again
+        FileUtils.forceMkdirParent(testFile);
+        assertTrue(testParentDir.exists());
+        assertFalse(testFile.exists());
     }
 
-    // toURLs
+    // sizeOfDirectory
 
-    /* Test for IO-141 */
     @Test
-    public void testCopyDirectoryToChild() throws Exception {
-        final File grandParentDir = new File(temporaryFolder, "grandparent");
-        final File parentDir = new File(grandParentDir, "parent");
-        final File childDir = new File(parentDir, "child");
-        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
+    public void testSizeOfDirectory() throws Exception {
+        final File file = new File(temporaryFolder, getName());
 
-        final long expectedCount = LIST_WALKER.list(grandParentDir).size() +
-                LIST_WALKER.list(parentDir).size();
-        final long expectedSize = FileUtils.sizeOfDirectory(grandParentDir) +
-                FileUtils.sizeOfDirectory(parentDir);
-        FileUtils.copyDirectory(parentDir, childDir);
-        assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
-        assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
-        assertTrue(expectedCount > 0, "Count > 0");
-        assertTrue(expectedSize > 0, "Size > 0");
+        // Non-existent file
+        try {
+            FileUtils.sizeOfDirectory(file);
+            fail("Exception expected.");
+        } catch (final IllegalArgumentException ignore) {
+        }
+
+        // Creates file
+        file.createNewFile();
+
+        // Existing file
+        try {
+            FileUtils.sizeOfDirectory(file);
+            fail("Exception expected.");
+        } catch (final IllegalArgumentException ignore) {
+        }
+
+        // Existing directory
+        file.delete();
+        file.mkdir();
+
+        // Create a cyclic symlink
+        this.createCircularSymLink(file);
+
+        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOfDirectory(file), "Unexpected directory size");
     }
 
-//   @Test public void testToURLs2() throws Exception {
-//        File[] files = new File[] {
-//            new File(temporaryFolder, "file1.txt"),
-//            null,
-//        };
-//        URL[] urls = FileUtils.toURLs(files);
-//
-//        assertEquals(files.length, urls.length);
-//        assertTrue(urls[0].toExternalForm().startsWith("file:"));
-//        assertTrue(urls[0].toExternalForm().indexOf("file1.txt") > 0);
-//        assertEquals(null, urls[1]);
-//    }
-//
-//   @Test public void testToURLs3() throws Exception {
-//        File[] files = null;
-//        URL[] urls = FileUtils.toURLs(files);
-//
-//        assertEquals(0, urls.length);
-//    }
+    private void createCircularSymLink(final File file) throws IOException {
+        if (!FilenameUtils.isSystemWindows()) {
+            Runtime.getRuntime()
+                    .exec("ln -s " + file + "/.. " + file + "/cycle");
+        } else {
+            try {
+                Runtime.getRuntime()
+                        .exec("mklink /D " + file + "/cycle" + file + "/.. ");
+            } catch (final IOException ioe) { // So that tests run in FAT filesystems
+                //don't fail
+            }
+        }
+    }
 
     @Test
-    public void testCopyDirectoryToDirectory_NonExistingDest() throws Exception {
-        if (!testFile1.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile1
-                    + " as the parent directory does not exist");
+    public void testSizeOfDirectoryAsBigInteger() throws Exception {
+        final File file = new File(temporaryFolder, getName());
+
+        // Non-existent file
+        try {
+            FileUtils.sizeOfDirectoryAsBigInteger(file);
+            fail("Exception expected.");
+        } catch (final IllegalArgumentException ignore) {
         }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(testFile1));
+
+        // Creates file
+        file.createNewFile();
+        file.deleteOnExit();
+
+        // Existing file
         try {
-            TestUtils.generateTestData(output1, 1234);
-        } finally {
-            IOUtils.closeQuietly(output1);
+            FileUtils.sizeOfDirectoryAsBigInteger(file);
+            fail("Exception expected.");
+        } catch (final IllegalArgumentException ignore) {
         }
-        if (!testFile2.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile2
+
+        // Existing directory
+        file.delete();
+        file.mkdir();
+
+        this.createCircularSymLink(file);
+
+        assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), "Unexpected directory size");
+
+        // Existing directory which size is greater than zero
+        file.delete();
+        file.mkdir();
+
+        final File nonEmptyFile = new File(file, "nonEmptyFile" + System.nanoTime());
+        if (!nonEmptyFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + nonEmptyFile
                     + " as the parent directory does not exist");
         }
         final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile2));
+                new BufferedOutputStream(new FileOutputStream(nonEmptyFile));
         try {
-            TestUtils.generateTestData(output, 4321);
+            TestUtils.generateTestData(output, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
         } finally {
             IOUtils.closeQuietly(output);
         }
-        final File srcDir = temporaryFolder;
-        final File subDir = new File(srcDir, "sub");
-        subDir.mkdir();
-        final File subFile = new File(subDir, "A.txt");
-        FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
-        final File destDir = new File(System.getProperty("java.io.tmpdir"), "tmp-FileUtilsTestCase");
-        FileUtils.deleteDirectory(destDir);
-        final File actualDestDir = new File(destDir, srcDir.getName());
+        nonEmptyFile.deleteOnExit();
 
-        FileUtils.copyDirectoryToDirectory(srcDir, destDir);
+        assertEquals(TEST_DIRECTORY_SIZE_GT_ZERO_BI, FileUtils.sizeOfDirectoryAsBigInteger(file),
+                "Unexpected directory size");
 
-        assertTrue(destDir.exists(), "Check exists");
-        assertTrue(actualDestDir.exists(), "Check exists");
-        final long srcSize = FileUtils.sizeOfDirectory(srcDir);
-        assertTrue(srcSize > 0, "Size > 0");
-        assertEquals(srcSize, FileUtils.sizeOfDirectory(actualDestDir), "Check size");
-        assertTrue(new File(actualDestDir, "sub/A.txt").exists());
-        FileUtils.deleteDirectory(destDir);
+        nonEmptyFile.delete();
+        file.delete();
     }
 
-    // contentEquals
+    // Compare sizes of a directory tree using long and BigInteger methods
+    @Test
+    public void testCompareSizeOf() {
+        final File start = new File("src/test/java");
+        final long sizeLong1 = FileUtils.sizeOf(start);
+        final BigInteger sizeBig = FileUtils.sizeOfAsBigInteger(start);
+        final long sizeLong2 = FileUtils.sizeOf(start);
+        assertEquals(sizeLong1, sizeLong2, "Size should not change");
+        assertEquals(sizeLong1, sizeBig.longValue(), "longSize should equal BigSize");
+    }
 
     @Test
-    public void testCopyDirectoryToExistingDest() throws Exception {
-        if (!testFile1.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile1
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(testFile1));
+    public void testSizeOf() throws Exception {
+        final File file = new File(temporaryFolder, getName());
+
+        // Null argument
         try {
-            TestUtils.generateTestData(output1, 1234);
-        } finally {
-            IOUtils.closeQuietly(output1);
-        }
-        if (!testFile2.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile2
-                    + " as the parent directory does not exist");
+            FileUtils.sizeOf(null);
+            fail("Exception expected.");
+        } catch (final NullPointerException ignore) {
         }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile2));
+
+        // Non-existent file
         try {
-            TestUtils.generateTestData(output, 4321);
-        } finally {
-            IOUtils.closeQuietly(output);
+            FileUtils.sizeOf(file);
+            fail("Exception expected.");
+        } catch (final IllegalArgumentException ignore) {
         }
-        final File srcDir = temporaryFolder;
-        final File subDir = new File(srcDir, "sub");
-        subDir.mkdir();
-        final File subFile = new File(subDir, "A.txt");
-        FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
-        final File destDir = new File(System.getProperty("java.io.tmpdir"), "tmp-FileUtilsTestCase");
-        FileUtils.deleteDirectory(destDir);
-        destDir.mkdirs();
 
-        FileUtils.copyDirectory(srcDir, destDir);
+        // Creates file
+        file.createNewFile();
+        file.deleteOnExit();
 
-        final long srcSize = FileUtils.sizeOfDirectory(srcDir);
-        assertTrue(srcSize > 0, "Size > 0");
-        assertEquals(srcSize, FileUtils.sizeOfDirectory(destDir));
-        assertTrue(new File(destDir, "sub/A.txt").exists());
-    }
+        // New file
+        assertEquals(0, FileUtils.sizeOf(file));
+        file.delete();
 
-    /* Test for IO-141 */
-    @Test
-    public void testCopyDirectoryToGrandChild() throws Exception {
-        final File grandParentDir = new File(temporaryFolder, "grandparent");
-        final File parentDir = new File(grandParentDir, "parent");
-        final File childDir = new File(parentDir, "child");
-        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
+        // Existing file
+        assertEquals(testFile1Size, FileUtils.sizeOf(testFile1), "Unexpected files size");
 
-        final long expectedCount = LIST_WALKER.list(grandParentDir).size() * 2;
-        final long expectedSize = FileUtils.sizeOfDirectory(grandParentDir) * 2;
-        FileUtils.copyDirectory(grandParentDir, childDir);
-        assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
-        assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
-        assertTrue(expectedSize > 0, "Size > 0");
+        // Existing directory
+        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOf(temporaryFolder), "Unexpected directory size");
     }
 
-    // copyURLToFile
-
-    /* Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops */
     @Test
-    public void testCopyDirectoryToItself() throws Exception {
-        final File dir = new File(temporaryFolder, "itself");
-        dir.mkdirs();
-        FileUtils.copyDirectoryToDirectory(dir, dir);
-        assertEquals(1, LIST_WALKER.list(dir).size());
-    }
+    public void testSizeOfAsBigInteger() throws Exception {
+        final File file = new File(temporaryFolder, getName());
 
-    @Test
-    public void testCopyDirectoryToNonExistingDest() throws Exception {
-        if (!testFile1.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile1
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(testFile1));
+        // Null argument
         try {
-            TestUtils.generateTestData(output1, 1234);
-        } finally {
-            IOUtils.closeQuietly(output1);
-        }
-        if (!testFile2.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile2
-                    + " as the parent directory does not exist");
+            FileUtils.sizeOfAsBigInteger(null);
+            fail("Exception expected.");
+        } catch (final NullPointerException ignore) {
         }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile2));
+
+        // Non-existent file
         try {
-            TestUtils.generateTestData(output, 4321);
-        } finally {
-            IOUtils.closeQuietly(output);
+            FileUtils.sizeOfAsBigInteger(file);
+            fail("Exception expected.");
+        } catch (final IllegalArgumentException ignore) {
         }
-        final File srcDir = temporaryFolder;
-        final File subDir = new File(srcDir, "sub");
-        subDir.mkdir();
-        final File subFile = new File(subDir, "A.txt");
-        FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
-        final File destDir = new File(System.getProperty("java.io.tmpdir"), "tmp-FileUtilsTestCase");
-        FileUtils.deleteDirectory(destDir);
-
-        FileUtils.copyDirectory(srcDir, destDir);
 
-        assertTrue(destDir.exists(), "Check exists");
-        final long sizeOfSrcDirectory = FileUtils.sizeOfDirectory(srcDir);
-        assertTrue(sizeOfSrcDirectory > 0, "Size > 0");
-        assertEquals(sizeOfSrcDirectory, FileUtils.sizeOfDirectory(destDir), "Check size");
-        assertTrue(new File(destDir, "sub/A.txt").exists());
-        FileUtils.deleteDirectory(destDir);
-    }
-
-    // forceMkdir
+        // Creates file
+        file.createNewFile();
+        file.deleteOnExit();
 
-    @Test
-    public void testCopyFile1() throws Exception {
-        final File destination = new File(temporaryFolder, "copy1.txt");
+        // New file
+        assertEquals(BigInteger.ZERO, FileUtils.sizeOfAsBigInteger(file));
+        file.delete();
 
-        backDateFile10Minutes(testFile1); // set test file back 10 minutes
+        // Existing file
+        assertEquals(BigInteger.valueOf(testFile1Size), FileUtils.sizeOfAsBigInteger(testFile1),
+                "Unexpected files size");
 
-        FileUtils.copyFile(testFile1, destination);
-        assertTrue(destination.exists(), "Check Exist");
-        assertEquals(testFile1Size, destination.length(), "Check Full copy");
-        assertEquals(getLastModifiedMillis(testFile1), getLastModifiedMillis(destination), "Check last modified date preserved");
+        // Existing directory
+        assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfAsBigInteger(temporaryFolder),
+                "Unexpected directory size");
     }
 
+    // isFileNewer / isFileOlder
     @Test
-    public void testCopyFile1ToDir() throws Exception {
-        final File directory = new File(temporaryFolder, "subdir");
-        if (!directory.exists()) {
-            directory.mkdirs();
-        }
-        final File destination = new File(directory, testFile1.getName());
-
-        backDateFile10Minutes(testFile1);
+    public void testIsFileNewerOlder() throws Exception {
+        final File reference = new File(temporaryFolder, "FileUtils-reference.txt");
+        final File oldFile = new File(temporaryFolder, "FileUtils-old.txt");
+        final File newFile = new File(temporaryFolder, "FileUtils-new.txt");
+        final File invalidFile = new File(temporaryFolder, "FileUtils-invalid-file.txt");
 
-        FileUtils.copyFileToDirectory(testFile1, directory);
-        assertTrue(destination.exists(), "Check Exist");
-        assertEquals(testFile1Size, destination.length(), "Check Full copy");
-        assertEquals(testFile1.lastModified(), destination.lastModified(), "Check last modified date preserved");
+        // Create Files
+        if (!oldFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + oldFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(oldFile));
+        try {
+            TestUtils.generateTestData(output1, 0);
+        } finally {
+            IOUtils.closeQuietly(output1);
+        }
 
-        assertThrows(IOException.class,
-            () -> FileUtils.copyFileToDirectory(destination, directory),
-            "Should not be able to copy a file into the same directory as itself");
-    }
+        do {
+            try {
+                TestUtils.sleep(1000);
+            } catch (final InterruptedException ie) {
+                // ignore
+            }
+            if (!reference.getParentFile().exists()) {
+                throw new IOException("Cannot create file " + reference
+                        + " as the parent directory does not exist");
+            }
+            final BufferedOutputStream output =
+                    new BufferedOutputStream(new FileOutputStream(reference));
+            try {
+                TestUtils.generateTestData(output, 0);
+            } finally {
+                IOUtils.closeQuietly(output);
+            }
+        } while (getLastModifiedMillis(oldFile) == getLastModifiedMillis(reference));
 
-    // sizeOfDirectory
+        final Date date = new Date();
+        final long now = date.getTime();
+        final Instant instant = date.toInstant();
+        final ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, ZoneId.systemDefault());
+        final LocalDateTime localDateTime = zonedDateTime.toLocalDateTime();
+        final LocalDate localDate = zonedDateTime.toLocalDate();
+        final LocalDate localDatePlusDay = localDate.plusDays(1);
+        final LocalTime localTime = LocalTime.ofSecondOfDay(0);
 
-    @Test
-    public void testCopyFile2() throws Exception {
-        final File destination = new File(temporaryFolder, "copy2.txt");
+        do {
+            try {
+                TestUtils.sleep(1000);
+            } catch (final InterruptedException ie) {
+                // ignore
+            }
+            if (!newFile.getParentFile().exists()) {
+                throw new IOException("Cannot create file " + newFile
+                        + " as the parent directory does not exist");
+            }
+            final BufferedOutputStream output =
+                    new BufferedOutputStream(new FileOutputStream(newFile));
+            try {
+                TestUtils.generateTestData(output, 0);
+            } finally {
+                IOUtils.closeQuietly(output);
+            }
+        } while (getLastModifiedMillis(reference) == getLastModifiedMillis(newFile));
 
-        backDateFile10Minutes(testFile1); // set test file back 10 minutes
+        // Test isFileNewer()
+        assertFalse(FileUtils.isFileNewer(oldFile, reference), "Old File - Newer - File");
+        assertFalse(FileUtils.isFileNewer(oldFile, date), "Old File - Newer - Date");
+        assertFalse(FileUtils.isFileNewer(oldFile, now), "Old File - Newer - Mili");
+        assertFalse(FileUtils.isFileNewer(oldFile, instant), "Old File - Newer - Instant");
+        assertFalse(FileUtils.isFileNewer(oldFile, zonedDateTime), "Old File - Newer - ZonedDateTime");
+        assertFalse(FileUtils.isFileNewer(oldFile, localDateTime), "Old File - Newer - LocalDateTime");
+        assertFalse(FileUtils.isFileNewer(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Newer - LocalDateTime,ZoneId");
+        assertFalse(FileUtils.isFileNewer(oldFile, localDate), "Old File - Newer - LocalDate");
+        assertTrue(FileUtils.isFileNewer(oldFile, localDate, localTime), "Old File - Newer - LocalDate,ZoneId");
+        assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay), "Old File - Newer - LocalDate plus one day");
+        assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay, localTime), "Old File - Newer - LocalDate plus one day,ZoneId");
 
-        FileUtils.copyFile(testFile1, destination);
-        assertTrue(destination.exists(), "Check Exist");
-        assertEquals(testFile2Size, destination.length(), "Check Full copy");
-        assertEquals(getLastModifiedMillis(testFile1) , getLastModifiedMillis(destination), "Check last modified date preserved");
-    }
+        assertTrue(FileUtils.isFileNewer(newFile, reference), "New File - Newer - File");
+        assertTrue(FileUtils.isFileNewer(newFile, date), "New File - Newer - Date");
+        assertTrue(FileUtils.isFileNewer(newFile, now), "New File - Newer - Mili");
+        assertTrue(FileUtils.isFileNewer(newFile, instant), "New File - Newer - Instant");
+        assertTrue(FileUtils.isFileNewer(newFile, zonedDateTime), "New File - Newer - ZonedDateTime");
+        assertTrue(FileUtils.isFileNewer(newFile, localDateTime), "New File - Newer - LocalDateTime");
+        assertTrue(FileUtils.isFileNewer(newFile, localDateTime, ZoneId.systemDefault()), "New File - Newer - LocalDateTime,ZoneId");
+        assertFalse(FileUtils.isFileNewer(newFile, localDate), "New File - Newer - LocalDate");
+        assertTrue(FileUtils.isFileNewer(newFile, localDate, localTime), "New File - Newer - LocalDate,ZoneId");
+        assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay), "New File - Newer - LocalDate plus one day");
+        assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay, localTime), "New File - Newer - LocalDate plus one day,ZoneId");
+        assertFalse(FileUtils.isFileNewer(invalidFile, reference), "Invalid - Newer - File");
+        final String invalidFileName = invalidFile.getName();
+        try {
+            FileUtils.isFileNewer(newFile, invalidFile);
+            fail("Should have cause IllegalArgumentException");
+        } catch (final IllegalArgumentException iae) {
+            final String message = iae.getMessage();
+            assertTrue(message.contains(invalidFileName), "Message should contain: " + invalidFileName + " but was: " + message);
+        }
 
-    @Test
-    public void testCopyFile2ToDir() throws Exception {
-        final File directory = new File(temporaryFolder, "subdir");
-        if (!directory.exists()) {
-            directory.mkdirs();
+        // Test isFileOlder()
+        assertTrue(FileUtils.isFileOlder(oldFile, reference), "Old File - Older - File");
+        assertTrue(FileUtils.isFileOlder(oldFile, date), "Old File - Older - Date");
+        assertTrue(FileUtils.isFileOlder(oldFile, now), "Old File - Older - Mili");
+        assertTrue(FileUtils.isFileOlder(oldFile, instant), "Old File - Older - Instant");
+        assertTrue(FileUtils.isFileOlder(oldFile, zonedDateTime), "Old File - Older - ZonedDateTime");
+        assertTrue(FileUtils.isFileOlder(oldFile, localDateTime), "Old File - Older - LocalDateTime");
+        assertTrue(FileUtils.isFileOlder(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Older - LocalDateTime,LocalTime");
+        assertTrue(FileUtils.isFileOlder(oldFile, localDate), "Old File - Older - LocalDate");
+        assertFalse(FileUtils.isFileOlder(oldFile, localDate, localTime), "Old File - Older - LocalDate,ZoneId");
+        assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay), "Old File - Older - LocalDate plus one day");
+        assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay, localTime), "Old File - Older - LocalDate plus one day,LocalTime");
+
+        assertFalse(FileUtils.isFileOlder(newFile, reference), "New File - Older - File");
+        assertFalse(FileUtils.isFileOlder(newFile, date), "New File - Older - Date");
+        assertFalse(FileUtils.isFileOlder(newFile, now), "New File - Older - Mili");
+        assertFalse(FileUtils.isFileOlder(newFile, instant), "New File - Older - Instant");
+        assertFalse(FileUtils.isFileOlder(newFile, zonedDateTime), "New File - Older - ZonedDateTime");
+        assertFalse(FileUtils.isFileOlder(newFile, localDateTime), "New File - Older - LocalDateTime");
+        assertFalse(FileUtils.isFileOlder(newFile, localDateTime, ZoneId.systemDefault()), "New File - Older - LocalDateTime,ZoneId");
+        assertTrue(FileUtils.isFileOlder(newFile, localDate), "New File - Older - LocalDate");
+        assertFalse(FileUtils.isFileOlder(newFile, localDate, localTime), "New File - Older - LocalDate,LocalTime");
+        assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay), "New File - Older - LocalDate plus one day");
+        assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay, localTime), "New File - Older - LocalDate plus one day,LocalTime");
+
+        assertFalse(FileUtils.isFileOlder(invalidFile, reference), "Invalid - Older - File");
+        try {
+            FileUtils.isFileOlder(newFile, invalidFile);
+            fail("Should have cause IllegalArgumentException");
+        } catch (final IllegalArgumentException iae) {
+            final String message = iae.getMessage();
+            assertTrue(message.contains(invalidFileName), "Message should contain: " + invalidFileName + " but was: " + message);
         }
-        final File destination = new File(directory, testFile1.getName());
 
-        backDateFile10Minutes(testFile1);
 
-        FileUtils.copyFileToDirectory(testFile1, directory);
-        assertTrue(destination.exists(), "Check Exist");
-        assertEquals(testFile2Size, destination.length(), "Check Full copy");
-        assertEquals(testFile1.lastModified(), destination.lastModified(), "Check last modified date preserved");
+        // ----- Test isFileNewer() exceptions -----
+        // Null File
+        try {
+            FileUtils.isFileNewer(null, now);
+            fail("Newer Null, expected NullPointerException");
+        } catch (final NullPointerException expected) {
+            // expected result
+        }
+
+        // Null reference File
+        try {
+            FileUtils.isFileNewer(oldFile, (File) null);
+            fail("Newer Null reference, expected NullPointerException");
+        } catch (final NullPointerException ignore) {
+            // expected result
+        }
+
+        // Invalid reference File
+        try {
+            FileUtils.isFileNewer(oldFile, invalidFile);
+            fail("Newer invalid reference, expected IllegalArgumentException");
+        } catch (final IllegalArgumentException ignore) {
+            // expected result
+        }
+
+        // Null reference Date
+        try {
+            FileUtils.isFileNewer(oldFile, (Date) null);
+            fail("Newer Null date, expected NullPointerException");
+        } catch (final NullPointerException ignore) {
+            // expected result
+        }
+
+
+        // ----- Test isFileOlder() exceptions -----
+        // Null File
+        try {
+            FileUtils.isFileOlder(null, now);
+            fail("Older Null, expected NullPointerException");
+        } catch (final NullPointerException ignore) {
+            // expected result
+        }
+
+        // Null reference File
+        try {
+            FileUtils.isFileOlder(oldFile, (File) null);
+            fail("Older Null reference, expected NullPointerException");
+        } catch (final NullPointerException ignore) {
+            // expected result
+        }
+
+        // Invalid reference File
+        try {
+            FileUtils.isFileOlder(oldFile, invalidFile);
+            fail("Older invalid reference, expected IllegalArgumentException");
+        } catch (final IllegalArgumentException ignore) {
+            // expected result
+        }
+
+        // Null reference Date
+        try {
+            FileUtils.isFileOlder(oldFile, (Date) null);
+            fail("Older Null date, expected NullPointerException");
+        } catch (final NullPointerException ignore) {
+            // expected result
+        }
+
     }
 
+    // copyFile
+
     @Test
-    public void testCopyFile2WithoutFileDatePreservation() throws Exception {
-        final File destFile = new File(temporaryFolder, "copy2.txt");
+    public void testCopyFile1() throws Exception {
+        final File destination = new File(temporaryFolder, "copy1.txt");
 
         backDateFile10Minutes(testFile1); // set test file back 10 minutes
 
-        // destination file time should not be less than this (allowing for granularity)
-        final long now = System.currentTimeMillis() - 1000L;
-        // On Windows, the last modified time is copied by default.
-        FileUtils.copyFile(testFile1, destFile, false);
-        assertTrue(destFile.exists(), "Check Exist");
-        assertEquals(testFile1Size, destFile.length(), "Check Full copy");
-        final long destLastMod = getLastModifiedMillis(destFile);
-        final long unexpected = getLastModifiedMillis(testFile1);
-        if (!SystemUtils.IS_OS_WINDOWS) {
-            final long delta = destLastMod - unexpected;
-            assertNotEquals(unexpected, destLastMod, "Check last modified date not same as input, delta " + delta);
-            assertTrue(destLastMod > now, destLastMod + " > " + now + " (delta " + delta + ")");
-        }
+        FileUtils.copyFile(testFile1, destination);
+        assertTrue(destination.exists(), "Check Exist");
+        assertEquals(testFile1Size, destination.length(), "Check Full copy");
+        assertEquals(getLastModifiedMillis(testFile1), getLastModifiedMillis(destination), "Check last modified date preserved");
+    }
+
+    @Test
+    public void testCopyFileToOutputStream() throws Exception {
+        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
+        FileUtils.copyFile(testFile1, destination);
+        assertEquals(testFile1Size, destination.size(), "Check Full copy size");
+        final byte[] expected = FileUtils.readFileToByteArray(testFile1);
+        assertArrayEquals(expected, destination.toByteArray(), "Check Full copy");
     }
 
     @Test
@@ -1141,1343 +1245,789 @@ public class FileUtilsTestCase {
     }
 
     @Test
-    public void testCopyFileToOutputStream() throws Exception {
-        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
+    public void testCopyFile2() throws Exception {
+        final File destination = new File(temporaryFolder, "copy2.txt");
+
+        backDateFile10Minutes(testFile1); // set test file back 10 minutes
+
         FileUtils.copyFile(testFile1, destination);
-        assertEquals(testFile1Size, destination.size(), "Check Full copy size");
-        final byte[] expected = FileUtils.readFileToByteArray(testFile1);
-        assertArrayEquals(expected, destination.toByteArray(), "Check Full copy");
+        assertTrue(destination.exists(), "Check Exist");
+        assertEquals(testFile2Size, destination.length(), "Check Full copy");
+        assertEquals(getLastModifiedMillis(testFile1) , getLastModifiedMillis(destination), "Check last modified date preserved");
     }
 
     @Test
-    public void testCopyToDirectoryWithDirectory() throws IOException {
-        final File destDirectory = new File(temporaryFolder, "destination");
-        if (!destDirectory.exists()) {
-            destDirectory.mkdirs();
-        }
+    public void testCopyToSelf() throws Exception {
+        final File destination = new File(temporaryFolder, "copy3.txt");
+        //Prepare a test file
+        FileUtils.copyFile(testFile1, destination);
 
-        // Create a test directory
-        final File inputDirectory = new File(temporaryFolder, "input");
-        if (!inputDirectory.exists()) {
-            inputDirectory.mkdirs();
+        try {
+            FileUtils.copyFile(destination, destination);
+            fail("file copy to self should not be possible");
+        } catch (final IOException ioe) {
+            //we want the exception, copy to self should be illegal
         }
-        final File outputDirDestination = new File(destDirectory, inputDirectory.getName());
-        FileUtils.copyToDirectory(testFile1, inputDirectory);
-        final File destFile1 = new File(outputDirDestination, testFile1.getName());
-        FileUtils.copyToDirectory(testFile2, inputDirectory);
-        final File destFile2 = new File(outputDirDestination, testFile2.getName());
-
-        FileUtils.copyToDirectory(inputDirectory, destDirectory);
-
-        // Check the directory was created
-        assertTrue(outputDirDestination.exists(), "Check Exists");
-        assertTrue(outputDirDestination.isDirectory(), "Check Directory");
-
-        // Check each file
-        assertTrue(destFile1.exists(), "Check Exists");
-        assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
-        assertTrue(destFile2.exists(), "Check Exists");
-        assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
     }
 
     @Test
-    public void testCopyToDirectoryWithFile() throws IOException {
-        final File directory = new File(temporaryFolder, "subdir");
-        if (!directory.exists()) {
-            directory.mkdirs();
-        }
-        final File destination = new File(directory, testFile1.getName());
+    public void testCopyFile2WithoutFileDatePreservation() throws Exception {
+        final File destFile = new File(temporaryFolder, "copy2.txt");
 
-        FileUtils.copyToDirectory(testFile1, directory);
-        assertTrue(destination.exists(), "Check Exists");
-        assertEquals(testFile1Size, destination.length(), "Check Full Copy");
-    }
+        backDateFile10Minutes(testFile1); // set test file back 10 minutes
 
-    // copyFile
+        // destination file time should not be less than this (allowing for granularity)
+        final long now = System.currentTimeMillis() - 1000L;
+        // On Windows, the last modified time is copied by default.
+        FileUtils.copyFile(testFile1, destFile, false);
+        assertTrue(destFile.exists(), "Check Exist");
+        assertEquals(testFile1Size, destFile.length(), "Check Full copy");
+        final long destLastMod = getLastModifiedMillis(destFile);
+        final long unexpected = getLastModifiedMillis(testFile1);
+        if (!SystemUtils.IS_OS_WINDOWS) {
+            final long delta = destLastMod - unexpected;
+            assertNotEquals(unexpected, destLastMod, "Check last modified date not same as input, delta " + delta);
+            assertTrue(destLastMod > now, destLastMod + " > " + now + " (delta " + delta + ")");
+        }
+    }
 
     @Test
-    public void testCopyToDirectoryWithFileSourceDoesNotExist() {
-        assertThrows(IOException.class,
-                () -> FileUtils.copyToDirectory(new File(temporaryFolder, "doesNotExists"), temporaryFolder));
-    }
-
-    @Test
-    public void testCopyToDirectoryWithFileSourceIsNull() {
-        assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((File) null, temporaryFolder));
-    }
-
-    @Test
-    public void testCopyToDirectoryWithIterable() throws IOException {
-        final File directory = new File(temporaryFolder, "subdir");
-        if (!directory.exists()) {
-            directory.mkdirs();
+    public void testCopyDirectoryToDirectory_NonExistingDest() throws Exception {
+        if (!testFile1.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile1
+                    + " as the parent directory does not exist");
         }
-
-        final List<File> input = new ArrayList<>();
-        input.add(testFile1);
-        input.add(testFile2);
-
-        final File destFile1 = new File(directory, testFile1.getName());
-        final File destFile2 = new File(directory, testFile2.getName());
-
-        FileUtils.copyToDirectory(input, directory);
-        // Check each file
-        assertTrue(destFile1.exists(), "Check Exists");
-        assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
-        assertTrue(destFile2.exists(), "Check Exists");
-        assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
-    }
-
-    @Test
-    public void testCopyToDirectoryWithIterableSourceDoesNotExist() {
-        assertThrows(IOException.class,
-                () -> FileUtils.copyToDirectory(Collections.singleton(new File(temporaryFolder, "doesNotExists")),
-                        temporaryFolder));
-    }
-
-    @Test
-    public void testCopyToDirectoryWithIterableSourceIsNull() {
-        assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((List<File>) null, temporaryFolder));
-    }
-
-    @Test
-    public void testCopyToSelf() throws Exception {
-        final File destination = new File(temporaryFolder, "copy3.txt");
-        //Prepare a test file
-        FileUtils.copyFile(testFile1, destination);
-
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(testFile1));
         try {
-            FileUtils.copyFile(destination, destination);
-            fail("file copy to self should not be possible");
-        } catch (final IOException ioe) {
-            //we want the exception, copy to self should be illegal
+            TestUtils.generateTestData(output1, 1234);
+        } finally {
+            IOUtils.closeQuietly(output1);
         }
-    }
-
-    @Test
-    public void testCopyURLToFile() throws Exception {
-        // Creates file
-        final File file = new File(temporaryFolder, getName());
-        file.deleteOnExit();
-
-        // Loads resource
-        final String resourceName = "/java/lang/Object.class";
-        FileUtils.copyURLToFile(getClass().getResource(resourceName), file);
-
-        // Tests that resuorce was copied correctly
-        try (FileInputStream fis = new FileInputStream(file)) {
-            assertTrue(IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis),
-                    "Content is not equal.");
+        if (!testFile2.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile2
+                    + " as the parent directory does not exist");
         }
-        //TODO Maybe test copy to itself like for copyFile()
-    }
-
-    @Test
-    public void testCopyURLToFileWithTimeout() throws Exception {
-        // Creates file
-        final File file = new File(temporaryFolder, "testCopyURLToFileWithTimeout");
-        file.deleteOnExit();
-
-        // Loads resource
-        final String resourceName = "/java/lang/Object.class";
-        FileUtils.copyURLToFile(getClass().getResource(resourceName), file, 500, 500);
-
-        // Tests that resuorce was copied correctly
-        try (FileInputStream fis = new FileInputStream(file)) {
-            assertTrue(IOUtils.contentEquals(getClass().getResourceAsStream(resourceName), fis),
-                    "Content is not equal.");
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile2));
+        try {
+            TestUtils.generateTestData(output, 4321);
+        } finally {
+            IOUtils.closeQuietly(output);
         }
-        //TODO Maybe test copy to itself like for copyFile()
-    }
-
-    @Test
-    public void testDecodeUrl() {
-        assertEquals("", FileUtils.decodeUrl(""));
-        assertEquals("foo", FileUtils.decodeUrl("foo"));
-        assertEquals("+", FileUtils.decodeUrl("+"));
-        assertEquals("% ", FileUtils.decodeUrl("%25%20"));
-        assertEquals("%20", FileUtils.decodeUrl("%2520"));
-        assertEquals("jar:file:/C:/dir/sub dir/1.0/foo-1.0.jar!/org/Bar.class", FileUtils
-                .decodeUrl("jar:file:/C:/dir/sub%20dir/1.0/foo-1.0.jar!/org/Bar.class"));
-    }
-
-    @Test
-    public void testDecodeUrlEncodingUtf8() {
-        assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("%C3%A4%C3%B6%C3%BC%C3%9F"));
-    }
+        final File srcDir = temporaryFolder;
+        final File subDir = new File(srcDir, "sub");
+        subDir.mkdir();
+        final File subFile = new File(subDir, "A.txt");
+        FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
+        final File destDir = new File(System.getProperty("java.io.tmpdir"), "tmp-FileUtilsTestCase");
+        FileUtils.deleteDirectory(destDir);
+        final File actualDestDir = new File(destDir, srcDir.getName());
 
-    @Test
-    public void testDecodeUrlLenient() {
-        assertEquals(" ", FileUtils.decodeUrl(" "));
-        assertEquals("\u00E4\u00F6\u00FC\u00DF", FileUtils.decodeUrl("\u00E4\u00F6\u00FC\u00DF"));
-        assertEquals("%", FileUtils.decodeUrl("%"));
-        assertEquals("% ", FileUtils.decodeUrl("%%20"));
-        assertEquals("%2", FileUtils.decodeUrl("%2"));
-        assertEquals("%2G", FileUtils.decodeUrl("%2G"));
-    }
+        FileUtils.copyDirectoryToDirectory(srcDir, destDir);
 
-    @Test
-    public void testDecodeUrlNullSafe() {
-        assertNull(FileUtils.decodeUrl(null));
+        assertTrue(destDir.exists(), "Check exists");
+        assertTrue(actualDestDir.exists(), "Check exists");
+        final long srcSize = FileUtils.sizeOfDirectory(srcDir);
+        assertTrue(srcSize > 0, "Size > 0");
+        assertEquals(srcSize, FileUtils.sizeOfDirectory(actualDestDir), "Check size");
+        assertTrue(new File(actualDestDir, "sub/A.txt").exists());
+        FileUtils.deleteDirectory(destDir);
     }
 
     @Test
-    public void testDeleteDirectoryWithNonDirectory() throws Exception {
+    public void testCopyDirectoryToNonExistingDest() throws Exception {
+        if (!testFile1.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile1
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(testFile1));
         try {
-            FileUtils.deleteDirectory(testFile1);
-            fail();
-        } catch (final IllegalArgumentException ex) {
-            // expected
+            TestUtils.generateTestData(output1, 1234);
+        } finally {
+            IOUtils.closeQuietly(output1);
         }
-    }
-
-    @Test
-    public void testDeleteQuietlyDir() throws IOException {
-        final File testDirectory = new File(temporaryFolder, "testDeleteQuietlyDir");
-        final File testFile = new File(testDirectory, "testDeleteQuietlyFile");
-        testDirectory.mkdirs();
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
+        if (!testFile2.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile2
                     + " as the parent directory does not exist");
         }
         final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
+                new BufferedOutputStream(new FileOutputStream(testFile2));
         try {
-            TestUtils.generateTestData(output, 0);
+            TestUtils.generateTestData(output, 4321);
         } finally {
             IOUtils.closeQuietly(output);
         }
+        final File srcDir = temporaryFolder;
+        final File subDir = new File(srcDir, "sub");
+        subDir.mkdir();
+        final File subFile = new File(subDir, "A.txt");
+        FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
+        final File destDir = new File(System.getProperty("java.io.tmpdir"), "tmp-FileUtilsTestCase");
+        FileUtils.deleteDirectory(destDir);
 
-        assertTrue(testDirectory.exists());
-        assertTrue(testFile.exists());
-        FileUtils.deleteQuietly(testDirectory);
-        assertFalse(testDirectory.exists(), "Check No Exist");
-        assertFalse(testFile.exists(), "Check No Exist");
+        FileUtils.copyDirectory(srcDir, destDir);
+
+        assertTrue(destDir.exists(), "Check exists");
+        final long sizeOfSrcDirectory = FileUtils.sizeOfDirectory(srcDir);
+        assertTrue(sizeOfSrcDirectory > 0, "Size > 0");
+        assertEquals(sizeOfSrcDirectory, FileUtils.sizeOfDirectory(destDir), "Check size");
+        assertTrue(new File(destDir, "sub/A.txt").exists());
+        FileUtils.deleteDirectory(destDir);
     }
 
     @Test
-    public void testDeleteQuietlyFile() throws IOException {
-        final File testFile = new File(temporaryFolder, "testDeleteQuietlyFile");
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
+    public void testCopyDirectoryToExistingDest() throws Exception {
+        if (!testFile1.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile1
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(testFile1));
+        try {
+            TestUtils.generateTestData(output1, 1234);
+        } finally {
+            IOUtils.closeQuietly(output1);
+        }
+        if (!testFile2.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile2
                     + " as the parent directory does not exist");
         }
         final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
+                new BufferedOutputStream(new FileOutputStream(testFile2));
         try {
-            TestUtils.generateTestData(output, 0);
+            TestUtils.generateTestData(output, 4321);
         } finally {
             IOUtils.closeQuietly(output);
         }
+        final File srcDir = temporaryFolder;
+        final File subDir = new File(srcDir, "sub");
+        subDir.mkdir();
+        final File subFile = new File(subDir, "A.txt");
+        FileUtils.writeStringToFile(subFile, "HELLO WORLD", "UTF8");
+        final File destDir = new File(System.getProperty("java.io.tmpdir"), "tmp-FileUtilsTestCase");
+        FileUtils.deleteDirectory(destDir);
+        destDir.mkdirs();
 
-        assertTrue(testFile.exists());
-        FileUtils.deleteQuietly(testFile);
-        assertFalse(testFile.exists(), "Check No Exist");
-    }
+        FileUtils.copyDirectory(srcDir, destDir);
 
-    @Test
-    public void testDeleteQuietlyForNull() {
-        try {
-            FileUtils.deleteQuietly(null);
-        } catch (final Exception ex) {
-            fail(ex.getMessage());
-        }
+        final long srcSize = FileUtils.sizeOfDirectory(srcDir);
+        assertTrue(srcSize > 0, "Size > 0");
+        assertEquals(srcSize, FileUtils.sizeOfDirectory(destDir));
+        assertTrue(new File(destDir, "sub/A.txt").exists());
     }
 
     @Test
-    public void testDeleteQuietlyNonExistent() {
-        final File testFile = new File("testDeleteQuietlyNonExistent");
-        assertFalse(testFile.exists());
+    public void testCopyDirectoryFiltered() throws Exception {
+        final File grandParentDir = new File(temporaryFolder, "grandparent");
+        final File parentDir = new File(grandParentDir, "parent");
+        final File childDir = new File(parentDir, "child");
+        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
 
-        try {
-            FileUtils.deleteQuietly(testFile);
-        } catch (final Exception ex) {
-            fail(ex.getMessage());
-        }
-    }
+        final NameFileFilter filter = new NameFileFilter(new String[]{"parent", "child", "file3.txt"});
+        final File destDir = new File(temporaryFolder, "copydest");
 
-    // copyToDirectory
+        FileUtils.copyDirectory(grandParentDir, destDir, filter);
+        final List<File> files = LIST_WALKER.list(destDir);
+        assertEquals(3, files.size());
+        assertEquals("parent", files.get(0).getName());
+        assertEquals("child", files.get(1).getName());
+        assertEquals("file3.txt", files.get(2).getName());
+    }
 
-    /*
-     *  Test the FileUtils implementation.
-     */
     @Test
-    public void testFileUtils() throws Exception {
-        // Loads file from classpath
-        final File file1 = new File(temporaryFolder, "test.txt");
-        final String filename = file1.getAbsolutePath();
+    public void testCopyDirectoryPreserveDates() throws Exception {
+        final File source = new File(temporaryFolder, "source");
+        final File sourceDirectory = new File(source, "directory");
+        final File sourceFile = new File(sourceDirectory, "hello.txt");
 
-        //Create test file on-the-fly (used to be in CVS)
-        try (OutputStream out = new FileOutputStream(file1)) {
-            out.write("This is a test".getBytes("UTF-8"));
-        }
+        // Prepare source data
+        source.mkdirs();
+        sourceDirectory.mkdir();
+        FileUtils.writeStringToFile(sourceFile, "HELLO WORLD", "UTF8");
+        // Set dates in reverse order to avoid overwriting previous values
+        // Also, use full seconds (arguments are in ms) close to today
+        // but still highly unlikely to occur in the real world
+        assertTrue(setLastModifiedMillis(sourceFile, DATE3));
+        assertTrue(setLastModifiedMillis(sourceDirectory, DATE2));
+        assertTrue(setLastModifiedMillis(source, DATE1));
 
-        final File file2 = new File(temporaryFolder, "test2.txt");
+        final File target = new File(temporaryFolder, "target");
+        final File targetDirectory = new File(target, "directory");
+        final File targetFile = new File(targetDirectory, "hello.txt");
 
-        FileUtils.writeStringToFile(file2, filename, "UTF-8");
-        assertTrue(file2.exists());
-        assertTrue(file2.length() > 0);
+        // Test with preserveFileDate disabled
+        // On Windows, the last modified time is copied by default.
+        FileUtils.copyDirectory(source, target, false);
+        assertNotEquals(DATE1, getLastModifiedMillis(target));
+        assertNotEquals(DATE2, getLastModifiedMillis(targetDirectory));
+        if (!SystemUtils.IS_OS_WINDOWS) {
+            assertNotEquals(DATE3, getLastModifiedMillis(targetFile));
+        }
+        FileUtils.deleteDirectory(target);
 
-        final String file2contents = FileUtils.readFileToString(file2, "UTF-8");
-        assertEquals(filename, file2contents, "Second file's contents correct");
+        // Test with preserveFileDate enabled
+        FileUtils.copyDirectory(source, target, true);
+        assertEquals(DATE1, getLastModifiedMillis(target));
+        assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
+        assertEquals(DATE3, getLastModifiedMillis(targetFile));
+        FileUtils.deleteDirectory(target);
 
-        assertTrue(file2.delete());
+        // also if the target directory already exists (IO-190)
+        target.mkdirs();
+        FileUtils.copyDirectory(source, target, true);
+        assertEquals(DATE1, getLastModifiedMillis(target));
+        assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
+        assertEquals(DATE3, getLastModifiedMillis(targetFile));
+        FileUtils.deleteDirectory(target);
 
-        final String contents = FileUtils.readFileToString(new File(filename), "UTF-8");
-        assertEquals("This is a test", contents, "FileUtils.fileRead()");
+        // also if the target subdirectory already exists (IO-190)
+        targetDirectory.mkdirs();
+        FileUtils.copyDirectory(source, target, true);
+        assertEquals(DATE1, getLastModifiedMillis(target));
+        assertEquals(DATE2, getLastModifiedMillis(targetDirectory));
+        assertEquals(DATE3, getLastModifiedMillis(targetFile));
+        FileUtils.deleteDirectory(target);
+    }
 
+    private long getLastModifiedMillis(final File file) throws IOException {
+        return file.lastModified();
+        //https://bugs.openjdk.java.net/browse/JDK-8177809
+        //return Files.getLastModifiedTime(file.toPath()).toMillis();
     }
 
+    /* Test for IO-141 */
     @Test
-    public void testForceDeleteAFile1() throws Exception {
-        final File destination = new File(temporaryFolder, "copy1.txt");
-        destination.createNewFile();
-        assertTrue(destination.exists(), "Copy1.txt doesn't exist to delete");
-        FileUtils.forceDelete(destination);
-        assertTrue(!destination.exists(), "Check No Exist");
+    public void testCopyDirectoryToChild() throws Exception {
+        final File grandParentDir = new File(temporaryFolder, "grandparent");
+        final File parentDir = new File(grandParentDir, "parent");
+        final File childDir = new File(parentDir, "child");
+        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
+
+        final long expectedCount = LIST_WALKER.list(grandParentDir).size() +
+                LIST_WALKER.list(parentDir).size();
+        final long expectedSize = FileUtils.sizeOfDirectory(grandParentDir) +
+                FileUtils.sizeOfDirectory(parentDir);
+        FileUtils.copyDirectory(parentDir, childDir);
+        assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
+        assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
+        assertTrue(expectedCount > 0, "Count > 0");
+        assertTrue(expectedSize > 0, "Size > 0");
     }
 
+    /* Test for IO-141 */
     @Test
-    public void testForceDeleteAFile2() throws Exception {
-        final File destination = new File(temporaryFolder, "copy2.txt");
-        destination.createNewFile();
-        assertTrue(destination.exists(), "Copy2.txt doesn't exist to delete");
-        FileUtils.forceDelete(destination);
-        assertTrue(!destination.exists(), "Check No Exist");
+    public void testCopyDirectoryToGrandChild() throws Exception {
+        final File grandParentDir = new File(temporaryFolder, "grandparent");
+        final File parentDir = new File(grandParentDir, "parent");
+        final File childDir = new File(parentDir, "child");
+        createFilesForTestCopyDirectory(grandParentDir, parentDir, childDir);
+
+        final long expectedCount = LIST_WALKER.list(grandParentDir).size() * 2;
+        final long expectedSize = FileUtils.sizeOfDirectory(grandParentDir) * 2;
+        FileUtils.copyDirectory(grandParentDir, childDir);
+        assertEquals(expectedCount, LIST_WALKER.list(grandParentDir).size());
+        assertEquals(expectedSize, FileUtils.sizeOfDirectory(grandParentDir));
+        assertTrue(expectedSize > 0, "Size > 0");
     }
 
+    /* Test for IO-217 FileUtils.copyDirectoryToDirectory makes infinite loops */
     @Test
-    public void testForceDeleteAFile3() throws Exception {
-        final File destination = new File(temporaryFolder, "no_such_file");
-        assertTrue(!destination.exists(), "Check No Exist");
-        try {
-            FileUtils.forceDelete(destination);
-            fail("Should generate FileNotFoundException");
-        } catch (final FileNotFoundException ignored) {
-        }
+    public void testCopyDirectoryToItself() throws Exception {
+        final File dir = new File(temporaryFolder, "itself");
+        dir.mkdirs();
+        FileUtils.copyDirectoryToDirectory(dir, dir);
+        assertEquals(1, LIST_WALKER.list(dir).size());
     }
 
-    @Test
-    public void testForceDeleteDir() throws Exception {
-        final File testDirectory = temporaryFolder;
-        assertTrue(testDirectory.exists(), "TestDirectory must exist");
-        FileUtils.forceDelete(testDirectory);
-        assertFalse(testDirectory.exists(), "TestDirectory must not exist");
+    private void createFilesForTestCopyDirectory(final File grandParentDir, final File parentDir, final File childDir) throws Exception {
+        final File childDir2 = new File(parentDir, "child2");
+        final File grandChildDir = new File(childDir, "grandChild");
+        final File grandChild2Dir = new File(childDir2, "grandChild2");
+        final File file1 = new File(grandParentDir, "file1.txt");
+        final File file2 = new File(parentDir, "file2.txt");
+        final File file3 = new File(childDir, "file3.txt");
+        final File file4 = new File(childDir2, "file4.txt");
+        final File file5 = new File(grandChildDir, "file5.txt");
+        final File file6 = new File(grandChild2Dir, "file6.txt");
+        FileUtils.deleteDirectory(grandParentDir);
+        grandChildDir.mkdirs();
+        grandChild2Dir.mkdirs();
+        FileUtils.writeStringToFile(file1, "File 1 in grandparent", "UTF8");
+        FileUtils.writeStringToFile(file2, "File 2 in parent", "UTF8");
+        FileUtils.writeStringToFile(file3, "File 3 in child", "UTF8");
+        FileUtils.writeStringToFile(file4, "File 4 in child2", "UTF8");
+        FileUtils.writeStringToFile(file5, "File 5 in grandChild", "UTF8");
+        FileUtils.writeStringToFile(file6, "File 6 in grandChild2", "UTF8");
     }
 
     @Test
-    public void testForceMkdir() throws Exception {
-        // Tests with existing directory
-        FileUtils.forceMkdir(temporaryFolder);
-
-        // Creates test file
-        final File testFile = new File(temporaryFolder, getName());
-        testFile.deleteOnExit();
-        testFile.createNewFile();
-        assertTrue(testFile.exists(), "Test file does not exist.");
-
-        // Tests with existing file
+    public void testCopyDirectoryErrors() throws Exception {
         try {
-            FileUtils.forceMkdir(testFile);
-            fail("Exception expected.");
+            FileUtils.copyDirectory(null, null);
+            fail();
+        } catch (final NullPointerException ignore) {
+        }
+        try {
+            FileUtils.copyDirectory(new File("a"), null);
+            fail();
+        } catch (final NullPointerException ignore) {
+        }
+        try {
+            FileUtils.copyDirectory(null, new File("a"));
+            fail();
+        } catch (final NullPointerException ignore) {
+        }
+        try {
+            FileUtils.copyDirectory(new File("doesnt-exist"), new File("a"));
+            fail();
+        } catch (final IOException ignore) {
+        }
+        try {
+            FileUtils.copyDirectory(testFile1, new File("a"));
+            fail();
+        } catch (final IOException ignore) {
+        }
+        try {
+            FileUtils.copyDirectory(temporaryFolder, testFile1);
+            fail();
+        } catch (final IOException ignore) {
+        }
+        try {
+            FileUtils.copyDirectory(temporaryFolder, temporaryFolder);
+            fail();
         } catch (final IOException ignore) {
         }
+    }
 
-        testFile.delete();
+    // copyToDirectory
 
-        // Tests with non-existent directory
-        FileUtils.forceMkdir(testFile);
-        assertTrue(testFile.exists(), "Directory was not created.");
+    @Test
+    public void testCopyToDirectoryWithFile() throws IOException {
+        final File directory = new File(temporaryFolder, "subdir");
+        if (!directory.exists()) {
+            directory.mkdirs();
+        }
+        final File destination = new File(directory, testFile1.getName());
+
+        FileUtils.copyToDirectory(testFile1, directory);
+        assertTrue(destination.exists(), "Check Exists");
+        assertEquals(testFile1Size, destination.length(), "Check Full Copy");
     }
 
     @Test
-    public void testForceMkdirParent() throws Exception {
-        // Tests with existing directory
-        assertTrue(temporaryFolder.exists());
-        final File testParentDir = new File(temporaryFolder, "testForceMkdirParent");
-        testParentDir.delete();
-        assertFalse(testParentDir.exists());
-        final File testFile = new File(testParentDir, "test.txt");
-        assertFalse(testParentDir.exists());
-        assertFalse(testFile.exists());
-        // Create
-        FileUtils.forceMkdirParent(testFile);
-        assertTrue(testParentDir.exists());
-        assertFalse(testFile.exists());
-        // Again
-        FileUtils.forceMkdirParent(testFile);
-        assertTrue(testParentDir.exists());
-        assertFalse(testFile.exists());
+    public void testCopyToDirectoryWithFileSourceIsNull() {
+        assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((File) null, temporaryFolder));
     }
 
-    // forceDelete
+    @Test
+    public void testCopyToDirectoryWithFileSourceDoesNotExist() {
+        assertThrows(IOException.class,
+                () -> FileUtils.copyToDirectory(new File(temporaryFolder, "doesNotExists"), temporaryFolder));
+    }
 
-    //-----------------------------------------------------------------------
     @Test
-    public void testGetFile() {
-        final File expected_A = new File("src");
-        final File expected_B = new File(expected_A, "main");
-        final File expected_C = new File(expected_B, "java");
-        assertEquals(expected_A, FileUtils.getFile("src"), "A");
-        assertEquals(expected_B, FileUtils.getFile("src", "main"), "B");
-        assertEquals(expected_C, FileUtils.getFile("src", "main", "java"), "C");
-        try {
-            FileUtils.getFile((String[]) null);
-            fail("Expected NullPointerException");
-        } catch (final NullPointerException e) {
-            // expected
+    public void testCopyToDirectoryWithDirectory() throws IOException {
+        final File destDirectory = new File(temporaryFolder, "destination");
+        if (!destDirectory.exists()) {
+            destDirectory.mkdirs();
         }
-    }
 
-    @Test
-    public void testGetFile_Parent() {
-        final File parent = new File("parent");
-        final File expected_A = new File(parent, "src");
-        final File expected_B = new File(expected_A, "main");
-        final File expected_C = new File(expected_B, "java");
-        assertEquals(expected_A, FileUtils.getFile(parent, "src"), "A");
-        assertEquals(expected_B, FileUtils.getFile(parent, "src", "main"), "B");
-        assertEquals(expected_C, FileUtils.getFile(parent, "src", "main", "java"), "C");
-        try {
-            FileUtils.getFile(parent, (String[]) null);
-            fail("Expected NullPointerException");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.getFile((File) null, "src");
-            fail("Expected NullPointerException");
-        } catch (final NullPointerException e) {
-            // expected
+        // Create a test directory
+        final File inputDirectory = new File(temporaryFolder, "input");
+        if (!inputDirectory.exists()) {
+            inputDirectory.mkdirs();
         }
+        final File outputDirDestination = new File(destDirectory, inputDirectory.getName());
+        FileUtils.copyToDirectory(testFile1, inputDirectory);
+        final File destFile1 = new File(outputDirDestination, testFile1.getName());
+        FileUtils.copyToDirectory(testFile2, inputDirectory);
+        final File destFile2 = new File(outputDirDestination, testFile2.getName());
+
+        FileUtils.copyToDirectory(inputDirectory, destDirectory);
+
+        // Check the directory was created
+        assertTrue(outputDirDestination.exists(), "Check Exists");
+        assertTrue(outputDirDestination.isDirectory(), "Check Directory");
+
+        // Check each file
+        assertTrue(destFile1.exists(), "Check Exists");
+        assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
+        assertTrue(destFile2.exists(), "Check Exists");
+        assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
     }
 
     @Test
-    public void testGetTempDirectory() {
-        final File tempDirectory = new File(System.getProperty("java.io.tmpdir"));
-        assertEquals(tempDirectory, FileUtils.getTempDirectory());
-    }
+    public void testCopyToDirectoryWithIterable() throws IOException {
+        final File directory = new File(temporaryFolder, "subdir");
+        if (!directory.exists()) {
+            directory.mkdirs();
+        }
 
-    // copyFileToDirectory
+        final List<File> input = new ArrayList<>();
+        input.add(testFile1);
+        input.add(testFile2);
+
+        final File destFile1 = new File(directory, testFile1.getName());
+        final File destFile2 = new File(directory, testFile2.getName());
+
+        FileUtils.copyToDirectory(input, directory);
+        // Check each file
+        assertTrue(destFile1.exists(), "Check Exists");
+        assertEquals(testFile1Size, destFile1.length(), "Check Full Copy");
+        assertTrue(destFile2.exists(), "Check Exists");
+        assertEquals(testFile2Size, destFile2.length(), "Check Full Copy");
+    }
 
     @Test
-    public void testGetTempDirectoryPath() {
-        assertEquals(System.getProperty("java.io.tmpdir"),
-                FileUtils.getTempDirectoryPath());
+    public void testCopyToDirectoryWithIterableSourceIsNull() {
+        assertThrows(NullPointerException.class, () -> FileUtils.copyToDirectory((List<File>) null, temporaryFolder));
     }
 
     @Test
-    public void testGetUserDirectory() {
-        final File userDirectory = new File(System.getProperty("user.home"));
-        assertEquals(userDirectory, FileUtils.getUserDirectory());
+    public void testCopyToDirectoryWithIterableSourceDoesNotExist() {
+        assertThrows(IOException.class,
+                () -> FileUtils.copyToDirectory(Collections.singleton(new File(temporaryFolder, "doesNotExists")),
+                        temporaryFolder));
     }
 
     // forceDelete
 
     @Test
-    public void testGetUserDirectoryPath() {
-        assertEquals(System.getProperty("user.home"),
-                FileUtils.getUserDirectoryPath());
+    public void testForceDeleteAFile1() throws Exception {
+        final File destination = new File(temporaryFolder, "copy1.txt");
+        destination.createNewFile();
+        assertTrue(destination.exists(), "Copy1.txt doesn't exist to delete");
+        FileUtils.forceDelete(destination);
+        assertTrue(!destination.exists(), "Check No Exist");
     }
 
-    // This test relies on FileUtils.copyFile using File.length to check the output size
     @Test
-    public void testIncorrectOutputSize() throws Exception {
-        final File inFile = new File("pom.xml");
-        final File outFile = new ShorterFile("target/pom.tmp"); // it will report a shorter file
+    public void testForceDeleteAFile2() throws Exception {
+        final File destination = new File(temporaryFolder, "copy2.txt");
+        destination.createNewFile();
+        assertTrue(destination.exists(), "Copy2.txt doesn't exist to delete");
+        FileUtils.forceDelete(destination);
+        assertTrue(!destination.exists(), "Check No Exist");
+    }
+
+    @Test
+    public void testForceDeleteAFile3() throws Exception {
+        final File destination = new File(temporaryFolder, "no_such_file");
+        assertTrue(!destination.exists(), "Check No Exist");
         try {
-            FileUtils.copyFile(inFile, outFile);
-            fail("Expected IOException");
-        } catch (final Exception e) {
-            final String msg = e.toString();
-            assertTrue(msg.contains("Failed to copy full contents"), msg);
-        } finally {
-            outFile.delete(); // tidy up
+            FileUtils.forceDelete(destination);
+            fail("Should generate FileNotFoundException");
+        } catch (final FileNotFoundException ignored) {
+        }
+    }
+
+    // copyFileToDirectory
+
+    @Test
+    public void testCopyFile1ToDir() throws Exception {
+        final File directory = new File(temporaryFolder, "subdir");
+        if (!directory.exists()) {
+            directory.mkdirs();
         }
+        final File destination = new File(directory, testFile1.getName());
+
+        backDateFile10Minutes(testFile1);
+
+        FileUtils.copyFileToDirectory(testFile1, directory);
+        assertTrue(destination.exists(), "Check Exist");
+        assertEquals(testFile1Size, destination.length(), "Check Full copy");
+        assertEquals(testFile1.lastModified(), destination.lastModified(), "Check last modified date preserved");
+
+        assertThrows(IOException.class,
+            () -> FileUtils.copyFileToDirectory(destination, directory),
+            "Should not be able to copy a file into the same directory as itself");
     }
 
     @Test
-    public void testIO276() throws Exception {
-        final File dir = new File("target", "IO276");
-        assertTrue(dir.mkdirs(), dir + " should not be present");
-        final File file = new File(dir, "IO276.txt");
-        assertTrue(file.createNewFile(), file + " should not be present");
-        FileUtils.forceDeleteOnExit(dir);
-        // If this does not work, test will fail next time (assuming target is not cleaned)
+    public void testCopyFile2ToDir() throws Exception {
+        final File directory = new File(temporaryFolder, "subdir");
+        if (!directory.exists()) {
+            directory.mkdirs();
+        }
+        final File destination = new File(directory, testFile1.getName());
+
+        backDateFile10Minutes(testFile1);
+
+        FileUtils.copyFileToDirectory(testFile1, directory);
+        assertTrue(destination.exists(), "Check Exist");
+        assertEquals(testFile2Size, destination.length(), "Check Full copy");
+        assertEquals(testFile1.lastModified(), destination.lastModified(), "Check last modified date preserved");
     }
 
+    // forceDelete
+
     @Test
-    public void testIO300() throws Exception {
+    public void testForceDeleteDir() throws Exception {
         final File testDirectory = temporaryFolder;
-        final File src = new File(testDirectory, "dir1");
-        final File dest = new File(src, "dir2");
-        assertTrue(dest.mkdirs());
-        assertTrue(src.exists());
-        try {
-            FileUtils.moveDirectoryToDirectory(src, dest, false);
-            fail("expected IOException");
-        } catch (final IOException ioe) {
-            // expected
-        }
-        assertTrue(src.exists());
+        assertTrue(testDirectory.exists(), "TestDirectory must exist");
+        FileUtils.forceDelete(testDirectory);
+        assertFalse(testDirectory.exists(), "TestDirectory must not exist");
     }
 
-    // isFileNewer / isFileOlder
+    /*
+     *  Test the FileUtils implementation.
+     */
     @Test
-    public void testIsFileNewerOlder() throws Exception {
-        final File reference = new File(temporaryFolder, "FileUtils-reference.txt");
-        final File oldFile = new File(temporaryFolder, "FileUtils-old.txt");
-        final File newFile = new File(temporaryFolder, "FileUtils-new.txt");
-        final File invalidFile = new File(temporaryFolder, "FileUtils-invalid-file.txt");
+    public void testFileUtils() throws Exception {
+        // Loads file from classpath
+        final File file1 = new File(temporaryFolder, "test.txt");
+        final String filename = file1.getAbsolutePath();
 
-        // Create Files
-        if (!oldFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + oldFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(oldFile));
-        try {
-            TestUtils.generateTestData(output1, 0);
-        } finally {
-            IOUtils.closeQuietly(output1);
+        //Create test file on-the-fly (used to be in CVS)
+        try (OutputStream out = new FileOutputStream(file1)) {
+            out.write("This is a test".getBytes("UTF-8"));
         }
 
-        do {
-            try {
-                TestUtils.sleep(1000);
-            } catch (final InterruptedException ie) {
-                // ignore
-            }
-            if (!reference.getParentFile().exists()) {
-                throw new IOException("Cannot create file " + reference
-                        + " as the parent directory does not exist");
-            }
-            final BufferedOutputStream output =
-                    new BufferedOutputStream(new FileOutputStream(reference));
-            try {
-                TestUtils.generateTestData(output, 0);
-            } finally {
-                IOUtils.closeQuietly(output);
-            }
-        } while (getLastModifiedMillis(oldFile) == getLastModifiedMillis(reference));
+        final File file2 = new File(temporaryFolder, "test2.txt");
 
-        final Date date = new Date();
-        final long now = date.getTime();
-        final Instant instant = date.toInstant();
-        final ZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(instant, ZoneId.systemDefault());
-        final LocalDateTime localDateTime = zonedDateTime.toLocalDateTime();
-        final LocalDate localDate = zonedDateTime.toLocalDate();
-        final LocalDate localDatePlusDay = localDate.plusDays(1);
-        final LocalTime localTime = LocalTime.ofSecondOfDay(0);
+        FileUtils.writeStringToFile(file2, filename, "UTF-8");
+        assertTrue(file2.exists());
+        assertTrue(file2.length() > 0);
 
-        do {
-            try {
-                TestUtils.sleep(1000);
-            } catch (final InterruptedException ie) {
-                // ignore
-            }
-            if (!newFile.getParentFile().exists()) {
-                throw new IOException("Cannot create file " + newFile
-                        + " as the parent directory does not exist");
-            }
-            final BufferedOutputStream output =
-                    new BufferedOutputStream(new FileOutputStream(newFile));
-            try {
-                TestUtils.generateTestData(output, 0);
-            } finally {
-                IOUtils.closeQuietly(output);
-            }
-        } while (getLastModifiedMillis(reference) == getLastModifiedMillis(newFile));
-
-        // Test isFileNewer()
-        assertFalse(FileUtils.isFileNewer(oldFile, reference), "Old File - Newer - File");
-        assertFalse(FileUtils.isFileNewer(oldFile, date), "Old File - Newer - Date");
-        assertFalse(FileUtils.isFileNewer(oldFile, now), "Old File - Newer - Mili");
-        assertFalse(FileUtils.isFileNewer(oldFile, instant), "Old File - Newer - Instant");
-        assertFalse(FileUtils.isFileNewer(oldFile, zonedDateTime), "Old File - Newer - ZonedDateTime");
-        assertFalse(FileUtils.isFileNewer(oldFile, localDateTime), "Old File - Newer - LocalDateTime");
-        assertFalse(FileUtils.isFileNewer(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Newer - LocalDateTime,ZoneId");
-        assertFalse(FileUtils.isFileNewer(oldFile, localDate), "Old File - Newer - LocalDate");
-        assertTrue(FileUtils.isFileNewer(oldFile, localDate, localTime), "Old File - Newer - LocalDate,ZoneId");
-        assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay), "Old File - Newer - LocalDate plus one day");
-        assertFalse(FileUtils.isFileNewer(oldFile, localDatePlusDay, localTime), "Old File - Newer - LocalDate plus one day,ZoneId");
+        final String file2contents = FileUtils.readFileToString(file2, "UTF-8");
+        assertEquals(filename, file2contents, "Second file's contents correct");
 
-        assertTrue(FileUtils.isFileNewer(newFile, reference), "New File - Newer - File");
-        assertTrue(FileUtils.isFileNewer(newFile, date), "New File - Newer - Date");
-        assertTrue(FileUtils.isFileNewer(newFile, now), "New File - Newer - Mili");
-        assertTrue(FileUtils.isFileNewer(newFile, instant), "New File - Newer - Instant");
-        assertTrue(FileUtils.isFileNewer(newFile, zonedDateTime), "New File - Newer - ZonedDateTime");
-        assertTrue(FileUtils.isFileNewer(newFile, localDateTime), "New File - Newer - LocalDateTime");
-        assertTrue(FileUtils.isFileNewer(newFile, localDateTime, ZoneId.systemDefault()), "New File - Newer - LocalDateTime,ZoneId");
-        assertFalse(FileUtils.isFileNewer(newFile, localDate), "New File - Newer - LocalDate");
-        assertTrue(FileUtils.isFileNewer(newFile, localDate, localTime), "New File - Newer - LocalDate,ZoneId");
-        assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay), "New File - Newer - LocalDate plus one day");
-        assertFalse(FileUtils.isFileNewer(newFile, localDatePlusDay, localTime), "New File - Newer - LocalDate plus one day,ZoneId");
-        assertFalse(FileUtils.isFileNewer(invalidFile, reference), "Invalid - Newer - File");
-        final String invalidFileName = invalidFile.getName();
-        try {
-            FileUtils.isFileNewer(newFile, invalidFile);
-            fail("Should have cause IllegalArgumentException");
-        } catch (final IllegalArgumentException iae) {
-            final String message = iae.getMessage();
-            assertTrue(message.contains(invalidFileName), "Message should contain: " + invalidFileName + " but was: " + message);
-        }
+        assertTrue(file2.delete());
 
-        // Test isFileOlder()
-        assertTrue(FileUtils.isFileOlder(oldFile, reference), "Old File - Older - File");
-        assertTrue(FileUtils.isFileOlder(oldFile, date), "Old File - Older - Date");
-        assertTrue(FileUtils.isFileOlder(oldFile, now), "Old File - Older - Mili");
-        assertTrue(FileUtils.isFileOlder(oldFile, instant), "Old File - Older - Instant");
-        assertTrue(FileUtils.isFileOlder(oldFile, zonedDateTime), "Old File - Older - ZonedDateTime");
-        assertTrue(FileUtils.isFileOlder(oldFile, localDateTime), "Old File - Older - LocalDateTime");
-        assertTrue(FileUtils.isFileOlder(oldFile, localDateTime, ZoneId.systemDefault()), "Old File - Older - LocalDateTime,LocalTime");
-        assertTrue(FileUtils.isFileOlder(oldFile, localDate), "Old File - Older - LocalDate");
-        assertFalse(FileUtils.isFileOlder(oldFile, localDate, localTime), "Old File - Older - LocalDate,ZoneId");
-        assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay), "Old File - Older - LocalDate plus one day");
-        assertTrue(FileUtils.isFileOlder(oldFile, localDatePlusDay, localTime), "Old File - Older - LocalDate plus one day,LocalTime");
+        final String contents = FileUtils.readFileToString(new File(filename), "UTF-8");
+        assertEquals("This is a test", contents, "FileUtils.fileRead()");
 
-        assertFalse(FileUtils.isFileOlder(newFile, reference), "New File - Older - File");
-        assertFalse(FileUtils.isFileOlder(newFile, date), "New File - Older - Date");
-        assertFalse(FileUtils.isFileOlder(newFile, now), "New File - Older - Mili");
-        assertFalse(FileUtils.isFileOlder(newFile, instant), "New File - Older - Instant");
-        assertFalse(FileUtils.isFileOlder(newFile, zonedDateTime), "New File - Older - ZonedDateTime");
-        assertFalse(FileUtils.isFileOlder(newFile, localDateTime), "New File - Older - LocalDateTime");
-        assertFalse(FileUtils.isFileOlder(newFile, localDateTime, ZoneId.systemDefault()), "New File - Older - LocalDateTime,ZoneId");
-        assertTrue(FileUtils.isFileOlder(newFile, localDate), "New File - Older - LocalDate");
-        assertFalse(FileUtils.isFileOlder(newFile, localDate, localTime), "New File - Older - LocalDate,LocalTime");
-        assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay), "New File - Older - LocalDate plus one day");
-        assertTrue(FileUtils.isFileOlder(newFile, localDatePlusDay, localTime), "New File - Older - LocalDate plus one day,LocalTime");
+    }
 
-        assertFalse(FileUtils.isFileOlder(invalidFile, reference), "Invalid - Older - File");
-        try {
-            FileUtils.isFileOlder(newFile, invalidFile);
-            fail("Should have cause IllegalArgumentException");
-        } catch (final IllegalArgumentException iae) {
-            final String message = iae.getMessage();
-            assertTrue(message.contains(invalidFileName), "Message should contain: " + invalidFileName + " but was: " + message);
+    @Test
+    public void testTouch() throws IOException {
+        final File file = new File(temporaryFolder, "touch.txt");
+        if (file.exists()) {
+            file.delete();
         }
+        assertTrue(!file.exists(), "Bad test: test file still exists");
+        FileUtils.touch(file);
+        assertTrue(file.exists(), "FileUtils.touch() created file");
+        final FileOutputStream out = new FileOutputStream(file);
+        assertEquals(0, file.length(), "Created empty file.");
+        out.write(0);
+        out.close();
+        assertEquals(1, file.length(), "Wrote one byte to file");
+        final long y2k = new GregorianCalendar(2000, 0, 1).getTime().getTime();
+        final boolean res = setLastModifiedMillis(file, y2k);  // 0L fails on Win98
+        assertEquals(true, res, "Bad test: set lastModified failed");
+        assertEquals(y2k, getLastModifiedMillis(file), "Bad test: set lastModified set incorrect value");
+        final long now = System.currentTimeMillis();
+        FileUtils.touch(file);
+        assertEquals(1, file.length(), "FileUtils.touch() didn't empty the file.");
+        assertEquals(false, y2k == getLastModifiedMillis(file), "FileUtils.touch() changed lastModified");
+        assertEquals(true, getLastModifiedMillis(file) >= now - 3000, "FileUtils.touch() changed lastModified to more than now-3s");
+        assertEquals(true, getLastModifiedMillis(file) <= now + 3000, "FileUtils.touch() changed lastModified to less than now+3s");
+    }
 
+    @Test
+    public void testListFiles() throws Exception {
+        final File srcDir = temporaryFolder;
+        final File subDir = new File(srcDir, "list_test");
+        subDir.mkdir();
 
-        // ----- Test isFileNewer() exceptions -----
-        // Null File
-        try {
-            FileUtils.isFileNewer(null, now);
-            fail("Newer Null, expected NullPointerException");
-        } catch (final NullPointerException expected) {
-            // expected result
-        }
+        final File subDir2 = new File(subDir, "subdir");
+        subDir2.mkdir();
 
-        // Null reference File
-        try {
-            FileUtils.isFileNewer(oldFile, (File) null);
-            fail("Newer Null reference, expected NullPointerException");
-        } catch (final NullPointerException ignore) {
-            // expected result
-        }
+        final String[] fileNames = {"a.txt", "b.txt", "c.txt", "d.txt", "e.txt", "f.txt"};
+        final int[] fileSizes = {123, 234, 345, 456, 678, 789};
 
-        // Invalid reference File
-        try {
-            FileUtils.isFileNewer(oldFile, invalidFile);
-            fail("Newer invalid reference, expected IllegalArgumentException");
-        } catch (final IllegalArgumentException ignore) {
-            // expected result
+        for (int i = 0; i < fileNames.length; ++i) {
+            final File theFile = new File(subDir, fileNames[i]);
+            if (!theFile.getParentFile().exists()) {
+                throw new IOException("Cannot create file " + theFile
+                        + " as the parent directory does not exist");
+            }
+            final BufferedOutputStream output =
+                    new BufferedOutputStream(new FileOutputStream(theFile));
+            try {
+                TestUtils.generateTestData(output, fileSizes[i]);
+            } finally {
+                IOUtils.closeQuietly(output);
+            }
         }
 
-        // Null reference Date
-        try {
-            FileUtils.isFileNewer(oldFile, (Date) null);
-            fail("Newer Null date, expected NullPointerException");
-        } catch (final NullPointerException ignore) {
-            // expected result
-        }
+        final Collection<File> files = FileUtils.listFiles(subDir,
+                new WildcardFileFilter("*.*"),
+                new WildcardFileFilter("*"));
 
+        final int count = files.size();
+        final Object[] fileObjs = files.toArray();
 
-        // ----- Test isFileOlder() exceptions -----
-        // Null File
-        try {
-            FileUtils.isFileOlder(null, now);
-            fail("Older Null, expected NullPointerException");
-        } catch (final NullPointerException ignore) {
-            // expected result
-        }
+        assertEquals(fileNames.length, files.size());
 
-        // Null reference File
-        try {
-            FileUtils.isFileOlder(oldFile, (File) null);
-            fail("Older Null reference, expected NullPointerException");
-        } catch (final NullPointerException ignore) {
-            // expected result
-        }
+        final Map<String, String> foundFileNames = new HashMap<>();
 
-        // Invalid reference File
-        try {
-            FileUtils.isFileOlder(oldFile, invalidFile);
-            fail("Older invalid reference, expected IllegalArgumentException");
-        } catch (final IllegalArgumentException ignore) {
-            // expected result
+        for (int i = 0; i < count; ++i) {
+            boolean found = false;
+            for (int j = 0; !found && j < fileNames.length; ++j) {
+                if (fileNames[j].equals(((File) fileObjs[i]).getName())) {
+                    foundFileNames.put(fileNames[j], fileNames[j]);
+                    found = true;
+                }
+            }
         }
 
-        // Null reference Date
-        try {
-            FileUtils.isFileOlder(oldFile, (Date) null);
-            fail("Older Null date, expected NullPointerException");
-        } catch (final NullPointerException ignore) {
-            // expected result
-        }
+        assertEquals(foundFileNames.size(), fileNames.length);
 
+        subDir.delete();
     }
 
     @Test
-    public void testIterateFiles() throws Exception {
+    public void testListFilesWithDirs() throws IOException {
         final File srcDir = temporaryFolder;
-        final File subDir = new File(srcDir, "list_test");
-        final File subSubDir = new File(subDir, "subSubDir");
-        final File notSubSubDir = new File(subDir, "notSubSubDir");
-        assertTrue(subDir.mkdir());
-        assertTrue(subSubDir.mkdir());
-        assertTrue(notSubSubDir.mkdir());
-        Iterator<File> iterator = null;
-        try {
-            // Need list to be appendable
-            final List<String> expectedFileNames = new ArrayList(
-                Arrays.asList("a.txt", "b.txt", "c.txt", "d.txt", "e.txt", "f.txt"));
-            final int[] fileSizes = {123, 234, 345, 456, 678, 789};
-            assertEquals(expectedFileNames.size(), fileSizes.length);
-            Collections.sort(expectedFileNames);
-            Arrays.sort(fileSizes);
-            for (int i = 0; i < fileSizes.length; ++i) {
-                TestUtils.generateTestData(new File(subDir, expectedFileNames.get(i)), fileSizes[i]);
-            }
-            //
-            final String subSubFileName = "z.txt";
-            TestUtils.generateTestData(new File(subSubDir, subSubFileName), 1);
-            expectedFileNames.add(subSubFileName);
-            //
-            final String notSubSubFileName = "not.txt";
-            TestUtils.generateTestData(new File(notSubSubDir, notSubSubFileName), 1);
-
-            final WildcardFileFilter allFilesFileFilter = new WildcardFileFilter("*.*");
-            final NameFileFilter dirFilter = new NameFileFilter("subSubDir");
-            iterator = FileUtils.iterateFiles(subDir, allFilesFileFilter, dirFilter);
-
-            final Map<String, String> matchedFileNames = new HashMap<>();
-            final List<String> actualFileNames = new ArrayList<>();
-
-            while (iterator.hasNext()) {
-                boolean found = false;
-                final String fileName = iterator.next().getName();
-                actualFileNames.add(fileName);
-
-                for (int j = 0; !found && j < expectedFileNames.size(); ++j) {
-                    final String expectedFileName = expectedFileNames.get(j);
-                    if (expectedFileName.equals(fileName)) {
-                        matchedFileNames.put(expectedFileName, expectedFileName);
-                        found = true;
-                    }
-                }
-            }
-            assertEquals(expectedFileNames.size(), matchedFileNames.size());
-            Collections.sort(actualFileNames);
-            assertEquals(expectedFileNames, actualFileNames);
-        } finally {
-            consumeRemaining(iterator);
-            notSubSubDir.delete();
-            subSubDir.delete();
-            subDir.delete();
-        }
-    }
 
-    @Test
-    public void testIterateFilesAndDirs() throws IOException {
-        final File srcDir = temporaryFolder;
-        // temporaryFolder/srcDir
-        // - subdir1
-        // -- subdir2
-        // --- a.txt
-        // --- subdir3
-        // --- subdir4
-        final File subDir1 = new File(srcDir, "subdir1");
+        final File subDir1 = new File(srcDir, "subdir");
+        subDir1.mkdir();
+
         final File subDir2 = new File(subDir1, "subdir2");
-        final File subDir3 = new File(subDir2, "subdir3");
-        final File subDir4 = new File(subDir2, "subdir4");
-        assertTrue(subDir1.mkdir());
-        assertTrue(subDir2.mkdir());
-        assertTrue(subDir3.mkdir());
-        assertTrue(subDir4.mkdir());
+        subDir2.mkdir();
+
         final File someFile = new File(subDir2, "a.txt");
-        final WildcardFileFilter fileFilterAllFiles = new WildcardFileFilter("*.*");
-        final WildcardFileFilter fileFilterAllDirs = new WildcardFileFilter("*");
-        final WildcardFileFilter fileFilterExtTxt = new WildcardFileFilter("*.txt");
+        if (!someFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + someFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(someFile));
         try {
-            try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(someFile))) {
-                TestUtils.generateTestData(output, 100);
-            }
-            //
-            // "*.*" and "*"
-            Collection<File> expectedFilesAndDirs = Arrays.asList(subDir1, subDir2, someFile, subDir3, subDir4);
-            iterateFilesAndDirs(subDir1, fileFilterAllFiles, fileFilterAllDirs, expectedFilesAndDirs);
-            //
-            // "*.txt" and "*"
-            int filesCount;
-            expectedFilesAndDirs = Arrays.asList(subDir1, subDir2, someFile, subDir3, subDir4);
-            iterateFilesAndDirs(subDir1, fileFilterExtTxt, fileFilterAllDirs, expectedFilesAndDirs);
-            //
-            // "*.*" and "subdir2"
-            expectedFilesAndDirs = Arrays.asList(subDir1, subDir2, someFile);
-            iterateFilesAndDirs(subDir1, fileFilterAllFiles, new NameFileFilter("subdir2"), expectedFilesAndDirs);
-            //
-            // "*.txt" and "subdir2"
-            expectedFilesAndDirs = Arrays.asList(subDir1, subDir2, someFile);
-            iterateFilesAndDirs(subDir1, fileFilterExtTxt, new NameFileFilter("subdir2"), expectedFilesAndDirs);
+            TestUtils.generateTestData(output, 100);
         } finally {
-            someFile.delete();
-            subDir4.delete();
-            subDir3.delete();
-            subDir2.delete();
-            subDir1.delete();
+            IOUtils.closeQuietly(output);
         }
+
+        final File subDir3 = new File(subDir2, "subdir3");
+        subDir3.mkdir();
+
+        final Collection<File> files = FileUtils.listFilesAndDirs(subDir1,
+                new WildcardFileFilter("*.*"), new WildcardFileFilter("*"));
+
+        assertEquals(4, files.size());
+        assertTrue(files.contains(subDir1), "Should contain the directory.");
+        assertTrue(files.contains(subDir2), "Should contain the directory.");
+        assertTrue(files.contains(someFile), "Should contain the file.");
+        assertTrue(files.contains(subDir3), "Should contain the directory.");
+
+        subDir1.delete();
     }
 
     @Test
-    public void testListFiles() throws Exception {
+    public void testIterateFiles() throws Exception {
         final File srcDir = temporaryFolder;
         final File subDir = new File(srcDir, "list_test");
-        final File subDir2 = new File(subDir, "subdir");
         subDir.mkdir();
-        subDir2.mkdir();
-        try {
 
-            final String[] expectedFileNames = {"a.txt", "b.txt", "c.txt", "d.txt", "e.txt", "f.txt"};
-            final int[] fileSizes = {123, 234, 345, 456, 678, 789};
+        final String[] fileNames = {"a.txt", "b.txt", "c.txt", "d.txt", "e.txt", "f.txt"};
+        final int[] fileSizes = {123, 234, 345, 456, 678, 789};
 
-            for (int i = 0; i < expectedFileNames.length; ++i) {
-                final File theFile = new File(subDir, expectedFileNames[i]);
-                if (!theFile.getParentFile().exists()) {
-                    throw new IOException("Cannot create file " + theFile + " as the parent directory does not exist");
-                }
-                final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(theFile));
-                try {
-                    TestUtils.generateTestData(output, fileSizes[i]);
-                } finally {
-                    IOUtils.closeQuietly(output);
-                }
+        for (int i = 0; i < fileNames.length; ++i) {
+            final File theFile = new File(subDir, fileNames[i]);
+            if (!theFile.getParentFile().exists()) {
+                throw new IOException("Cannot create file " + theFile
+                        + " as the parent directory does not exist");
+            }
+            final BufferedOutputStream output =
+                    new BufferedOutputStream(new FileOutputStream(theFile));
+            try {
+                TestUtils.generateTestData(output, fileSizes[i]);
+            } finally {
+                IOUtils.closeQuietly(output);
             }
+        }
 
-            final Collection<File> actualFiles = FileUtils.listFiles(subDir, new WildcardFileFilter("*.*"),
+        final Iterator<File> files = FileUtils.iterateFiles(subDir,
+                new WildcardFileFilter("*.*"),
                 new WildcardFileFilter("*"));
 
-            final int count = actualFiles.size();
-            final Object[] fileObjs = actualFiles.toArray();
-
-            assertEquals(expectedFileNames.length, actualFiles.size(), () -> actualFiles.toString());
+        final Map<String, String> foundFileNames = new HashMap<>();
 
-            final Map<String, String> foundFileNames = new HashMap<>();
+        while (files.hasNext()) {
+            boolean found = false;
+            final String fileName = files.next().getName();
 
-            for (int i = 0; i < count; ++i) {
-                boolean found = false;
-                for (int j = 0; !found && j < expectedFileNames.length; ++j) {
-                    if (expectedFileNames[j].equals(((File) fileObjs[i]).getName())) {
-                        foundFileNames.put(expectedFileNames[j], expectedFileNames[j]);
-                        found = true;
-                    }
+            for (int j = 0; !found && j < fileNames.length; ++j) {
+                if (fileNames[j].equals(fileName)) {
+                    foundFileNames.put(fileNames[j], fileNames[j]);
+                    found = true;
                 }
             }
-
-            assertEquals(foundFileNames.size(), expectedFileNames.length, () -> foundFileNames.toString());
-        } finally {
-            subDir.delete();
         }
+
+        assertEquals(foundFileNames.size(), fileNames.length);
+
+        subDir.delete();
     }
 
     @Test
-    public void testListFilesWithDirs() throws IOException {
+    public void testIterateFilesAndDirs() throws IOException {
         final File srcDir = temporaryFolder;
 
         final File subDir1 = new File(srcDir, "subdir");
-        final File subDir2 = new File(subDir1, "subdir2");
         subDir1.mkdir();
+
+        final File subDir2 = new File(subDir1, "subdir2");
         subDir2.mkdir();
+
+        final File someFile = new File(subDir2, "a.txt");
+        if (!someFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + someFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(someFile));
         try {
-            final File someFile = new File(subDir2, "a.txt");
-            if (!someFile.getParentFile().exists()) {
-                throw new IOException("Cannot create file " + someFile + " as the parent directory does not exist");
-            }
-            final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(someFile));
-            try {
-                TestUtils.generateTestData(output, 100);
-            } finally {
-                IOUtils.closeQuietly(output);
-            }
+            TestUtils.generateTestData(output, 100);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
 
-            final File subDir3 = new File(subDir2, "subdir3");
-            subDir3.mkdir();
+        final File subDir3 = new File(subDir2, "subdir3");
+        subDir3.mkdir();
 
-            final Collection<File> files = FileUtils.listFilesAndDirs(subDir1, new WildcardFileFilter("*.*"),
-                new WildcardFileFilter("*"));
+        final Collection<File> filesAndDirs = Arrays.asList(subDir1, subDir2, someFile, subDir3);
 
-            assertEquals(4, files.size());
-            assertTrue(files.contains(subDir1), "Should contain the directory.");
-            assertTrue(files.contains(subDir2), "Should contain the directory.");
-            assertTrue(files.contains(someFile), "Should contain the file.");
-            assertTrue(files.contains(subDir3), "Should contain the directory.");
-        } finally {
-            subDir1.delete();
+        int filesCount = 0;
+        final Iterator<File> files = FileUtils.iterateFilesAndDirs(subDir1,
+                new WildcardFileFilter("*.*"),
+                new WildcardFileFilter("*"));
+        while (files.hasNext()) {
+            filesCount++;
+            final File file = files.next();
+            assertTrue(filesAndDirs.contains(file), "Should contain the directory/file");
         }
+
+        assertEquals(filesCount, filesAndDirs.size());
     }
 
     @Test
-    public void testMoveDirectory_CopyDelete() throws Exception {
+    public void testReadFileToStringWithDefaultEncoding() throws Exception {
+        final File file = new File(temporaryFolder, "read.obj");
+        final FileOutputStream out = new FileOutputStream(file);
+        final byte[] text = "Hello /u1234".getBytes();
+        out.write(text);
+        out.close();
 
-        final File dir = temporaryFolder;
-        final File src = new File(dir, "testMoveDirectory2Source") {
-            private static final long serialVersionUID = 1L;
-
-            // Force renameTo to fail
-            @Override
-            public boolean renameTo(final File dest) {
-                return false;
-            }
-        };
-        final File testDir = new File(src, "foo");
-        final File testFile = new File(testDir, "bar");
-        testDir.mkdirs();
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        final File destination = new File(dir, "testMoveDirectory1Dest");
-        FileUtils.deleteDirectory(destination);
-
-        // Move the directory
-        FileUtils.moveDirectory(src, destination);
-
-        // Check results
-        assertTrue(destination.exists(), "Check Exist");
-        assertTrue(!src.exists(), "Original deleted");
-        final File movedDir = new File(destination, testDir.getName());
-        final File movedFile = new File(movedDir, testFile.getName());
-        assertTrue(movedDir.exists(), "Check dir moved");
-        assertTrue(movedFile.exists(), "Check file moved");
-    }
-
-    @Test
-    public void testMoveDirectory_Errors() throws Exception {
-        try {
-            FileUtils.moveDirectory(null, new File("foo"));
-            fail("Expected NullPointerException when source is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveDirectory(new File("foo"), null);
-            fail("Expected NullPointerException when destination is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
-            fail("Expected FileNotFoundException for source");
-        } catch (final FileNotFoundException e) {
-            // expected
-        }
-        final File testFile = new File(temporaryFolder, "testMoveDirectoryFile");
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        try {
-            FileUtils.moveDirectory(testFile, new File("foo"));
-            fail("Expected IOException when source is not a directory");
-        } catch (final IOException e) {
-            // expected
-        }
-        final File testSrcFile = new File(temporaryFolder, "testMoveDirectorySource");
-        final File testDestFile = new File(temporaryFolder, "testMoveDirectoryDest");
-        testSrcFile.mkdir();
-        testDestFile.mkdir();
-        try {
-            FileUtils.moveDirectory(testSrcFile, testDestFile);
-            fail("Expected FileExistsException when dest already exists");
-        } catch (final FileExistsException e) {
-            // expected
-        }
-    }
-
-    @Test
-    public void testMoveDirectory_Rename() throws Exception {
-        final File dir = temporaryFolder;
-        final File src = new File(dir, "testMoveDirectory1Source");
-        final File testDir = new File(src, "foo");
-        final File testFile = new File(testDir, "bar");
-        testDir.mkdirs();
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        final File destination = new File(dir, "testMoveDirectory1Dest");
-        FileUtils.deleteDirectory(destination);
-
-        // Move the directory
-        FileUtils.moveDirectory(src, destination);
-
-        // Check results
-        assertTrue(destination.exists(), "Check Exist");
-        assertTrue(!src.exists(), "Original deleted");
-        final File movedDir = new File(destination, testDir.getName());
-        final File movedFile = new File(movedDir, testFile.getName());
-        assertTrue(movedDir.exists(), "Check dir moved");
-        assertTrue(movedFile.exists(), "Check file moved");
-    }
-
-    @Test
-    public void testMoveDirectoryToDirectory() throws Exception {
-        final File dir = temporaryFolder;
-        final File src = new File(dir, "testMoveDirectory1Source");
-        final File testChildDir = new File(src, "foo");
-        final File testFile = new File(testChildDir, "bar");
-        testChildDir.mkdirs();
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        final File destDir = new File(dir, "testMoveDirectory1Dest");
-        FileUtils.deleteDirectory(destDir);
-        assertFalse(destDir.exists(), "Check Exist before");
-
-        // Move the directory
-        FileUtils.moveDirectoryToDirectory(src, destDir, true);
-
-        // Check results
-        assertTrue(destDir.exists(), "Check Exist after");
-        assertTrue(!src.exists(), "Original deleted");
-        final File movedDir = new File(destDir, src.getName());
-        final File movedChildDir = new File(movedDir, testChildDir.getName());
-        final File movedFile = new File(movedChildDir, testFile.getName());
-        assertTrue(movedDir.exists(), "Check dir moved");
-        assertTrue(movedChildDir.exists(), "Check child dir moved");
-        assertTrue(movedFile.exists(), "Check file moved");
-    }
-
-    @Test
-    public void testMoveDirectoryToDirectory_Errors() throws Exception {
-        try {
-            FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
-            fail("Expected NullPointerException when source is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
-            fail("Expected NullPointerException when destination is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        final File testFile1 = new File(temporaryFolder, "testMoveFileFile1");
-        final File testFile2 = new File(temporaryFolder, "testMoveFileFile2");
-        if (!testFile1.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile1
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(testFile1));
-        try {
-            TestUtils.generateTestData(output1, 0);
-        } finally {
-            IOUtils.closeQuietly(output1);
-        }
-        if (!testFile2.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile2
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile2));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        try {
-            FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
-            fail("Expected IOException when dest not a directory");
-        } catch (final IOException e) {
-            // expected
-        }
-
-        final File nonexistant = new File(temporaryFolder, "testMoveFileNonExistant");
-        try {
-            FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
-            fail("Expected IOException when dest does not exist and create=false");
-        } catch (final IOException e) {
-            // expected
-        }
-    }
-
-    @Test
-    public void testMoveFile_CopyDelete() throws Exception {
-        final File destination = new File(temporaryFolder, "move2.txt");
-        final File src = new File(testFile1.getAbsolutePath()) {
-            private static final long serialVersionUID = 1L;
-
-            // Force renameTo to fail, as if destination is on another
-            // filesystem
-            @Override
-            public boolean renameTo(final File f) {
-                return false;
-            }
-        };
-        FileUtils.moveFile(src, destination);
-        assertTrue(destination.exists(), "Check Exist");
-        assertTrue(!src.exists(), "Original deleted");
-    }
-
-    @Test
-    public void testMoveFile_CopyDelete_Failed() throws Exception {
-        final File destination = new File(temporaryFolder, "move3.txt");
-        final File src = new File(testFile1.getAbsolutePath()) {
-            private static final long serialVersionUID = 1L;
-
-            // Force delete failure
-            @Override
-            public boolean delete() {
-                return false;
-            }
-
-            // Force renameTo to fail, as if destination is on another
-            // filesystem
-            @Override
-            public boolean renameTo(final File f) {
-                return false;
-            }
-
-        };
-        try {
-            FileUtils.moveFile(src, destination);
-            fail("move should have failed as src has not been deleted");
-        } catch (final IOException e) {
-            // exepected
-            assertTrue(!destination.exists(), "Check Rollback");
-            assertTrue(src.exists(), "Original exists");
-        }
-    }
-
-    @Test
-    public void testMoveFile_Errors() throws Exception {
-        try {
-            FileUtils.moveFile(null, new File("foo"));
-            fail("Expected NullPointerException when source is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveFile(new File("foo"), null);
-            fail("Expected NullPointerException when destination is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveFile(new File("nonexistant"), new File("foo"));
-            fail("Expected FileNotFoundException for source");
-        } catch (final FileNotFoundException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveFile(temporaryFolder, new File("foo"));
-            fail("Expected IOException when source is a directory");
-        } catch (final IOException e) {
-            // expected
-        }
-        final File testSourceFile = new File(temporaryFolder, "testMoveFileSource");
-        final File testDestFile = new File(temporaryFolder, "testMoveFileSource");
-        if (!testSourceFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testSourceFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(testSourceFile));
-        try {
-            TestUtils.generateTestData(output1, 0);
-        } finally {
-            IOUtils.closeQuietly(output1);
-        }
-        if (!testDestFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testDestFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testDestFile));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        try {
-            FileUtils.moveFile(testSourceFile, testDestFile);
-            fail("Expected FileExistsException when dest already exists");
-        } catch (final FileExistsException e) {
-            // expected
-        }
-    }
-
-    @Test
-    public void testMoveFile_Rename() throws Exception {
-        final File destination = new File(temporaryFolder, "move1.txt");
-
-        FileUtils.moveFile(testFile1, destination);
-        assertTrue(destination.exists(), "Check Exist");
-        assertTrue(!testFile1.exists(), "Original deleted");
-    }
-
-    @Test
-    public void testMoveFileToDirectory() throws Exception {
-        final File destDir = new File(temporaryFolder, "moveFileDestDir");
-        final File movedFile = new File(destDir, testFile1.getName());
-        assertFalse(destDir.exists(), "Check Exist before");
-        assertFalse(movedFile.exists(), "Check Exist before");
-
-        FileUtils.moveFileToDirectory(testFile1, destDir, true);
-        assertTrue(movedFile.exists(), "Check Exist after");
-        assertTrue(!testFile1.exists(), "Original deleted");
-    }
-
-    @Test
-    public void testMoveFileToDirectory_Errors() throws Exception {
-        try {
-            FileUtils.moveFileToDirectory(null, new File("foo"), true);
-            fail("Expected NullPointerException when source is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveFileToDirectory(new File("foo"), null, true);
-            fail("Expected NullPointerException when destination is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        final File testFile1 = new File(temporaryFolder, "testMoveFileFile1");
-        final File testFile2 = new File(temporaryFolder, "testMoveFileFile2");
-        if (!testFile1.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile1
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output1 =
-                new BufferedOutputStream(new FileOutputStream(testFile1));
-        try {
-            TestUtils.generateTestData(output1, 0);
-        } finally {
-            IOUtils.closeQuietly(output1);
-        }
-        if (!testFile2.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile2
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile2));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        try {
-            FileUtils.moveFileToDirectory(testFile1, testFile2, true);
-            fail("Expected IOException when dest not a directory");
-        } catch (final IOException e) {
-            // expected
-        }
-
-        final File nonexistant = new File(temporaryFolder, "testMoveFileNonExistant");
-        try {
-            FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
-            fail("Expected IOException when dest does not exist and create=false");
-        } catch (final IOException e) {
-            // expected
-        }
-    }
+        final String data = FileUtils.readFileToString(file);
+        assertEquals("Hello /u1234", data);
+    }
 
     @Test
-    public void testMoveToDirectory() throws Exception {
-        final File destDir = new File(temporaryFolder, "testMoveToDirectoryDestDir");
-        final File testDir = new File(temporaryFolder, "testMoveToDirectoryTestDir");
-        final File testFile = new File(temporaryFolder, "testMoveToDirectoryTestFile");
-        testDir.mkdirs();
-        if (!testFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + testFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(testFile));
-        try {
-            TestUtils.generateTestData(output, 0);
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        final File movedFile = new File(destDir, testFile.getName());
-        final File movedDir = new File(destDir, testFile.getName());
-
-        assertFalse(movedFile.exists(), "Check File Doesnt exist");
-        assertFalse(movedDir.exists(), "Check Dir Doesnt exist");
-
-        // Test moving a file
-        FileUtils.moveToDirectory(testFile, destDir, true);
-        assertTrue(movedFile.exists(), "Check File exists");
-        assertFalse(testFile.exists(), "Check Original File doesn't exist");
-
-        // Test moving a directory
-        FileUtils.moveToDirectory(testDir, destDir, true);
-        assertTrue(movedDir.exists(), "Check Dir exists");
-        assertFalse(testDir.exists(), "Check Original Dir doesn't exist");
-    }
+    public void testReadFileToStringWithEncoding() throws Exception {
+        final File file = new File(temporaryFolder, "read.obj");
+        final FileOutputStream out = new FileOutputStream(file);
+        final byte[] text = "Hello /u1234".getBytes("UTF8");
+        out.write(text);
+        out.close();
 
-    @Test
-    public void testMoveToDirectory_Errors() throws Exception {
-        try {
-            FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
-            fail("Expected NullPointerException when source is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        try {
-            FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
-            fail("Expected NullPointerException when destination is null");
-        } catch (final NullPointerException e) {
-            // expected
-        }
-        final File nonexistant = new File(temporaryFolder, "nonexistant");
-        final File destDir = new File(temporaryFolder, "MoveToDirectoryDestDir");
-        try {
-            FileUtils.moveToDirectory(nonexistant, destDir, true);
-            fail("Expected IOException when source does not exist");
-        } catch (final IOException e) {
-            // expected
-        }
+        final String data = FileUtils.readFileToString(file, "UTF8");
+        assertEquals("Hello /u1234", data);
     }
 
     @Test
@@ -2496,30 +2046,6 @@ public class FileUtilsTestCase {
         assertEquals(31, data[2]);
     }
 
-    @Test
-    public void testReadFileToStringWithDefaultEncoding() throws Exception {
-        final File file = new File(temporaryFolder, "read.obj");
-        final FileOutputStream out = new FileOutputStream(file);
-        final byte[] text = "Hello /u1234".getBytes();
-        out.write(text);
-        out.close();
-
-        final String data = FileUtils.readFileToString(file);
-        assertEquals("Hello /u1234", data);
-    }
-
-    @Test
-    public void testReadFileToStringWithEncoding() throws Exception {
-        final File file = new File(temporaryFolder, "read.obj");
-        final FileOutputStream out = new FileOutputStream(file);
-        final byte[] text = "Hello /u1234".getBytes("UTF8");
-        out.write(text);
-        out.close();
-
-        final String data = FileUtils.readFileToString(file, "UTF8");
-        assertEquals("Hello /u1234", data);
-    }
-
     @Test
     public void testReadLines() throws Exception {
         final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
@@ -2535,318 +2061,311 @@ public class FileUtilsTestCase {
     }
 
     @Test
-    public void testSizeOf() throws Exception {
-        final File file = new File(temporaryFolder, getName());
-
-        // Null argument
-        try {
-            FileUtils.sizeOf(null);
-            fail("Exception expected.");
-        } catch (final NullPointerException ignore) {
-        }
-
-        // Non-existent file
-        try {
-            FileUtils.sizeOf(file);
-            fail("Exception expected.");
-        } catch (final IllegalArgumentException ignore) {
-        }
-
-        // Creates file
-        file.createNewFile();
-        file.deleteOnExit();
-
-        // New file
-        assertEquals(0, FileUtils.sizeOf(file));
-        file.delete();
-
-        // Existing file
-        assertEquals(testFile1Size, FileUtils.sizeOf(testFile1), "Unexpected files size");
-
-        // Existing directory
-        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOf(temporaryFolder), "Unexpected directory size");
+    public void testWriteStringToFile1() throws Exception {
+        final File file = new File(temporaryFolder, "write.txt");
+        FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
+        final byte[] text = "Hello /u1234".getBytes("UTF8");
+        TestUtils.assertEqualContent(text, file);
     }
 
     @Test
-    public void testSizeOfAsBigInteger() throws Exception {
-        final File file = new File(temporaryFolder, getName());
-
-        // Null argument
-        try {
-            FileUtils.sizeOfAsBigInteger(null);
-            fail("Exception expected.");
-        } catch (final NullPointerException ignore) {
-        }
-
-        // Non-existent file
-        try {
-            FileUtils.sizeOfAsBigInteger(file);
-            fail("Exception expected.");
-        } catch (final IllegalArgumentException ignore) {
-        }
-
-        // Creates file
-        file.createNewFile();
-        file.deleteOnExit();
-
-        // New file
-        assertEquals(BigInteger.ZERO, FileUtils.sizeOfAsBigInteger(file));
-        file.delete();
+    public void testWriteStringToFile2() throws Exception {
+        final File file = new File(temporaryFolder, "write.txt");
+        FileUtils.writeStringToFile(file, "Hello /u1234", (String) null);
+        final byte[] text = "Hello /u1234".getBytes();
+        TestUtils.assertEqualContent(text, file);
+    }
 
-        // Existing file
-        assertEquals(BigInteger.valueOf(testFile1Size), FileUtils.sizeOfAsBigInteger(testFile1),
-                "Unexpected files size");
+    @Test
+    public void testWriteStringToFile3() throws Exception {
+        final File file = new File(temporaryFolder, "write.txt");
+        FileUtils.writeStringToFile(file, "Hello /u1234", (Charset) null);
+        final byte[] text = "Hello /u1234".getBytes();
+        TestUtils.assertEqualContent(text, file);
+    }
 
-        // Existing directory
-        assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfAsBigInteger(temporaryFolder),
-                "Unexpected directory size");
+    @Test
+    public void testWriteCharSequence1() throws Exception {
+        final File file = new File(temporaryFolder, "write.txt");
+        FileUtils.write(file, "Hello /u1234", "UTF8");
+        final byte[] text = "Hello /u1234".getBytes("UTF8");
+        TestUtils.assertEqualContent(text, file);
     }
 
+    @Test
+    public void testWriteCharSequence2() throws Exception {
+        final File file = new File(temporaryFolder, "write.txt");
+        FileUtils.write(file, "Hello /u1234", (String) null);
+        final byte[] text = "Hello /u1234".getBytes();
+        TestUtils.assertEqualContent(text, file);
+    }
 
     @Test
-    public void testSizeOfDirectory() throws Exception {
-        final File file = new File(temporaryFolder, getName());
-
-        // Non-existent file
-        try {
-            FileUtils.sizeOfDirectory(file);
-            fail("Exception expected.");
-        } catch (final IllegalArgumentException ignore) {
-        }
-
-        // Creates file
-        file.createNewFile();
+    public void testWriteByteArrayToFile() throws Exception {
+        final File file = new File(temporaryFolder, "write.obj");
+        final byte[] data = new byte[]{11, 21, 31};
+        FileUtils.writeByteArrayToFile(file, data);
+        TestUtils.assertEqualContent(data, file);
+    }
 
-        // Existing file
-        try {
-            FileUtils.sizeOfDirectory(file);
-            fail("Exception expected.");
-        } catch (final IllegalArgumentException ignore) {
-        }
+    @Test
+    public void testWriteByteArrayToFile_WithOffsetAndLength() throws Exception {
+        final File file = new File(temporaryFolder, "write.obj");
+        final byte[] data = new byte[]{11, 21, 32, 41, 51};
+        final byte[] writtenData = new byte[3];
+        System.arraycopy(data, 1, writtenData, 0, 3);
+        FileUtils.writeByteArrayToFile(file, data, 1, 3);
+        TestUtils.assertEqualContent(writtenData, file);
+    }
 
-        // Existing directory
-        file.delete();
-        file.mkdir();
+    @Test
+    public void testWriteLines_4arg() throws Exception {
+        final Object[] data = new Object[]{
+                "hello", new StringBuffer("world"), "", "this is", null, "some text"};
+        final List<Object> list = Arrays.asList(data);
 
-        // Create a cyclic symlink
-        this.createCircularSymLink(file);
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeLines(file, "US-ASCII", list, "*");
 
-        assertEquals(TEST_DIRECTORY_SIZE, FileUtils.sizeOfDirectory(file), "Unexpected directory size");
+        final String expected = "hello*world**this is**some text*";
+        final String actual = FileUtils.readFileToString(file, "US-ASCII");
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testSizeOfDirectoryAsBigInteger() throws Exception {
-        final File file = new File(temporaryFolder, getName());
+    public void testWriteLines_4arg_Writer_nullData() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeLines(file, "US-ASCII", null, "*");
 
-        // Non-existent file
-        try {
-            FileUtils.sizeOfDirectoryAsBigInteger(file);
-            fail("Exception expected.");
-        } catch (final IllegalArgumentException ignore) {
-        }
+        assertEquals(0, file.length(), "Sizes differ");
+    }
 
-        // Creates file
-        file.createNewFile();
-        file.deleteOnExit();
+    @Test
+    public void testWriteLines_4arg_nullSeparator() throws Exception {
+        final Object[] data = new Object[]{
+                "hello", new StringBuffer("world"), "", "this is", null, "some text"};
+        final List<Object> list = Arrays.asList(data);
 
-        // Existing file
-        try {
-            FileUtils.sizeOfDirectoryAsBigInteger(file);
-            fail("Exception expected.");
-        } catch (final IllegalArgumentException ignore) {
-        }
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeLines(file, "US-ASCII", list, null);
 
-        // Existing directory
-        file.delete();
-        file.mkdir();
+        final String expected = "hello" + System.lineSeparator() + "world" + System.lineSeparator() +
+                System.lineSeparator() + "this is" + System.lineSeparator() +
+                System.lineSeparator() + "some text" + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file, "US-ASCII");
+        assertEquals(expected, actual);
+    }
 
-        this.createCircularSymLink(file);
+    @Test
+    public void testWriteLines_3arg_nullSeparator() throws Exception {
+        final Object[] data = new Object[]{
+                "hello", new StringBuffer("world"), "", "this is", null, "some text"};
+        final List<Object> list = Arrays.asList(data);
 
-        assertEquals(TEST_DIRECTORY_SIZE_BI, FileUtils.sizeOfDirectoryAsBigInteger(file), "Unexpected directory size");
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeLines(file, "US-ASCII", list);
 
-        // Existing directory which size is greater than zero
-        file.delete();
-        file.mkdir();
+        final String expected = "hello" + System.lineSeparator() + "world" + System.lineSeparator() +
+                System.lineSeparator() + "this is" + System.lineSeparator() +
+                System.lineSeparator() + "some text" + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file, "US-ASCII");
+        assertEquals(expected, actual);
+    }
 
-        final File nonEmptyFile = new File(file, "nonEmptyFile" + System.nanoTime());
-        if (!nonEmptyFile.getParentFile().exists()) {
-            throw new IOException("Cannot create file " + nonEmptyFile
-                    + " as the parent directory does not exist");
-        }
-        final BufferedOutputStream output =
-                new BufferedOutputStream(new FileOutputStream(nonEmptyFile));
-        try {
-            TestUtils.generateTestData(output, TEST_DIRECTORY_SIZE_GT_ZERO_BI.longValue());
-        } finally {
-            IOUtils.closeQuietly(output);
-        }
-        nonEmptyFile.deleteOnExit();
+    @Test
+    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(TEST_DIRECTORY_SIZE_GT_ZERO_BI, FileUtils.sizeOfDirectoryAsBigInteger(file),
-                "Unexpected directory size");
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, null, linesToAppend, null, true);
 
-        nonEmptyFile.delete();
-        file.delete();
+        final String expected = "This line was there before you..."
+                + "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
-    //-----------------------------------------------------------------------
     @Test
-    public void testToFile1() throws Exception {
-        final URL url = new URL("file", null, "a/b/c/file.txt");
-        final File file = FileUtils.toFile(url);
-        assertTrue(file.toString().contains("file.txt"));
+    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, null, linesToAppend, null, false);
+
+        final String expected = "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFile2() throws Exception {
-        final URL url = new URL("file", null, "a/b/c/file%20n%61me%2520.tx%74");
-        final File file = FileUtils.toFile(url);
-        assertTrue(file.toString().contains("file name%20.txt"));
+    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, linesToAppend, null, true);
+
+        final String expected = "This line was there before you..."
+                + "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFile3() throws Exception {
-        assertEquals(null, FileUtils.toFile(null));
-        assertEquals(null, FileUtils.toFile(new URL("http://jakarta.apache.org")));
+    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, linesToAppend, null, false);
+
+        final String expected = "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
+
     @Test
-    public void testToFile4() throws Exception {
-        final URL url = new URL("file", null, "a/b/c/file%%20%me.txt%");
-        final File file = FileUtils.toFile(url);
-        assertTrue(file.toString().contains("file% %me.txt%"));
+    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, null, linesToAppend, true);
+
+        final String expected = "This line was there before you..."
+                + "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
-    /* IO-252 */
     @Test
-    public void testToFile5() throws Exception {
-        final URL url = new URL("file", null, "both%20are%20100%20%25%20true");
-        final File file = FileUtils.toFile(url);
-        assertEquals("both are 100 % true", file.toString());
+    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, null, linesToAppend, false);
+
+        final String expected = "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFiles1() throws Exception {
-        final URL[] urls = new URL[]{
-                new URL("file", null, "file1.txt"),
-                new URL("file", null, "file2.txt"),
-        };
-        final File[] files = FileUtils.toFiles(urls);
+    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(urls.length, files.length);
-        assertEquals(true, files[0].toString().contains("file1.txt"), "File: " + files[0]);
-        assertEquals(true, files[1].toString().contains("file2.txt"), "File: " + files[1]);
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, linesToAppend, true);
+
+        final String expected = "This line was there before you..."
+                + "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFiles2() throws Exception {
-        final URL[] urls = new URL[]{
-                new URL("file", null, "file1.txt"),
-                null,
-        };
-        final File[] files = FileUtils.toFiles(urls);
+    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(urls.length, files.length);
-        assertEquals(true, files[0].toString().contains("file1.txt"), "File: " + files[0]);
-        assertEquals(null, files[1], "File: " + files[1]);
+        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
+        FileUtils.writeLines(file, linesToAppend, false);
+
+        final String expected = "my first line"
+                + System.lineSeparator() + "The second Line"
+                + System.lineSeparator();
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFiles3() throws Exception {
-        final URL[] urls = null;
-        final File[] files = FileUtils.toFiles(urls);
+    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(0, files.length);
+        FileUtils.writeStringToFile(file, "this is brand new data", (String) null, true);
+
+        final String expected = "This line was there before you..."
+                + "this is brand new data";
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFiles3a() throws Exception {
-        final URL[] urls = new URL[0]; // empty array
-        final File[] files = FileUtils.toFiles(urls);
+    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(0, files.length);
-    }
+        FileUtils.writeStringToFile(file, "this is brand new data", (String) null, false);
 
-    @Test
-    public void testToFiles4() throws Exception {
-        final URL[] urls = new URL[]{
-                new URL("file", null, "file1.txt"),
-                new URL("http", "jakarta.apache.org", "file1.txt"),
-        };
-        try {
-            FileUtils.toFiles(urls);
-            fail();
-        } catch (final IllegalArgumentException ignore) {
-        }
+        final String expected = "this is brand new data";
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToFileUtf8() throws Exception {
-        final URL url = new URL("file", null, "/home/%C3%A4%C3%B6%C3%BC%C3%9F");
-        final File file = FileUtils.toFile(url);
-        assertTrue(file.toString().contains("\u00E4\u00F6\u00FC\u00DF"));
-    }
+    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-    @Test
-    public void testTouch() throws IOException {
-        final File file = new File(temporaryFolder, "touch.txt");
-        if (file.exists()) {
-            file.delete();
-        }
-        assertTrue(!file.exists(), "Bad test: test file still exists");
-        FileUtils.touch(file);
-        assertTrue(file.exists(), "FileUtils.touch() created file");
-        final FileOutputStream out = new FileOutputStream(file);
-        assertEquals(0, file.length(), "Created empty file.");
-        out.write(0);
-        out.close();
-        assertEquals(1, file.length(), "Wrote one byte to file");
-        final long y2k = new GregorianCalendar(2000, 0, 1).getTime().getTime();
-        final boolean res = setLastModifiedMillis(file, y2k);  // 0L fails on Win98
-        assertEquals(true, res, "Bad test: set lastModified failed");
-        assertEquals(y2k, getLastModifiedMillis(file), "Bad test: set lastModified set incorrect value");
-        final long now = System.currentTimeMillis();
-        FileUtils.touch(file);
-        assertEquals(1, file.length(), "FileUtils.touch() didn't empty the file.");
-        assertEquals(false, y2k == getLastModifiedMillis(file), "FileUtils.touch() changed lastModified");
-        assertEquals(true, getLastModifiedMillis(file) >= now - 3000, "FileUtils.touch() changed lastModified to more than now-3s");
-        assertEquals(true, getLastModifiedMillis(file) <= now + 3000, "FileUtils.touch() changed lastModified to less than now+3s");
+        FileUtils.writeStringToFile(file, "this is brand new data", true);
+
+        final String expected = "This line was there before you..."
+                + "this is brand new data";
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToURLs1() throws Exception {
-        final File[] files = new File[]{
-                new File(temporaryFolder, "file1.txt"),
-                new File(temporaryFolder, "file2.txt"),
-                new File(temporaryFolder, "test file.txt"),
-        };
-        final URL[] urls = FileUtils.toURLs(files);
+    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(files.length, urls.length);
-        assertTrue(urls[0].toExternalForm().startsWith("file:"));
-        assertTrue(urls[0].toExternalForm().contains("file1.txt"));
-        assertTrue(urls[1].toExternalForm().startsWith("file:"));
-        assertTrue(urls[1].toExternalForm().contains("file2.txt"));
+        FileUtils.writeStringToFile(file, "this is brand new data", false);
 
-        // Test escaped char
-        assertTrue(urls[2].toExternalForm().startsWith("file:"));
-        assertTrue(urls[2].toExternalForm().contains("test%20file.txt"));
+        final String expected = "this is brand new data";
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testToURLs3a() throws Exception {
-        final File[] files = new File[0]; // empty array
-        final URL[] urls = FileUtils.toURLs(files);
+    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        assertEquals(0, urls.length);
+        FileUtils.write(file, "this is brand new data", (String) null, true);
+
+        final String expected = "This line was there before you..."
+                + "this is brand new data";
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
     }
 
     @Test
-    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
         final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
         FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        FileUtils.write(file, "this is brand new data", false);
+        FileUtils.write(file, "this is brand new data", (String) null, false);
 
         final String expected = "this is brand new data";
         final String actual = FileUtils.readFileToString(file);
@@ -2867,19 +2386,11 @@ public class FileUtilsTestCase {
     }
 
     @Test
-    public void testWriteByteArrayToFile() throws Exception {
-        final File file = new File(temporaryFolder, "write.obj");
-        final byte[] data = new byte[]{11, 21, 31};
-        FileUtils.writeByteArrayToFile(file, data);
-        TestUtils.assertEqualContent(data, file);
-    }
-
-    @Test
-    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+    public void testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
         final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
         FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
+        FileUtils.write(file, "this is brand new data", false);
 
         final String expected = "this is brand new data";
         final String actual = FileUtils.readFileToString(file);
@@ -2900,13 +2411,28 @@ public class FileUtilsTestCase {
     }
 
     @Test
-    public void testWriteByteArrayToFile_WithOffsetAndLength() throws Exception {
-        final File file = new File(temporaryFolder, "write.obj");
-        final byte[] data = new byte[]{11, 21, 32, 41, 51};
-        final byte[] writtenData = new byte[3];
-        System.arraycopy(data, 1, writtenData, 0, 3);
-        FileUtils.writeByteArrayToFile(file, data, 1, 3);
-        TestUtils.assertEqualContent(writtenData, file);
+    public void testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        FileUtils.writeByteArrayToFile(file, "this is brand new data".getBytes(), false);
+
+        final String expected = "this is brand new data";
+        final String actual = FileUtils.readFileToString(file);
+        assertEquals(expected, actual);
+    }
+
+    @Test
+    public void testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
+        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
+        FileUtils.writeStringToFile(file, "This line was there before you...");
+
+        final byte[] data = "SKIP_THIS_this is brand new data_AND_SKIP_THIS".getBytes(StandardCharsets.UTF_8);
+        FileUtils.writeByteArrayToFile(file, data, 10, 22, true);
+
+        final String expected = "This line was there before you..." + "this is brand new data";
+        final String actual = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
+        assertEquals(expected, actual);
     }
 
     @Test
@@ -2914,319 +2440,746 @@ public class FileUtilsTestCase {
         final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
         FileUtils.writeStringToFile(file, "This line was there before you...");
 
-        final byte[] data = "SKIP_THIS_this is brand new data_AND_SKIP_THIS".getBytes(StandardCharsets.UTF_8);
-        FileUtils.writeByteArrayToFile(file, data, 10, 22, false);
+        final byte[] data = "SKIP_THIS_this is brand new data_AND_SKIP_THIS".getBytes(StandardCharsets.UTF_8);
+        FileUtils.writeByteArrayToFile(file, data, 10, 22, false);
+
+        final String expected = "this is brand new data";
+        final String actual = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
+        assertEquals(expected, actual);
+    }
+
+    //-----------------------------------------------------------------------
+    @Test
+    public void testChecksumCRC32() throws Exception {
+        // create a test file
+        final String text = "Imagination is more important than knowledge - Einstein";
+        final File file = new File(temporaryFolder, "checksum-test.txt");
+        FileUtils.writeStringToFile(file, text, "US-ASCII");
+
+        // compute the expected checksum
+        final Checksum expectedChecksum = new CRC32();
+        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
+        final long expectedValue = expectedChecksum.getValue();
+
+        // compute the checksum of the file
+        final long resultValue = FileUtils.checksumCRC32(file);
+
+        assertEquals(expectedValue, resultValue);
+    }
+
+    @Test
+    public void testChecksum() throws Exception {
+        // create a test file
+        final String text = "Imagination is more important than knowledge - Einstein";
+        final File file = new File(temporaryFolder, "checksum-test.txt");
+        FileUtils.writeStringToFile(file, text, "US-ASCII");
+
+        // compute the expected checksum
+        final Checksum expectedChecksum = new CRC32();
+        expectedChecksum.update(text.getBytes("US-ASCII"), 0, text.length());
+        final long expectedValue = expectedChecksum.getValue();
+
+        // compute the checksum of the file
+        final Checksum testChecksum = new CRC32();
+        final Checksum resultChecksum = FileUtils.checksum(file, testChecksum);
+        final long resultValue = resultChecksum.getValue();
+
+        assertSame(testChecksum, resultChecksum);
+        assertEquals(expectedValue, resultValue);
+    }
+
+    @Test
+    public void testChecksumOnNullFile() throws Exception {
+        try {
+            FileUtils.checksum(null, new CRC32());
+            fail();
+        } catch (final NullPointerException ex) {
+            // expected
+        }
+    }
+
+    @Test
+    public void testChecksumOnNullChecksum() throws Exception {
+        // create a test file
+        final String text = "Imagination is more important than knowledge - Einstein";
+        final File file = new File(temporaryFolder, "checksum-test.txt");
+        FileUtils.writeStringToFile(file, text, "US-ASCII");
+        try {
+            FileUtils.checksum(file, null);
+            fail();
+        } catch (final NullPointerException ex) {
+            // expected
+        }
+    }
+
+    @Test
+    public void testChecksumOnDirectory() throws Exception {
+        try {
+            FileUtils.checksum(new File("."), new CRC32());
+            fail();
+        } catch (final IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    @Test
+    public void testChecksumDouble() throws Exception {
+        // create a test file
+        final String text1 = "Imagination is more important than knowledge - Einstein";
+        final File file1 = new File(temporaryFolder, "checksum-test.txt");
+        FileUtils.writeStringToFile(file1, text1, "US-ASCII");
+
+        // create a second test file
+        final String text2 = "To be or not to be - Shakespeare";
+        final File file2 = new File(temporaryFolder, "checksum-test2.txt");
+        FileUtils.writeStringToFile(file2, text2, "US-ASCII");
+
+        // compute the expected checksum
+        final Checksum expectedChecksum = new CRC32();
+        expectedChecksum.update(text1.getBytes("US-ASCII"), 0, text1.length());
+        expectedChecksum.update(text2.getBytes("US-ASCII"), 0, text2.length());
+        final long expectedValue = expectedChecksum.getValue();
+
+        // compute the checksum of the file
+        final Checksum testChecksum = new CRC32();
+        FileUtils.checksum(file1, testChecksum);
+        FileUtils.checksum(file2, testChecksum);
+        final long resultValue = testChecksum.getValue();
 
-        final String expected = "this is brand new data";
-        final String actual = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
-        assertEquals(expected, actual);
+        assertEquals(expectedValue, resultValue);
     }
 
     @Test
-    public void testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        final byte[] data = "SKIP_THIS_this is brand new data_AND_SKIP_THIS".getBytes(StandardCharsets.UTF_8);
-        FileUtils.writeByteArrayToFile(file, data, 10, 22, true);
-
-        final String expected = "This line was there before you..." + "this is brand new data";
-        final String actual = FileUtils.readFileToString(file, StandardCharsets.UTF_8);
-        assertEquals(expected, actual);
+    public void testDeleteDirectoryWithNonDirectory() throws Exception {
+        try {
+            FileUtils.deleteDirectory(testFile1);
+            fail();
+        } catch (final IllegalArgumentException ex) {
+            // expected
+        }
     }
 
     @Test
-    public void testWriteCharSequence1() throws Exception {
-        final File file = new File(temporaryFolder, "write.txt");
-        FileUtils.write(file, "Hello /u1234", "UTF8");
-        final byte[] text = "Hello /u1234".getBytes("UTF8");
-        TestUtils.assertEqualContent(text, file);
+    public void testDeleteQuietlyForNull() {
+        try {
+            FileUtils.deleteQuietly(null);
+        } catch (final Exception ex) {
+            fail(ex.getMessage());
+        }
     }
 
     @Test
-    public void testWriteCharSequence2() throws Exception {
-        final File file = new File(temporaryFolder, "write.txt");
-        FileUtils.write(file, "Hello /u1234", (String) null);
-        final byte[] text = "Hello /u1234".getBytes();
-        TestUtils.assertEqualContent(text, file);
+    public void testDeleteQuietlyDir() throws IOException {
+        final File testDirectory = new File(temporaryFolder, "testDeleteQuietlyDir");
+        final File testFile = new File(testDirectory, "testDeleteQuietlyFile");
+        testDirectory.mkdirs();
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+
+        assertTrue(testDirectory.exists());
+        assertTrue(testFile.exists());
+        FileUtils.deleteQuietly(testDirectory);
+        assertFalse(testDirectory.exists(), "Check No Exist");
+        assertFalse(testFile.exists(), "Check No Exist");
     }
 
     @Test
-    public void testWriteLines_3arg_nullSeparator() throws Exception {
-        final Object[] data = new Object[]{
-                "hello", new StringBuffer("world"), "", "this is", null, "some text"};
-        final List<Object> list = Arrays.asList(data);
-
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeLines(file, "US-ASCII", list);
+    public void testDeleteQuietlyFile() throws IOException {
+        final File testFile = new File(temporaryFolder, "testDeleteQuietlyFile");
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
 
-        final String expected = "hello" + System.lineSeparator() + "world" + System.lineSeparator() +
-                System.lineSeparator() + "this is" + System.lineSeparator() +
-                System.lineSeparator() + "some text" + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file, "US-ASCII");
-        assertEquals(expected, actual);
+        assertTrue(testFile.exists());
+        FileUtils.deleteQuietly(testFile);
+        assertFalse(testFile.exists(), "Check No Exist");
     }
 
     @Test
-    public void testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, linesToAppend, false);
+    public void testDeleteQuietlyNonExistent() {
+        final File testFile = new File("testDeleteQuietlyNonExistent");
+        assertFalse(testFile.exists());
 
-        final String expected = "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        try {
+            FileUtils.deleteQuietly(testFile);
+        } catch (final Exception ex) {
+            fail(ex.getMessage());
+        }
     }
 
     @Test
-    public void testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, linesToAppend, true);
+    public void testMoveFile_Rename() throws Exception {
+        final File destination = new File(temporaryFolder, "move1.txt");
 
-        final String expected = "This line was there before you..."
-                + "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        FileUtils.moveFile(testFile1, destination);
+        assertTrue(destination.exists(), "Check Exist");
+        assertTrue(!testFile1.exists(), "Original deleted");
     }
 
     @Test
-    public void testWriteLines_4arg() throws Exception {
-        final Object[] data = new Object[]{
-                "hello", new StringBuffer("world"), "", "this is", null, "some text"};
-        final List<Object> list = Arrays.asList(data);
-
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeLines(file, "US-ASCII", list, "*");
+    public void testMoveFile_CopyDelete() throws Exception {
+        final File destination = new File(temporaryFolder, "move2.txt");
+        final File src = new File(testFile1.getAbsolutePath()) {
+            private static final long serialVersionUID = 1L;
 
-        final String expected = "hello*world**this is**some text*";
-        final String actual = FileUtils.readFileToString(file, "US-ASCII");
-        assertEquals(expected, actual);
+            // Force renameTo to fail, as if destination is on another
+            // filesystem
+            @Override
+            public boolean renameTo(final File f) {
+                return false;
+            }
+        };
+        FileUtils.moveFile(src, destination);
+        assertTrue(destination.exists(), "Check Exist");
+        assertTrue(!src.exists(), "Original deleted");
     }
 
     @Test
-    public void testWriteLines_4arg_nullSeparator() throws Exception {
-        final Object[] data = new Object[]{
-                "hello", new StringBuffer("world"), "", "this is", null, "some text"};
-        final List<Object> list = Arrays.asList(data);
+    public void testMoveFile_CopyDelete_Failed() throws Exception {
+        final File destination = new File(temporaryFolder, "move3.txt");
+        final File src = new File(testFile1.getAbsolutePath()) {
+            private static final long serialVersionUID = 1L;
 
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeLines(file, "US-ASCII", list, null);
+            // Force renameTo to fail, as if destination is on another
+            // filesystem
+            @Override
+            public boolean renameTo(final File f) {
+                return false;
+            }
 
-        final String expected = "hello" + System.lineSeparator() + "world" + System.lineSeparator() +
-                System.lineSeparator() + "this is" + System.lineSeparator() +
-                System.lineSeparator() + "some text" + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file, "US-ASCII");
-        assertEquals(expected, actual);
+            // Force delete failure
+            @Override
+            public boolean delete() {
+                return false;
+            }
+
+        };
+        try {
+            FileUtils.moveFile(src, destination);
+            fail("move should have failed as src has not been deleted");
+        } catch (final IOException e) {
+            // exepected
+            assertTrue(!destination.exists(), "Check Rollback");
+            assertTrue(src.exists(), "Original exists");
+        }
     }
 
     @Test
-    public void testWriteLines_4arg_Writer_nullData() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeLines(file, "US-ASCII", null, "*");
+    public void testMoveFile_Errors() throws Exception {
+        try {
+            FileUtils.moveFile(null, new File("foo"));
+            fail("Expected NullPointerException when source is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveFile(new File("foo"), null);
+            fail("Expected NullPointerException when destination is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveFile(new File("nonexistant"), new File("foo"));
+            fail("Expected FileNotFoundException for source");
+        } catch (final FileNotFoundException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveFile(temporaryFolder, new File("foo"));
+            fail("Expected IOException when source is a directory");
+        } catch (final IOException e) {
+            // expected
+        }
+        final File testSourceFile = new File(temporaryFolder, "testMoveFileSource");
+        final File testDestFile = new File(temporaryFolder, "testMoveFileSource");
+        if (!testSourceFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testSourceFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(testSourceFile));
+        try {
+            TestUtils.generateTestData(output1, 0);
+        } finally {
+            IOUtils.closeQuietly(output1);
+        }
+        if (!testDestFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testDestFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testDestFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        try {
+            FileUtils.moveFile(testSourceFile, testDestFile);
+            fail("Expected FileExistsException when dest already exists");
+        } catch (final FileExistsException e) {
+            // expected
+        }
+    }
+
+    @Test
+    public void testMoveFileToDirectory() throws Exception {
+        final File destDir = new File(temporaryFolder, "moveFileDestDir");
+        final File movedFile = new File(destDir, testFile1.getName());
+        assertFalse(destDir.exists(), "Check Exist before");
+        assertFalse(movedFile.exists(), "Check Exist before");
 
-        assertEquals(0, file.length(), "Sizes differ");
+        FileUtils.moveFileToDirectory(testFile1, destDir, true);
+        assertTrue(movedFile.exists(), "Check Exist after");
+        assertTrue(!testFile1.exists(), "Original deleted");
     }
 
     @Test
-    public void testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, linesToAppend, null, false);
+    public void testMoveFileToDirectory_Errors() throws Exception {
+        try {
+            FileUtils.moveFileToDirectory(null, new File("foo"), true);
+            fail("Expected NullPointerException when source is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveFileToDirectory(new File("foo"), null, true);
+            fail("Expected NullPointerException when destination is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        final File testFile1 = new File(temporaryFolder, "testMoveFileFile1");
+        final File testFile2 = new File(temporaryFolder, "testMoveFileFile2");
+        if (!testFile1.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile1
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(testFile1));
+        try {
+            TestUtils.generateTestData(output1, 0);
+        } finally {
+            IOUtils.closeQuietly(output1);
+        }
+        if (!testFile2.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile2
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile2));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        try {
+            FileUtils.moveFileToDirectory(testFile1, testFile2, true);
+            fail("Expected IOException when dest not a directory");
+        } catch (final IOException e) {
+            // expected
+        }
 
-        final String expected = "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        final File nonexistant = new File(temporaryFolder, "testMoveFileNonExistant");
+        try {
+            FileUtils.moveFileToDirectory(testFile1, nonexistant, false);
+            fail("Expected IOException when dest does not exist and create=false");
+        } catch (final IOException e) {
+            // expected
+        }
     }
 
 
     @Test
-    public void testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+    public void testMoveDirectory_Rename() throws Exception {
+        final File dir = temporaryFolder;
+        final File src = new File(dir, "testMoveDirectory1Source");
+        final File testDir = new File(src, "foo");
+        final File testFile = new File(testDir, "bar");
+        testDir.mkdirs();
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        final File destination = new File(dir, "testMoveDirectory1Dest");
+        FileUtils.deleteDirectory(destination);
 
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, linesToAppend, null, true);
+        // Move the directory
+        FileUtils.moveDirectory(src, destination);
 
-        final String expected = "This line was there before you..."
-                + "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        // Check results
+        assertTrue(destination.exists(), "Check Exist");
+        assertTrue(!src.exists(), "Original deleted");
+        final File movedDir = new File(destination, testDir.getName());
+        final File movedFile = new File(movedDir, testFile.getName());
+        assertTrue(movedDir.exists(), "Check dir moved");
+        assertTrue(movedFile.exists(), "Check file moved");
     }
 
     @Test
-    public void testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, null, linesToAppend, null, false);
+    public void testMoveDirectory_CopyDelete() throws Exception {
 
-        final String expected = "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
-    }
+        final File dir = temporaryFolder;
+        final File src = new File(dir, "testMoveDirectory2Source") {
+            private static final long serialVersionUID = 1L;
 
-    @Test
-    public void testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+            // Force renameTo to fail
+            @Override
+            public boolean renameTo(final File dest) {
+                return false;
+            }
+        };
+        final File testDir = new File(src, "foo");
+        final File testFile = new File(testDir, "bar");
+        testDir.mkdirs();
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        final File destination = new File(dir, "testMoveDirectory1Dest");
+        FileUtils.deleteDirectory(destination);
 
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, null, linesToAppend, null, true);
+        // Move the directory
+        FileUtils.moveDirectory(src, destination);
 
-        final String expected = "This line was there before you..."
-                + "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        // Check results
+        assertTrue(destination.exists(), "Check Exist");
+        assertTrue(!src.exists(), "Original deleted");
+        final File movedDir = new File(destination, testDir.getName());
+        final File movedFile = new File(movedDir, testFile.getName());
+        assertTrue(movedDir.exists(), "Check dir moved");
+        assertTrue(movedFile.exists(), "Check file moved");
     }
 
     @Test
-    public void testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, null, linesToAppend, false);
-
-        final String expected = "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+    public void testMoveDirectory_Errors() throws Exception {
+        try {
+            FileUtils.moveDirectory(null, new File("foo"));
+            fail("Expected NullPointerException when source is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveDirectory(new File("foo"), null);
+            fail("Expected NullPointerException when destination is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveDirectory(new File("nonexistant"), new File("foo"));
+            fail("Expected FileNotFoundException for source");
+        } catch (final FileNotFoundException e) {
+            // expected
+        }
+        final File testFile = new File(temporaryFolder, "testMoveDirectoryFile");
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        try {
+            FileUtils.moveDirectory(testFile, new File("foo"));
+            fail("Expected IOException when source is not a directory");
+        } catch (final IOException e) {
+            // expected
+        }
+        final File testSrcFile = new File(temporaryFolder, "testMoveDirectorySource");
+        final File testDestFile = new File(temporaryFolder, "testMoveDirectoryDest");
+        testSrcFile.mkdir();
+        testDestFile.mkdir();
+        try {
+            FileUtils.moveDirectory(testSrcFile, testDestFile);
+            fail("Expected FileExistsException when dest already exists");
+        } catch (final FileExistsException e) {
+            // expected
+        }
     }
 
     @Test
-    public void testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+    public void testMoveDirectoryToDirectory() throws Exception {
+        final File dir = temporaryFolder;
+        final File src = new File(dir, "testMoveDirectory1Source");
+        final File testChildDir = new File(src, "foo");
+        final File testFile = new File(testChildDir, "bar");
+        testChildDir.mkdirs();
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        final File destDir = new File(dir, "testMoveDirectory1Dest");
+        FileUtils.deleteDirectory(destDir);
+        assertFalse(destDir.exists(), "Check Exist before");
 
-        final List<String> linesToAppend = Arrays.asList("my first line", "The second Line");
-        FileUtils.writeLines(file, null, linesToAppend, true);
+        // Move the directory
+        FileUtils.moveDirectoryToDirectory(src, destDir, true);
 
-        final String expected = "This line was there before you..."
-                + "my first line"
-                + System.lineSeparator() + "The second Line"
-                + System.lineSeparator();
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        // Check results
+        assertTrue(destDir.exists(), "Check Exist after");
+        assertTrue(!src.exists(), "Original deleted");
+        final File movedDir = new File(destDir, src.getName());
+        final File movedChildDir = new File(movedDir, testChildDir.getName());
+        final File movedFile = new File(movedChildDir, testFile.getName());
+        assertTrue(movedDir.exists(), "Check dir moved");
+        assertTrue(movedChildDir.exists(), "Check child dir moved");
+        assertTrue(movedFile.exists(), "Check file moved");
     }
 
     @Test
-    public void testWriteStringToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        FileUtils.writeStringToFile(file, "this is brand new data", false);
+    public void testMoveDirectoryToDirectory_Errors() throws Exception {
+        try {
+            FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
+            fail("Expected NullPointerException when source is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
+            fail("Expected NullPointerException when destination is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        final File testFile1 = new File(temporaryFolder, "testMoveFileFile1");
+        final File testFile2 = new File(temporaryFolder, "testMoveFileFile2");
+        if (!testFile1.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile1
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output1 =
+                new BufferedOutputStream(new FileOutputStream(testFile1));
+        try {
+            TestUtils.generateTestData(output1, 0);
+        } finally {
+            IOUtils.closeQuietly(output1);
+        }
+        if (!testFile2.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile2
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile2));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        try {
+            FileUtils.moveDirectoryToDirectory(testFile1, testFile2, true);
+            fail("Expected IOException when dest not a directory");
+        } catch (final IOException e) {
+            // expected
+        }
 
-        final String expected = "this is brand new data";
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        final File nonexistant = new File(temporaryFolder, "testMoveFileNonExistant");
+        try {
+            FileUtils.moveDirectoryToDirectory(testFile1, nonexistant, false);
+            fail("Expected IOException when dest does not exist and create=false");
+        } catch (final IOException e) {
+            // expected
+        }
     }
 
     @Test
-    public void testWriteStringToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+    public void testMoveToDirectory() throws Exception {
+        final File destDir = new File(temporaryFolder, "testMoveToDirectoryDestDir");
+        final File testDir = new File(temporaryFolder, "testMoveToDirectoryTestDir");
+        final File testFile = new File(temporaryFolder, "testMoveToDirectoryTestFile");
+        testDir.mkdirs();
+        if (!testFile.getParentFile().exists()) {
+            throw new IOException("Cannot create file " + testFile
+                    + " as the parent directory does not exist");
+        }
+        final BufferedOutputStream output =
+                new BufferedOutputStream(new FileOutputStream(testFile));
+        try {
+            TestUtils.generateTestData(output, 0);
+        } finally {
+            IOUtils.closeQuietly(output);
+        }
+        final File movedFile = new File(destDir, testFile.getName());
+        final File movedDir = new File(destDir, testFile.getName());
 
-        FileUtils.writeStringToFile(file, "this is brand new data", true);
+        assertFalse(movedFile.exists(), "Check File Doesnt exist");
+        assertFalse(movedDir.exists(), "Check Dir Doesnt exist");
 
-        final String expected = "This line was there before you..."
-                + "this is brand new data";
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        // Test moving a file
+        FileUtils.moveToDirectory(testFile, destDir, true);
+        assertTrue(movedFile.exists(), "Check File exists");
+        assertFalse(testFile.exists(), "Check Original File doesn't exist");
+
+        // Test moving a directory
+        FileUtils.moveToDirectory(testDir, destDir, true);
+        assertTrue(movedDir.exists(), "Check Dir exists");
+        assertFalse(testDir.exists(), "Check Original Dir doesn't exist");
     }
 
     @Test
-    public void testWriteStringToFile1() throws Exception {
-        final File file = new File(temporaryFolder, "write.txt");
-        FileUtils.writeStringToFile(file, "Hello /u1234", "UTF8");
-        final byte[] text = "Hello /u1234".getBytes("UTF8");
-        TestUtils.assertEqualContent(text, file);
+    public void testMoveToDirectory_Errors() throws Exception {
+        try {
+            FileUtils.moveDirectoryToDirectory(null, new File("foo"), true);
+            fail("Expected NullPointerException when source is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        try {
+            FileUtils.moveDirectoryToDirectory(new File("foo"), null, true);
+            fail("Expected NullPointerException when destination is null");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+        final File nonexistant = new File(temporaryFolder, "nonexistant");
+        final File destDir = new File(temporaryFolder, "MoveToDirectoryDestDir");
+        try {
+            FileUtils.moveToDirectory(nonexistant, destDir, true);
+            fail("Expected IOException when source does not exist");
+        } catch (final IOException e) {
+            // expected
+        }
     }
 
     @Test
-    public void testWriteStringToFile2() throws Exception {
-        final File file = new File(temporaryFolder, "write.txt");
-        FileUtils.writeStringToFile(file, "Hello /u1234", (String) null);
-        final byte[] text = "Hello /u1234".getBytes();
-        TestUtils.assertEqualContent(text, file);
+    public void testIO300() throws Exception {
+        final File testDirectory = temporaryFolder;
+        final File src = new File(testDirectory, "dir1");
+        final File dest = new File(src, "dir2");
+        assertTrue(dest.mkdirs());
+        assertTrue(src.exists());
+        try {
+            FileUtils.moveDirectoryToDirectory(src, dest, false);
+            fail("expected IOException");
+        } catch (final IOException ioe) {
+            // expected
+        }
+        assertTrue(src.exists());
     }
 
     @Test
-    public void testWriteStringToFile3() throws Exception {
-        final File file = new File(temporaryFolder, "write.txt");
-        FileUtils.writeStringToFile(file, "Hello /u1234", (Charset) null);
-        final byte[] text = "Hello /u1234".getBytes();
-        TestUtils.assertEqualContent(text, file);
+    public void testIO276() throws Exception {
+        final File dir = new File("target", "IO276");
+        assertTrue(dir.mkdirs(), dir + " should not be present");
+        final File file = new File(dir, "IO276.txt");
+        assertTrue(file.createNewFile(), file + " should not be present");
+        FileUtils.forceDeleteOnExit(dir);
+        // If this does not work, test will fail next time (assuming target is not cleaned)
     }
 
-    @Test
-    public void testWriteStringToFileWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+    // Test helper class to pretend a file is shorter than it is
+    private static class ShorterFile extends File {
+        private static final long serialVersionUID = 1L;
 
-        FileUtils.writeStringToFile(file, "this is brand new data", (String) null, false);
+        public ShorterFile(final String pathname) {
+            super(pathname);
+        }
 
-        final String expected = "this is brand new data";
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        @Override
+        public long length() {
+            return super.length() - 1;
+        }
     }
 
+    // This test relies on FileUtils.copyFile using File.length to check the output size
     @Test
-    public void testWriteStringToFileWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
-
-        FileUtils.writeStringToFile(file, "this is brand new data", (String) null, true);
+    public void testIncorrectOutputSize() throws Exception {
+        final File inFile = new File("pom.xml");
+        final File outFile = new ShorterFile("target/pom.tmp"); // it will report a shorter file
+        try {
+            FileUtils.copyFile(inFile, outFile);
+            fail("Expected IOException");
+        } catch (final Exception e) {
+            final String msg = e.toString();
+            assertTrue(msg.contains("Failed to copy full contents"), msg);
+        } finally {
+            outFile.delete(); // tidy up
+        }
+    }
 
-        final String expected = "This line was there before you..."
-                + "this is brand new data";
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+    private void backDateFile10Minutes(final File testFile) throws IOException {
+        final long mins10 = 1000 * 60 * 10;
+        final long lastModified1 = getLastModifiedMillis(testFile);
+        assertTrue(setLastModifiedMillis(testFile, lastModified1 - mins10));
+        // ensure it was changed
+        assertNotEquals(getLastModifiedMillis(testFile), lastModified1, "Should have changed source date");
     }
 
-    @Test
-    public void testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+    private boolean setLastModifiedMillis(final File testFile, final long millis) {
+        return testFile.setLastModified(millis);
+//        try {
+//            Files.setLastModifiedTime(testFile.toPath(), FileTime.fromMillis(millis));
+//        } catch (IOException e) {
+//            return false;
+//        }
+//        return true;
+    }
 
-        FileUtils.write(file, "this is brand new data", (String) null, false);
+    /**
+     * DirectoryWalker implementation that recursively lists all files and directories.
+     */
+    static class ListDirectoryWalker extends DirectoryWalker<File> {
 
-        final String expected = "this is brand new data";
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
-    }
+        ListDirectoryWalker() {
+            super();
+        }
 
-    @Test
-    public void testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines() throws Exception {
-        final File file = TestUtils.newFile(temporaryFolder, "lines.txt");
-        FileUtils.writeStringToFile(file, "This line was there before you...");
+        List<File> list(final File startDirectory) throws IOException {
+            final ArrayList<File> files = new ArrayList<>();
+            walk(startDirectory, files);
+            return files;
+        }
 
-        FileUtils.write(file, "this is brand new data", (String) null, true);
+        @Override
+        protected void handleDirectoryStart(final File directory, final int depth, final Collection<File> results) throws IOException {
+            // Add all directories except the starting directory
+            if (depth > 0) {
+                results.add(directory);
+            }
+        }
 
-        final String expected = "This line was there before you..."
-                + "this is brand new data";
-        final String actual = FileUtils.readFileToString(file);
-        assertEquals(expected, actual);
+        @Override
+        protected void handleFile(final File file, final int depth, final Collection<File> results) throws IOException {
+            results.add(file);
+        }
     }
 
 }
diff --git a/src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java b/src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java
index 1146acca..29527362 100644
--- a/src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java
+++ b/src/test/java/org/apache/commons/io/file/DirectoryStreamFilterTest.java
@@ -45,7 +45,7 @@ public class DirectoryStreamFilterTest {
         final PathFilter pathFilter = new NameFileFilter(PATH_FIXTURE);
         final DirectoryStreamFilter streamFilter = new DirectoryStreamFilter(pathFilter);
         assertEquals(pathFilter, streamFilter.getPathFilter());
-        try (final DirectoryStream<Path> stream = Files.newDirectoryStream(PathUtils.current(), streamFilter)) {
+        try (final DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get("."), streamFilter)) {
             final Iterator<Path> iterator = stream.iterator();
             final Path path = iterator.next();
             assertEquals(PATH_FIXTURE, path.getFileName().toString());
@@ -58,7 +58,7 @@ public class DirectoryStreamFilterTest {
         final PathFilter pathFilter = new NameFileFilter(PATH_FIXTURE).negate();
         final DirectoryStreamFilter streamFilter = new DirectoryStreamFilter(pathFilter);
         assertEquals(pathFilter, streamFilter.getPathFilter());
-        try (final DirectoryStream<Path> stream = Files.newDirectoryStream(PathUtils.current(), streamFilter)) {
+        try (final DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get("."), streamFilter)) {
             for (final Path path : stream) {
                 assertNotEquals(PATH_FIXTURE, path.getFileName().toString());
             }
diff --git a/src/test/java/org/apache/commons/io/file/PathUtilsTest.java b/src/test/java/org/apache/commons/io/file/PathUtilsTest.java
index 4103aecf..c76c5d22 100644
--- a/src/test/java/org/apache/commons/io/file/PathUtilsTest.java
+++ b/src/test/java/org/apache/commons/io/file/PathUtilsTest.java
@@ -52,7 +52,7 @@ public class PathUtilsTest extends TestArguments {
     @Test
     public void testNewDirectoryStream() throws Exception {
         final PathFilter pathFilter = new NameFileFilter(PATH_FIXTURE);
-        try (final DirectoryStream<Path> stream = PathUtils.newDirectoryStream(PathUtils.current(), pathFilter)) {
+        try (final DirectoryStream<Path> stream = PathUtils.newDirectoryStream(Paths.get("."), pathFilter)) {
             final Iterator<Path> iterator = stream.iterator();
             final Path path = iterator.next();
             assertEquals(PATH_FIXTURE, path.getFileName().toString());
diff --git a/src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java b/src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java
index 3f941fe9..42c90a04 100644
--- a/src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java
+++ b/src/test/java/org/apache/commons/io/filefilter/AgeFileFilterTest.java
@@ -62,10 +62,10 @@ public class AgeFileFilterTest {
      */
     @Test
     public void testJavadocExampleUsingNio() throws IOException {
-        final Path dir = Paths.get("");
+        final Path dir = Paths.get(".");
         // We are interested in files older than one day
         final long cutoff = System.currentTimeMillis();
-        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new AgeFileFilter(cutoff), TrueFileFilter.INSTANCE);
+        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new AgeFileFilter(cutoff));
         //
         // Walk one dir
         Files.walkFileTree(dir, Collections.emptySet(), 1, visitor);
@@ -95,10 +95,10 @@ public class AgeFileFilterTest {
 
     @Test
     public void testNoCounting() throws IOException {
-        final Path dir = Paths.get("");
+        final Path dir = Paths.get(".");
         final long cutoff = System.currentTimeMillis();
         final AccumulatorPathVisitor visitor = new AccumulatorPathVisitor(Counters.noopPathCounters(),
-            new AgeFileFilter(cutoff), TrueFileFilter.INSTANCE);
+            new AgeFileFilter(cutoff));
         Files.walkFileTree(dir, Collections.emptySet(), 1, visitor);
         //
         CounterAssertions.assertZeroCounters(visitor.getPathCounters());
diff --git a/src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java b/src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java
index da0c5a89..f7512378 100644
--- a/src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java
+++ b/src/test/java/org/apache/commons/io/filefilter/DirectoryFileFilterTest.java
@@ -61,9 +61,8 @@ public class DirectoryFileFilterTest {
      */
     @Test
     public void testJavadocExampleUsingNio() throws IOException {
-        final Path dir = Paths.get("");
-        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(DirectoryFileFilter.INSTANCE,
-            TrueFileFilter.INSTANCE);
+        final Path dir = Paths.get(".");
+        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(DirectoryFileFilter.INSTANCE);
         //
         // Walk one dir
         Files.walkFileTree(dir, Collections.emptySet(), 1, visitor);
diff --git a/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java b/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java
index ca525b8f..8cabc14a 100644
--- a/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java
+++ b/src/test/java/org/apache/commons/io/filefilter/FileFilterTestCase.java
@@ -30,6 +30,7 @@ import java.io.File;
 import java.io.FileFilter;
 import java.io.FileOutputStream;
 import java.io.FilenameFilter;
+import java.io.IOException;
 import java.io.OutputStream;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.FileVisitResult;
@@ -68,7 +69,7 @@ public class FileFilterTestCase {
     @TempDir
     public File temporaryFolder;
 
-    void assertFiltering(final IOFileFilter filter, final File file, final boolean expected) {
+    public void assertFiltering(final IOFileFilter filter, final File file, final boolean expected) throws Exception {
         // Note. This only tests the (File, String) version if the parent of
         // the File passed in is not null
         assertEquals(expected, filter.accept(file),
@@ -84,10 +85,10 @@ public class FileFilterTestCase {
         assertNotNull(filter.toString());
     }
 
-    void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) {
+    public void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) throws Exception {
         // Note. This only tests the (Path, Path) version if the parent of
         // the File passed in is not null
-        final FileVisitResult expectedFileVisitResult = AbstractFileFilter.toFileVisitResult(expected, path);
+        final FileVisitResult expectedFileVisitResult = AbstractFileFilter.toFileVisitResult(expected);
         assertEquals(expectedFileVisitResult, filter.accept(path, null),
             "Filter(Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
 
@@ -111,7 +112,7 @@ public class FileFilterTestCase {
         final Path newPath = newFile.toPath();
 
         if (!oldFile.getParentFile().exists()) {
-            fail("Cannot create file " + oldFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + oldFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(oldFile))) {
             TestUtils.generateTestData(output1, 0);
@@ -124,7 +125,7 @@ public class FileFilterTestCase {
                 // ignore
             }
             if (!reference.getParentFile().exists()) {
-                fail("Cannot create file " + reference + " as the parent directory does not exist");
+                throw new IOException("Cannot create file " + reference + " as the parent directory does not exist");
             }
             try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(reference))) {
                 TestUtils.generateTestData(output, 0);
@@ -141,7 +142,7 @@ public class FileFilterTestCase {
                 // ignore
             }
             if (!newFile.getParentFile().exists()) {
-                fail("Cannot create file " + newFile + " as the parent directory does not exist");
+                throw new IOException("Cannot create file " + newFile + " as the parent directory does not exist");
             }
             try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(newFile))) {
                 TestUtils.generateTestData(output, 0);
@@ -198,7 +199,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testAnd() {
+    public void testAnd() throws Exception {
         final IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
         final IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
         assertFiltering(trueFilter.and(trueFilter), new File("foo.test"), true);
@@ -210,7 +211,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testAnd2() {
+    public void testAnd2() throws Exception {
         final IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
         final IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
         assertFiltering(new AndFileFilter(trueFilter, trueFilter), new File("foo.test"), true);
@@ -225,14 +226,14 @@ public class FileFilterTestCase {
         assertThrows(IllegalArgumentException.class, () -> new AndFileFilter(falseFilter, (IOFileFilter) null));
         assertThrows(IllegalArgumentException.class, () -> new AndFileFilter(null, falseFilter));
 
-        final AndFileFilter f = new AndFileFilter((List<IOFileFilter>) null);
+        final AndFileFilter f = new AndFileFilter((List) null);
         assertTrue(f.getFileFilters().isEmpty());
 
         assertNotNull(f.toString()); // TODO better tests
     }
 
     @Test
-    public void testAndArray() {
+    public void testAndArray() throws Exception {
         final IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
         final IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
         assertFiltering(new AndFileFilter(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
@@ -270,7 +271,7 @@ public class FileFilterTestCase {
         final File readOnlyFile = new File(temporaryFolder, "read-only-file1.txt");
         final Path readOnlyPath = readOnlyFile.toPath();
         if (!readOnlyFile.getParentFile().exists()) {
-            fail("Cannot create file " + readOnlyFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + readOnlyFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(readOnlyFile))) {
             TestUtils.generateTestData(output, 32);
@@ -290,7 +291,7 @@ public class FileFilterTestCase {
         final File readOnlyFile = new File(temporaryFolder, "read-only-file2.txt");
         final Path readOnlyPath = readOnlyFile.toPath();
         if (!readOnlyFile.getParentFile().exists()) {
-            fail("Cannot create file " + readOnlyFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + readOnlyFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(readOnlyFile))) {
             TestUtils.generateTestData(output, 32);
@@ -306,7 +307,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testDelegateFileFilter() {
+    public void testDelegateFileFilter() throws Exception {
         final OrFileFilter orFilter = new OrFileFilter();
         final File testFile = new File("test.txt");
 
@@ -340,7 +341,7 @@ public class FileFilterTestCase {
 
     @SuppressWarnings("deprecation")
     @Test
-    public void testDeprecatedWildcard() {
+    public void testDeprecatedWildcard() throws Exception {
         IOFileFilter filter = new WildcardFilter("*.txt");
         final List<String> patternList = Arrays.asList("*.txt", "*.xml", "*.gif");
         final IOFileFilter listFilter = new WildcardFilter(patternList);
@@ -431,7 +432,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testDirectory() {
+    public void testDirectory() throws Exception {
         // XXX: This test presumes the current working dir is the base dir of the source checkout.
         final IOFileFilter filter = new DirectoryFileFilter();
 
@@ -470,7 +471,7 @@ public class FileFilterTestCase {
         final File emptyFile = new File(emptyDirFile, "empty-file.txt");
         final Path emptyPath = emptyFile.toPath();
         if (!emptyFile.getParentFile().exists()) {
-            fail("Cannot create file " + emptyFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + emptyFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(emptyFile))) {
             TestUtils.generateTestData(output1, 0);
@@ -490,7 +491,7 @@ public class FileFilterTestCase {
         final File notEmptyFile = new File(emptyDirFile, "not-empty-file.txt");
         final Path notEmptyPath = notEmptyFile.toPath();
         if (!notEmptyFile.getParentFile().exists()) {
-            fail("Cannot create file " + notEmptyFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + notEmptyFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(notEmptyFile))) {
             TestUtils.generateTestData(output, 32);
@@ -508,7 +509,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testFalse() {
+    public void testFalse() throws Exception {
         final IOFileFilter filter = FileFilterUtils.falseFileFilter();
         assertFiltering(filter, new File("foo.test"), false);
         assertFiltering(filter, new File("foo.test").toPath(), false);
@@ -522,7 +523,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testFileFilterUtils_and() {
+    public void testFileFilterUtils_and() throws Exception {
         final IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
         final IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
         assertFiltering(FileFilterUtils.and(trueFilter, trueFilter, trueFilter), new File("foo.test"), true);
@@ -532,7 +533,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testFileFilterUtils_or() {
+    public void testFileFilterUtils_or() throws Exception {
         final IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
         final IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
         final File testFile = new File("foo.test");
@@ -543,9 +544,9 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testFiles() {
+    public void testFiles() throws Exception {
         // XXX: This test presumes the current working dir is the base dir of the source checkout.
-        final IOFileFilter filter = FileFileFilter.INSTANCE;
+        final IOFileFilter filter = FileFileFilter.FILE;
 
         assertFiltering(filter, new File("src/"), false);
         assertFiltering(filter, new File("src/").toPath(), false);
@@ -795,7 +796,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testHidden() {
+    public void testHidden() throws Exception {
         final File hiddenDirFile = new File(SVN_DIR_NAME);
         final Path hiddenDirPath = hiddenDirFile.toPath();
         if (hiddenDirFile.exists()) {
@@ -873,7 +874,7 @@ public class FileFilterTestCase {
         }
 
         if (!randomFileB.getParentFile().exists()) {
-            fail("Cannot create file " + randomFileB + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + randomFileB + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(randomFileB))) {
             TestUtils.generateTestData(output, 2 * tarMagicNumberOffset);
@@ -939,7 +940,7 @@ public class FileFilterTestCase {
         }
 
         if (!randomFileB.getParentFile().exists()) {
-            fail("Cannot create file " + randomFileB + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + randomFileB + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(randomFileB))) {
             TestUtils.generateTestData(output, 2 * tarMagicNumberOffset);
@@ -1013,7 +1014,7 @@ public class FileFilterTestCase {
 
         file = new File(temporaryFolder, "test-file1.txt");
         if (!file.getParentFile().exists()) {
-            fail("Cannot create file " + file + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(file))) {
             TestUtils.generateTestData(output2, 0);
@@ -1023,7 +1024,7 @@ public class FileFilterTestCase {
 
         file = new File(temporaryFolder, "test-file2.log");
         if (!file.getParentFile().exists()) {
-            fail("Cannot create file " + file + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(file))) {
             TestUtils.generateTestData(output1, 0);
@@ -1033,7 +1034,7 @@ public class FileFilterTestCase {
 
         file = new File(temporaryFolder, "CVS");
         if (!file.getParentFile().exists()) {
-            fail("Cannot create file " + file + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(file))) {
             TestUtils.generateTestData(output, 0);
@@ -1062,13 +1063,13 @@ public class FileFilterTestCase {
         FileUtils.deleteDirectory(fileB);
 
         if (!fileA.getParentFile().exists()) {
-            fail("Cannot create file " + fileA + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + fileA + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(fileA))) {
             TestUtils.generateTestData(output1, 32);
         }
         if (!fileB.getParentFile().exists()) {
-            fail("Cannot create file " + fileB + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + fileB + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(fileB))) {
             TestUtils.generateTestData(output, 32);
@@ -1084,7 +1085,7 @@ public class FileFilterTestCase {
     // -----------------------------------------------------------------------
     @Test
     public void testMakeFileOnly() throws Exception {
-        assertSame(FileFileFilter.INSTANCE, FileFilterUtils.makeFileOnly(null));
+        assertSame(FileFileFilter.FILE, FileFilterUtils.makeFileOnly(null));
 
         final IOFileFilter filter = FileFilterUtils.makeFileOnly(FileFilterUtils.nameFileFilter("B"));
 
@@ -1101,13 +1102,13 @@ public class FileFilterTestCase {
         FileUtils.deleteDirectory(fileB);
 
         if (!fileA.getParentFile().exists()) {
-            fail("Cannot create file " + fileA + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + fileA + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(fileA))) {
             TestUtils.generateTestData(output1, 32);
         }
         if (!fileB.getParentFile().exists()) {
-            fail("Cannot create file " + fileB + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + fileB + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(fileB))) {
             TestUtils.generateTestData(output, 32);
@@ -1133,7 +1134,7 @@ public class FileFilterTestCase {
 
         file = new File(temporaryFolder, "test-file1.txt");
         if (!file.getParentFile().exists()) {
-            fail("Cannot create file " + file + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output2 = new BufferedOutputStream(new FileOutputStream(file))) {
             TestUtils.generateTestData(output2, 0);
@@ -1143,7 +1144,7 @@ public class FileFilterTestCase {
 
         file = new File(temporaryFolder, "test-file2.log");
         if (!file.getParentFile().exists()) {
-            fail("Cannot create file " + file + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(file))) {
             TestUtils.generateTestData(output1, 0);
@@ -1153,7 +1154,7 @@ public class FileFilterTestCase {
 
         file = new File(temporaryFolder, SVN_DIR_NAME);
         if (!file.getParentFile().exists()) {
-            fail("Cannot create file " + file + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + file + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(file))) {
             TestUtils.generateTestData(output, 0);
@@ -1163,23 +1164,8 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testNameFilter() {
-        assertFooBarFileFiltering(new NameFileFilter(new String[] {"foo", "bar"}));
-    }
-
-    @Test
-    public void testFileEqualsFilter() {
-        assertFooBarFileFiltering(
-            new FileEqualsFileFilter(new File("foo")).or(new FileEqualsFileFilter(new File("bar"))));
-    }
-
-    @Test
-    public void testPathEqualsFilter() {
-        assertFooBarFileFiltering(
-            new PathEqualsFileFilter(Paths.get("foo")).or(new PathEqualsFileFilter(Paths.get("bar"))));
-    }
-
-    private void assertFooBarFileFiltering(IOFileFilter filter) {
+    public void testNameFilter() throws Exception {
+        IOFileFilter filter = new NameFileFilter(new String[] {"foo", "bar"});
         assertFiltering(filter, new File("foo"), true);
         assertFiltering(filter, new File("foo"), true);
         assertFiltering(filter, new File("bar"), true);
@@ -1268,7 +1254,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testNameFilterNullArgument() {
+    public void testNameFilterNullArgument() throws Exception {
         final String test = null;
         try {
             new NameFileFilter(test);
@@ -1295,7 +1281,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testNegate() {
+    public void testNegate() throws Exception {
         final IOFileFilter filter = FileFilterUtils.notFileFilter(FileFilterUtils.trueFileFilter());
         assertFiltering(filter, new File("foo.test"), false);
         assertFiltering(filter, new File("foo"), false);
@@ -1321,7 +1307,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testOr() {
+    public void testOr() throws Exception {
         final IOFileFilter trueFilter = TrueFileFilter.INSTANCE;
         final IOFileFilter falseFilter = FalseFileFilter.INSTANCE;
         final File testFile = new File("foo.test");
@@ -1375,7 +1361,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testPrefix() {
+    public void testPrefix() throws Exception {
         IOFileFilter filter = new PrefixFileFilter(new String[] {"foo", "bar"});
         final File testFile = new File("test");
         final Path testPath = testFile.toPath();
@@ -1447,7 +1433,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testPrefixCaseInsensitive() {
+    public void testPrefixCaseInsensitive() throws Exception {
 
         IOFileFilter filter = new PrefixFileFilter(new String[] {"foo", "bar"}, IOCase.INSENSITIVE);
         assertFiltering(filter, new File("foo.test1"), true);
@@ -1504,14 +1490,14 @@ public class FileFilterTestCase {
     public void testSizeFilterOnFiles() throws Exception {
         final File smallFile = new File(temporaryFolder, "small.txt");
         if (!smallFile.getParentFile().exists()) {
-            fail("Cannot create file " + smallFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + smallFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output1 = new BufferedOutputStream(new FileOutputStream(smallFile))) {
             TestUtils.generateTestData(output1, 32);
         }
         final File largeFile = new File(temporaryFolder, "large.txt");
         if (!largeFile.getParentFile().exists()) {
-            fail("Cannot create file " + largeFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + largeFile + " as the parent directory does not exist");
         }
         try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(largeFile))) {
             TestUtils.generateTestData(output, 128);
@@ -1556,14 +1542,14 @@ public class FileFilterTestCase {
     public void testSizeFilterOnPaths() throws Exception {
         final Path smallFile = Paths.get(temporaryFolder.toString(), "small.txt");
         if (!Files.exists(smallFile.getParent())) {
-            fail("Cannot create file " + smallFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + smallFile + " as the parent directory does not exist");
         }
         try (OutputStream output = Files.newOutputStream(smallFile)) {
             TestUtils.generateTestData(output, 32);
         }
         final Path largeFile = Paths.get(temporaryFolder.toString(), "large.txt");
         if (!Files.exists(largeFile.getParent())) {
-            fail("Cannot create file " + largeFile + " as the parent directory does not exist");
+            throw new IOException("Cannot create file " + largeFile + " as the parent directory does not exist");
         }
         try (OutputStream output = Files.newOutputStream(largeFile)) {
             TestUtils.generateTestData(output, 128);
@@ -1605,7 +1591,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testSuffix() {
+    public void testSuffix() throws Exception {
         IOFileFilter filter = new SuffixFileFilter(new String[] {"tes", "est"});
         final File testFile = new File("test");
         final Path testPath = testFile.toPath();
@@ -1673,7 +1659,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testSuffixCaseInsensitive() {
+    public void testSuffixCaseInsensitive() throws Exception {
 
         IOFileFilter filter = new SuffixFileFilter(new String[] {"tes", "est"}, IOCase.INSENSITIVE);
         assertFiltering(filter, new File("foo.tes"), true);
@@ -1725,7 +1711,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testTrue() {
+    public void testTrue() throws Exception {
         final IOFileFilter filter = FileFilterUtils.trueFileFilter();
         assertFiltering(filter, new File("foo.test"), true);
         assertFiltering(filter, new File("foo"), true);
@@ -1741,7 +1727,7 @@ public class FileFilterTestCase {
     }
 
     @Test
-    public void testWildcard() {
+    public void testWildcard() throws Exception {
         IOFileFilter filter = new WildcardFileFilter("*.txt");
         assertFiltering(filter, new File("log.txt"), true);
         assertFiltering(filter, new File("log.TXT"), false);
diff --git a/src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java b/src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java
index 11c6119c..81402b04 100644
--- a/src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java
+++ b/src/test/java/org/apache/commons/io/filefilter/NameFileFilterTest.java
@@ -61,10 +61,10 @@ public class NameFileFilterTest {
      */
     @Test
     public void testJavadocExampleUsingNio() throws IOException {
-        final Path dir = Paths.get("");
+        final Path dir = Paths.get(".");
         // We are interested in files older than one day
-        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new NameFileFilter("NOTICE.txt"),
-            TrueFileFilter.INSTANCE);
+        final AccumulatorPathVisitor visitor = AccumulatorPathVisitor
+            .withLongCounters(new NameFileFilter("NOTICE.txt"));
         //
         // Walk one dir
         Files.walkFileTree(dir, Collections.emptySet(), 1, visitor);
@@ -101,9 +101,9 @@ public class NameFileFilterTest {
 
     @Test
     public void testNoCounting() throws IOException {
-        final Path dir = Paths.get("");
+        final Path dir = Paths.get(".");
         final AccumulatorPathVisitor visitor = new AccumulatorPathVisitor(Counters.noopPathCounters(),
-            new NameFileFilter("NOTICE.txt"), TrueFileFilter.INSTANCE);
+            new NameFileFilter("NOTICE.txt"));
         Files.walkFileTree(dir, Collections.emptySet(), 1, visitor);
         //
         CounterAssertions.assertZeroCounters(visitor.getPathCounters());
diff --git a/src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java b/src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java
index b508c7ae..6c2822b0 100644
--- a/src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java
+++ b/src/test/java/org/apache/commons/io/filefilter/RegexFileFilterTestCase.java
@@ -50,7 +50,7 @@ public class RegexFileFilterTestCase {
     public void assertFiltering(final IOFileFilter filter, final Path path, final boolean expected) throws Exception {
         // Note. This only tests the (Path, Path) version if the parent of
         // the Path passed in is not null
-        final FileVisitResult expectedFileVisitResult = AbstractFileFilter.toFileVisitResult(expected, path);
+        final FileVisitResult expectedFileVisitResult = AbstractFileFilter.toFileVisitResult(expected);
         assertEquals(expectedFileVisitResult, filter.accept(path, null),
             "Filter(Path) " + filter.getClass().getName() + " not " + expectedFileVisitResult + " for " + path);
 
diff --git a/src/test/java/org/apache/commons/io/test/TestUtils.java b/src/test/java/org/apache/commons/io/test/TestUtils.java
index ad9ef1d2..01f3ff66 100644
--- a/src/test/java/org/apache/commons/io/test/TestUtils.java
+++ b/src/test/java/org/apache/commons/io/test/TestUtils.java
@@ -23,7 +23,6 @@ import static org.junit.jupiter.api.Assertions.fail;
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.FileReader;
 import java.io.IOException;
@@ -170,12 +169,6 @@ public abstract class TestUtils {
         }
     }
 
-    public static void generateTestData(final File file, final long size) throws IOException, FileNotFoundException {
-        try (final BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream(file))) {
-            generateTestData(output, size);
-        }
-    }
-
     public static byte[] generateTestData(final long size) {
         try {
             try (final ByteArrayOutputStream baout = new ByteArrayOutputStream()) {
@@ -183,14 +176,15 @@ public abstract class TestUtils {
                 return baout.toByteArray();
             }
         } catch (final IOException ioe) {
-            throw new IllegalStateException("This should never happen: " + ioe.getMessage(), ioe);
+            throw new RuntimeException("This should never happen: " + ioe.getMessage());
         }
     }
 
     public static void generateTestData(final OutputStream out, final long size)
             throws IOException {
         for (int i = 0; i < size; i++) {
-            // output.write((byte)'X');
+            //output.write((byte)'X');
+
             // nice varied byte pattern compatible with Readers and Writers
             out.write((byte) ((i % 127) + 1));
         }
