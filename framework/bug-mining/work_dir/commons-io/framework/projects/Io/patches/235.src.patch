diff --git a/src/main/java/org/apache/commons/io/input/CircularInputStream.java b/src/main/java/org/apache/commons/io/input/CircularInputStream.java
deleted file mode 100644
index 5166b381..00000000
--- a/src/main/java/org/apache/commons/io/input/CircularInputStream.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.io.input;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Objects;
-
-import org.apache.commons.io.IOUtils;
-
-/**
- *
- * An {@link InputStream} that repeats provided bytes for given target byte count.
- * <p>
- * Closing this input stream has no effect. The methods in this class can be called after the stream has been closed
- * without generating an {@link IOException}.
- * </p>
- *
- * @see InfiniteCircularInputStream
- * @since 2.8
- */
-public class CircularInputStream extends InputStream {
-
-    /**
-     * Throws an {@link IllegalArgumentException} if the input contains -1.
-     *
-     * @param repeatContent input to validate.
-     * @return the input.
-     */
-    private static byte[] validate(final byte[] repeatContent) {
-        Objects.requireNonNull(repeatContent, "repeatContent");
-        for (final byte b : repeatContent) {
-            if (b == IOUtils.EOF) {
-                throw new IllegalArgumentException("repeatContent contains the end-of-stream marker " + IOUtils.EOF);
-            }
-        }
-        return repeatContent;
-    }
-    private long byteCount;
-    private int position = -1;
-    private final byte[] repeatedContent;
-    private final long targetByteCount;
-
-    /**
-     * Creates an instance from the specified array of bytes.
-     *
-     * @param repeatContent Input buffer to be repeated this buffer is not copied.
-     * @param targetByteCount How many bytes the read. A negative number means an infinite target count.
-     */
-    public CircularInputStream(final byte[] repeatContent, final long targetByteCount) {
-        this.repeatedContent = validate(repeatContent);
-        if (repeatContent.length == 0) {
-            throw new IllegalArgumentException("repeatContent is empty.");
-        }
-        this.targetByteCount = targetByteCount;
-    }
-
-    @Override
-    public int read() {
-        if (repeatedContent.length == 0) {
-            return IOUtils.EOF;
-        }
-        if (targetByteCount >= 0) {
-            if (byteCount == targetByteCount) {
-                return IOUtils.EOF;
-            }
-            byteCount++;
-        }
-        position = (position + 1) % repeatedContent.length;
-        return repeatedContent[position] & 0xff;
-    }
-
-}
diff --git a/src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java b/src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java
index 0514c7e4..70a564cd 100644
--- a/src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/InfiniteCircularInputStream.java
@@ -16,29 +16,37 @@
  */
 package org.apache.commons.io.input;
 
-import java.io.IOException;
 import java.io.InputStream;
 
 /**
  *
- * An {@link InputStream} that infinitely repeats the provided bytes.
+ * An {@link InputStream} that infinitely repeats provided bytes.
  * <p>
- * Closing this input stream has no effect. The methods in this class can be called after the stream has been closed
- * without generating an {@link IOException}.
+ * Closing a <code>InfiniteCircularInputStream</code> has no effect. The methods in
+ * this class can be called after the stream has been closed without generating
+ * an <code>IOException</code>.
  * </p>
- *
  * @since 2.6
  */
-public class InfiniteCircularInputStream extends CircularInputStream {
+public class InfiniteCircularInputStream extends InputStream {
+
+    final private byte[] repeatedContent;
+    private int position = -1;
 
     /**
-     * Creates an instance from the specified array of bytes.
+     * Creates a InfiniteCircularStream from the specified array of chars.
      *
-     * @param repeatContent Input buffer to be repeated this buffer is not copied.
+     * @param repeatedContent
+     *            Input buffer to be repeated (not copied)
      */
-    public InfiniteCircularInputStream(final byte[] repeatContent) {
-        // A negative number means an infinite target count.
-        super(repeatContent, -1);
+    public InfiniteCircularInputStream(final byte[] repeatedContent) {
+        this.repeatedContent = repeatedContent;
+    }
+
+    @Override
+    public int read() {
+        position = (position + 1) % repeatedContent.length;
+        return repeatedContent[position] & 0xff;
     }
 
 }
