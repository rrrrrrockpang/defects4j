diff --git a/src/main/java/org/apache/commons/io/Charsets.java b/src/main/java/org/apache/commons/io/Charsets.java
index 6ea363e9..27a11aba 100644
--- a/src/main/java/org/apache/commons/io/Charsets.java
+++ b/src/main/java/org/apache/commons/io/Charsets.java
@@ -34,17 +34,17 @@ import java.util.TreeMap;
  * </p>
  * 
  * <ul>
- * <li><code>US-ASCII</code><br>
+ * <li><code>US-ASCII</code><br/>
  * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>
- * <li><code>ISO-8859-1</code><br>
+ * <li><code>ISO-8859-1</code><br/>
  * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</li>
- * <li><code>UTF-8</code><br>
+ * <li><code>UTF-8</code><br/>
  * Eight-bit Unicode Transformation Format.</li>
- * <li><code>UTF-16BE</code><br>
+ * <li><code>UTF-16BE</code><br/>
  * Sixteen-bit Unicode Transformation Format, big-endian byte order.</li>
- * <li><code>UTF-16LE</code><br>
+ * <li><code>UTF-16LE</code><br/>
  * Sixteen-bit Unicode Transformation Format, little-endian byte order.</li>
- * <li><code>UTF-16</code><br>
+ * <li><code>UTF-16</code><br/>
  * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order
  * accepted on input, big-endian used on output.)</li>
  * </ul>
@@ -109,7 +109,7 @@ public class Charsets {
     }
 
     /**
-     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.
+     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1. </p>
      * <p>
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
diff --git a/src/main/java/org/apache/commons/io/CopyUtils.java b/src/main/java/org/apache/commons/io/CopyUtils.java
index b58755e6..db3b6e91 100644
--- a/src/main/java/org/apache/commons/io/CopyUtils.java
+++ b/src/main/java/org/apache/commons/io/CopyUtils.java
@@ -49,7 +49,7 @@ import java.nio.charset.Charset;
  * to be selected (otherwise the platform default is used). We would like to
  * encourage you to always specify the encoding because relying on the platform
  * default can lead to unexpected results.
- * <p>
+ * <p
  * We don't provide special variants for the <code>copy</code> methods that
  * let you specify the buffer size because in modern VMs the impact on speed
  * seems to be minimal. We're using a default buffer size of 4 KB.
diff --git a/src/main/java/org/apache/commons/io/FileDeleteStrategy.java b/src/main/java/org/apache/commons/io/FileDeleteStrategy.java
index edf9381b..b68da093 100644
--- a/src/main/java/org/apache/commons/io/FileDeleteStrategy.java
+++ b/src/main/java/org/apache/commons/io/FileDeleteStrategy.java
@@ -139,7 +139,7 @@ public class FileDeleteStrategy {
         /**
          * Deletes the file object.
          * <p>
-         * This implementation uses <code>FileUtils.forceDelete()</code>
+         * This implementation uses <code>FileUtils.forceDelete() <code>
          * if the file exists.
          *
          * @param fileToDelete  the file to delete, not null
diff --git a/src/main/java/org/apache/commons/io/FileUtils.java b/src/main/java/org/apache/commons/io/FileUtils.java
index 113a05cd..74e3da0f 100644
--- a/src/main/java/org/apache/commons/io/FileUtils.java
+++ b/src/main/java/org/apache/commons/io/FileUtils.java
@@ -1292,13 +1292,13 @@ public class FileUtils {
      * it is not guaranteed that those operations will succeed.
      * If the modification operation fails, no indication is provided.
      *
-     * <h3>Example: Copy directories only</h3>
+     * <h4>Example: Copy directories only</h4>
      *  <pre>
      *  // only copy the directory structure
      *  FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY);
      *  </pre>
      *
-     * <h3>Example: Copy directories and txt files</h3>
+     * <h4>Example: Copy directories and txt files</h4>
      *  <pre>
      *  // Create a filter for ".txt" files
      *  IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(".txt");
@@ -1342,13 +1342,13 @@ public class FileUtils {
      * not guaranteed that those operations will succeed.
      * If the modification operation fails, no indication is provided.
      *
-     * <h3>Example: Copy directories only</h3>
+     * <h4>Example: Copy directories only</h4>
      *  <pre>
      *  // only copy the directory structure
      *  FileUtils.copyDirectory(srcDir, destDir, DirectoryFileFilter.DIRECTORY, false);
      *  </pre>
      *
-     * <h3>Example: Copy directories and txt files</h3>
+     * <h4>Example: Copy directories and txt files</h4>
      *  <pre>
      *  // Create a filter for ".txt" files
      *  IOFileFilter txtSuffixFilter = FileFilterUtils.suffixFileFilter(".txt");
diff --git a/src/main/java/org/apache/commons/io/FilenameUtils.java b/src/main/java/org/apache/commons/io/FilenameUtils.java
index c589496d..27baea35 100644
--- a/src/main/java/org/apache/commons/io/FilenameUtils.java
+++ b/src/main/java/org/apache/commons/io/FilenameUtils.java
@@ -58,19 +58,19 @@ import java.util.Stack;
  * Prefixes are matched as follows:
  * <pre>
  * Windows:
- * a\b\c.txt           --&gt; ""          --&gt; relative
- * \a\b\c.txt          --&gt; "\"         --&gt; current drive absolute
- * C:a\b\c.txt         --&gt; "C:"        --&gt; drive relative
- * C:\a\b\c.txt        --&gt; "C:\"       --&gt; absolute
- * \\server\a\b\c.txt  --&gt; "\\server\" --&gt; UNC
+ * a\b\c.txt           --> ""          --> relative
+ * \a\b\c.txt          --> "\"         --> current drive absolute
+ * C:a\b\c.txt         --> "C:"        --> drive relative
+ * C:\a\b\c.txt        --> "C:\"       --> absolute
+ * \\server\a\b\c.txt  --> "\\server\" --> UNC
  *
  * Unix:
- * a/b/c.txt           --&gt; ""          --&gt; relative
- * /a/b/c.txt          --&gt; "/"         --&gt; absolute
- * ~/a/b/c.txt         --&gt; "~/"        --&gt; current user
- * ~                   --&gt; "~/"        --&gt; current user (slash added)
- * ~user/a/b/c.txt     --&gt; "~user/"    --&gt; named user
- * ~user               --&gt; "~user/"    --&gt; named user (slash added)
+ * a/b/c.txt           --> ""          --> relative
+ * /a/b/c.txt          --> "/"         --> absolute
+ * ~/a/b/c.txt         --> "~/"        --> current user
+ * ~                   --> "~/"        --> current user (slash added)
+ * ~user/a/b/c.txt     --> "~user/"    --> named user
+ * ~user               --> "~user/"    --> named user (slash added)
  * </pre>
  * Both prefix styles are matched always, irrespective of the machine that you are
  * currently running on.
@@ -167,23 +167,23 @@ public class FilenameUtils {
      * The output will be the same on both Unix and Windows except
      * for the separator character.
      * <pre>
-     * /foo//               --&gt;   /foo/
-     * /foo/./              --&gt;   /foo/
-     * /foo/../bar          --&gt;   /bar
-     * /foo/../bar/         --&gt;   /bar/
-     * /foo/../bar/../baz   --&gt;   /baz
-     * //foo//./bar         --&gt;   /foo/bar
-     * /../                 --&gt;   null
-     * ../foo               --&gt;   null
-     * foo/bar/..           --&gt;   foo/
-     * foo/../../bar        --&gt;   null
-     * foo/../bar           --&gt;   bar
-     * //server/foo/../bar  --&gt;   //server/bar
-     * //server/../bar      --&gt;   null
-     * C:\foo\..\bar        --&gt;   C:\bar
-     * C:\..\bar            --&gt;   null
-     * ~/foo/../bar/        --&gt;   ~/bar/
-     * ~/../bar             --&gt;   null
+     * /foo//               -->   /foo/
+     * /foo/./              -->   /foo/
+     * /foo/../bar          -->   /bar
+     * /foo/../bar/         -->   /bar/
+     * /foo/../bar/../baz   -->   /baz
+     * //foo//./bar         -->   /foo/bar
+     * /../                 -->   null
+     * ../foo               -->   null
+     * foo/bar/..           -->   foo/
+     * foo/../../bar        -->   null
+     * foo/../bar           -->   bar
+     * //server/foo/../bar  -->   //server/bar
+     * //server/../bar      -->   null
+     * C:\foo\..\bar        -->   C:\bar
+     * C:\..\bar            -->   null
+     * ~/foo/../bar/        -->   ~/bar/
+     * ~/../bar             -->   null
      * </pre>
      * (Note the file separator returned will be correct for Windows/Unix)
      *
@@ -210,23 +210,23 @@ public class FilenameUtils {
      * The output will be the same on both Unix and Windows except
      * for the separator character.
      * <pre>
-     * /foo//               --&gt;   /foo/
-     * /foo/./              --&gt;   /foo/
-     * /foo/../bar          --&gt;   /bar
-     * /foo/../bar/         --&gt;   /bar/
-     * /foo/../bar/../baz   --&gt;   /baz
-     * //foo//./bar         --&gt;   /foo/bar
-     * /../                 --&gt;   null
-     * ../foo               --&gt;   null
-     * foo/bar/..           --&gt;   foo/
-     * foo/../../bar        --&gt;   null
-     * foo/../bar           --&gt;   bar
-     * //server/foo/../bar  --&gt;   //server/bar
-     * //server/../bar      --&gt;   null
-     * C:\foo\..\bar        --&gt;   C:\bar
-     * C:\..\bar            --&gt;   null
-     * ~/foo/../bar/        --&gt;   ~/bar/
-     * ~/../bar             --&gt;   null
+     * /foo//               -->   /foo/
+     * /foo/./              -->   /foo/
+     * /foo/../bar          -->   /bar
+     * /foo/../bar/         -->   /bar/
+     * /foo/../bar/../baz   -->   /baz
+     * //foo//./bar         -->   /foo/bar
+     * /../                 -->   null
+     * ../foo               -->   null
+     * foo/bar/..           -->   foo/
+     * foo/../../bar        -->   null
+     * foo/../bar           -->   bar
+     * //server/foo/../bar  -->   //server/bar
+     * //server/../bar      -->   null
+     * C:\foo\..\bar        -->   C:\bar
+     * C:\..\bar            -->   null
+     * ~/foo/../bar/        -->   ~/bar/
+     * ~/../bar             -->   null
      * </pre>
      * The output will be the same on both Unix and Windows including
      * the separator character.
@@ -261,23 +261,23 @@ public class FilenameUtils {
      * The output will be the same on both Unix and Windows except
      * for the separator character.
      * <pre>
-     * /foo//               --&gt;   /foo
-     * /foo/./              --&gt;   /foo
-     * /foo/../bar          --&gt;   /bar
-     * /foo/../bar/         --&gt;   /bar
-     * /foo/../bar/../baz   --&gt;   /baz
-     * //foo//./bar         --&gt;   /foo/bar
-     * /../                 --&gt;   null
-     * ../foo               --&gt;   null
-     * foo/bar/..           --&gt;   foo
-     * foo/../../bar        --&gt;   null
-     * foo/../bar           --&gt;   bar
-     * //server/foo/../bar  --&gt;   //server/bar
-     * //server/../bar      --&gt;   null
-     * C:\foo\..\bar        --&gt;   C:\bar
-     * C:\..\bar            --&gt;   null
-     * ~/foo/../bar/        --&gt;   ~/bar
-     * ~/../bar             --&gt;   null
+     * /foo//               -->   /foo
+     * /foo/./              -->   /foo
+     * /foo/../bar          -->   /bar
+     * /foo/../bar/         -->   /bar
+     * /foo/../bar/../baz   -->   /baz
+     * //foo//./bar         -->   /foo/bar
+     * /../                 -->   null
+     * ../foo               -->   null
+     * foo/bar/..           -->   foo
+     * foo/../../bar        -->   null
+     * foo/../bar           -->   bar
+     * //server/foo/../bar  -->   //server/bar
+     * //server/../bar      -->   null
+     * C:\foo\..\bar        -->   C:\bar
+     * C:\..\bar            -->   null
+     * ~/foo/../bar/        -->   ~/bar
+     * ~/../bar             -->   null
      * </pre>
      * (Note the file separator returned will be correct for Windows/Unix)
      *
@@ -306,23 +306,23 @@ public class FilenameUtils {
      * The output will be the same on both Unix and Windows including
      * the separator character.
      * <pre>
-     * /foo//               --&gt;   /foo
-     * /foo/./              --&gt;   /foo
-     * /foo/../bar          --&gt;   /bar
-     * /foo/../bar/         --&gt;   /bar
-     * /foo/../bar/../baz   --&gt;   /baz
-     * //foo//./bar         --&gt;   /foo/bar
-     * /../                 --&gt;   null
-     * ../foo               --&gt;   null
-     * foo/bar/..           --&gt;   foo
-     * foo/../../bar        --&gt;   null
-     * foo/../bar           --&gt;   bar
-     * //server/foo/../bar  --&gt;   //server/bar
-     * //server/../bar      --&gt;   null
-     * C:\foo\..\bar        --&gt;   C:\bar
-     * C:\..\bar            --&gt;   null
-     * ~/foo/../bar/        --&gt;   ~/bar
-     * ~/../bar             --&gt;   null
+     * /foo//               -->   /foo
+     * /foo/./              -->   /foo
+     * /foo/../bar          -->   /bar
+     * /foo/../bar/         -->   /bar
+     * /foo/../bar/../baz   -->   /baz
+     * //foo//./bar         -->   /foo/bar
+     * /../                 -->   null
+     * ../foo               -->   null
+     * foo/bar/..           -->   foo
+     * foo/../../bar        -->   null
+     * foo/../bar           -->   bar
+     * //server/foo/../bar  -->   //server/bar
+     * //server/../bar      -->   null
+     * C:\foo\..\bar        -->   C:\bar
+     * C:\..\bar            -->   null
+     * ~/foo/../bar/        -->   ~/bar
+     * ~/../bar             -->   null
      * </pre>
      *
      * @param filename  the filename to normalize, null returns null
@@ -456,17 +456,17 @@ public class FilenameUtils {
      * The output will be the same on both Unix and Windows except
      * for the separator character.
      * <pre>
-     * /foo/ + bar          --&gt;   /foo/bar
-     * /foo + bar           --&gt;   /foo/bar
-     * /foo + /bar          --&gt;   /bar
-     * /foo + C:/bar        --&gt;   C:/bar
-     * /foo + C:bar         --&gt;   C:bar (*)
-     * /foo/a/ + ../bar     --&gt;   foo/bar
-     * /foo/ + ../../bar    --&gt;   null
-     * /foo/ + /bar         --&gt;   /bar
-     * /foo/.. + /bar       --&gt;   /bar
-     * /foo + bar/c.txt     --&gt;   /foo/bar/c.txt
-     * /foo/c.txt + bar     --&gt;   /foo/c.txt/bar (!)
+     * /foo/ + bar          -->   /foo/bar
+     * /foo + bar           -->   /foo/bar
+     * /foo + /bar          -->   /bar
+     * /foo + C:/bar        -->   C:/bar
+     * /foo + C:bar         -->   C:bar (*)
+     * /foo/a/ + ../bar     -->   foo/bar
+     * /foo/ + ../../bar    -->   null
+     * /foo/ + /bar         -->   /bar
+     * /foo/.. + /bar       -->   /bar
+     * /foo + bar/c.txt     -->   /foo/bar/c.txt
+     * /foo/c.txt + bar     -->   /foo/c.txt/bar (!)
      * </pre>
      * (*) Note that the Windows relative drive prefix is unreliable when
      * used with this method.
@@ -598,22 +598,22 @@ public class FilenameUtils {
      * than the length of the input string.
      * <pre>
      * Windows:
-     * a\b\c.txt           --&gt; ""          --&gt; relative
-     * \a\b\c.txt          --&gt; "\"         --&gt; current drive absolute
-     * C:a\b\c.txt         --&gt; "C:"        --&gt; drive relative
-     * C:\a\b\c.txt        --&gt; "C:\"       --&gt; absolute
-     * \\server\a\b\c.txt  --&gt; "\\server\" --&gt; UNC
-     * \\\a\b\c.txt        --&gt;  error, length = -1
+     * a\b\c.txt           --> ""          --> relative
+     * \a\b\c.txt          --> "\"         --> current drive absolute
+     * C:a\b\c.txt         --> "C:"        --> drive relative
+     * C:\a\b\c.txt        --> "C:\"       --> absolute
+     * \\server\a\b\c.txt  --> "\\server\" --> UNC
+     * \\\a\b\c.txt        -->  error, length = -1
      *
      * Unix:
-     * a/b/c.txt           --&gt; ""          --&gt; relative
-     * /a/b/c.txt          --&gt; "/"         --&gt; absolute
-     * ~/a/b/c.txt         --&gt; "~/"        --&gt; current user
-     * ~                   --&gt; "~/"        --&gt; current user (slash added)
-     * ~user/a/b/c.txt     --&gt; "~user/"    --&gt; named user
-     * ~user               --&gt; "~user/"    --&gt; named user (slash added)
-     * //server/a/b/c.txt  --&gt; "//server/"
-     * ///a/b/c.txt        --&gt; error, length = -1
+     * a/b/c.txt           --> ""          --> relative
+     * /a/b/c.txt          --> "/"         --> absolute
+     * ~/a/b/c.txt         --> "~/"        --> current user
+     * ~                   --> "~/"        --> current user (slash added)
+     * ~user/a/b/c.txt     --> "~user/"    --> named user
+     * ~user               --> "~user/"    --> named user (slash added)
+     * //server/a/b/c.txt  --> "//server/"
+     * ///a/b/c.txt        --> error, length = -1
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -732,19 +732,19 @@ public class FilenameUtils {
      * The prefix includes the first slash in the full filename where applicable.
      * <pre>
      * Windows:
-     * a\b\c.txt           --&gt; ""          --&gt; relative
-     * \a\b\c.txt          --&gt; "\"         --&gt; current drive absolute
-     * C:a\b\c.txt         --&gt; "C:"        --&gt; drive relative
-     * C:\a\b\c.txt        --&gt; "C:\"       --&gt; absolute
-     * \\server\a\b\c.txt  --&gt; "\\server\" --&gt; UNC
+     * a\b\c.txt           --> ""          --> relative
+     * \a\b\c.txt          --> "\"         --> current drive absolute
+     * C:a\b\c.txt         --> "C:"        --> drive relative
+     * C:\a\b\c.txt        --> "C:\"       --> absolute
+     * \\server\a\b\c.txt  --> "\\server\" --> UNC
      *
      * Unix:
-     * a/b/c.txt           --&gt; ""          --&gt; relative
-     * /a/b/c.txt          --&gt; "/"         --&gt; absolute
-     * ~/a/b/c.txt         --&gt; "~/"        --&gt; current user
-     * ~                   --&gt; "~/"        --&gt; current user (slash added)
-     * ~user/a/b/c.txt     --&gt; "~user/"    --&gt; named user
-     * ~user               --&gt; "~user/"    --&gt; named user (slash added)
+     * a/b/c.txt           --> ""          --> relative
+     * /a/b/c.txt          --> "/"         --> absolute
+     * ~/a/b/c.txt         --> "~/"        --> current user
+     * ~                   --> "~/"        --> current user (slash added)
+     * ~user/a/b/c.txt     --> "~user/"    --> named user
+     * ~user               --> "~user/"    --> named user (slash added)
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -774,11 +774,11 @@ public class FilenameUtils {
      * The method is entirely text based, and returns the text before and
      * including the last forward or backslash.
      * <pre>
-     * C:\a\b\c.txt --&gt; a\b\
-     * ~/a/b/c.txt  --&gt; a/b/
-     * a.txt        --&gt; ""
-     * a/b/c        --&gt; a/b/
-     * a/b/c/       --&gt; a/b/c/
+     * C:\a\b\c.txt --> a\b\
+     * ~/a/b/c.txt  --> a/b/
+     * a.txt        --> ""
+     * a/b/c        --> a/b/
+     * a/b/c/       --> a/b/c/
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -801,11 +801,11 @@ public class FilenameUtils {
      * The method is entirely text based, and returns the text before the
      * last forward or backslash.
      * <pre>
-     * C:\a\b\c.txt --&gt; a\b
-     * ~/a/b/c.txt  --&gt; a/b
-     * a.txt        --&gt; ""
-     * a/b/c        --&gt; a/b
-     * a/b/c/       --&gt; a/b/c
+     * C:\a\b\c.txt --> a\b
+     * ~/a/b/c.txt  --> a/b
+     * a.txt        --> ""
+     * a/b/c        --> a/b
+     * a/b/c/       --> a/b/c
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -850,17 +850,17 @@ public class FilenameUtils {
      * The method is entirely text based, and returns the text before and
      * including the last forward or backslash.
      * <pre>
-     * C:\a\b\c.txt --&gt; C:\a\b\
-     * ~/a/b/c.txt  --&gt; ~/a/b/
-     * a.txt        --&gt; ""
-     * a/b/c        --&gt; a/b/
-     * a/b/c/       --&gt; a/b/c/
-     * C:           --&gt; C:
-     * C:\          --&gt; C:\
-     * ~            --&gt; ~/
-     * ~/           --&gt; ~/
-     * ~user        --&gt; ~user/
-     * ~user/       --&gt; ~user/
+     * C:\a\b\c.txt --> C:\a\b\
+     * ~/a/b/c.txt  --> ~/a/b/
+     * a.txt        --> ""
+     * a/b/c        --> a/b/
+     * a/b/c/       --> a/b/c/
+     * C:           --> C:
+     * C:\          --> C:\
+     * ~            --> ~/
+     * ~/           --> ~/
+     * ~user        --> ~user/
+     * ~user/       --> ~user/
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -880,17 +880,17 @@ public class FilenameUtils {
      * The method is entirely text based, and returns the text before the
      * last forward or backslash.
      * <pre>
-     * C:\a\b\c.txt --&gt; C:\a\b
-     * ~/a/b/c.txt  --&gt; ~/a/b
-     * a.txt        --&gt; ""
-     * a/b/c        --&gt; a/b
-     * a/b/c/       --&gt; a/b/c
-     * C:           --&gt; C:
-     * C:\          --&gt; C:\
-     * ~            --&gt; ~
-     * ~/           --&gt; ~
-     * ~user        --&gt; ~user
-     * ~user/       --&gt; ~user
+     * C:\a\b\c.txt --> C:\a\b
+     * ~/a/b/c.txt  --> ~/a/b
+     * a.txt        --> ""
+     * a/b/c        --> a/b
+     * a/b/c/       --> a/b/c
+     * C:           --> C:
+     * C:\          --> C:\
+     * ~            --> ~
+     * ~/           --> ~
+     * ~user        --> ~user
+     * ~user/       --> ~user
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -941,10 +941,10 @@ public class FilenameUtils {
      * This method will handle a file in either Unix or Windows format.
      * The text after the last forward or backslash is returned.
      * <pre>
-     * a/b/c.txt --&gt; c.txt
-     * a.txt     --&gt; a.txt
-     * a/b/c     --&gt; c
-     * a/b/c/    --&gt; ""
+     * a/b/c.txt --> c.txt
+     * a.txt     --> a.txt
+     * a/b/c     --> c
+     * a/b/c/    --> ""
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -966,10 +966,10 @@ public class FilenameUtils {
      * This method will handle a file in either Unix or Windows format.
      * The text after the last forward or backslash and before the last dot is returned.
      * <pre>
-     * a/b/c.txt --&gt; c
-     * a.txt     --&gt; a
-     * a/b/c     --&gt; c
-     * a/b/c/    --&gt; ""
+     * a/b/c.txt --> c
+     * a.txt     --> a
+     * a/b/c     --> c
+     * a/b/c/    --> ""
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -987,10 +987,10 @@ public class FilenameUtils {
      * This method returns the textual part of the filename after the last dot.
      * There must be no directory separator after the dot.
      * <pre>
-     * foo.txt      --&gt; "txt"
-     * a/b/c.jpg    --&gt; "jpg"
-     * a/b.txt/c    --&gt; ""
-     * a/b/c        --&gt; ""
+     * foo.txt      --> "txt"
+     * a/b/c.jpg    --> "jpg"
+     * a/b.txt/c    --> ""
+     * a/b/c        --> ""
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -1018,10 +1018,10 @@ public class FilenameUtils {
      * This method returns the textual part of the filename before the last dot.
      * There must be no directory separator after the dot.
      * <pre>
-     * foo.txt    --&gt; foo
-     * a\b\c.jpg  --&gt; a\b\c
-     * a\b\c      --&gt; a\b\c
-     * a.b\c      --&gt; a.b\c
+     * foo.txt    --> foo
+     * a\b\c.jpg  --> a\b\c
+     * a\b\c      --> a\b\c
+     * a.b\c      --> a.b\c
      * </pre>
      * <p>
      * The output will be the same irrespective of the machine that the code is running on.
@@ -1224,11 +1224,11 @@ public class FilenameUtils {
      * This is the same as often found on Dos/Unix command lines.
      * The check is case-sensitive always.
      * <pre>
-     * wildcardMatch("c.txt", "*.txt")      --&gt; true
-     * wildcardMatch("c.txt", "*.jpg")      --&gt; false
-     * wildcardMatch("a/b/c.txt", "a/b/*")  --&gt; true
-     * wildcardMatch("c.txt", "*.???")      --&gt; true
-     * wildcardMatch("c.txt", "*.????")     --&gt; false
+     * wildcardMatch("c.txt", "*.txt")      --> true
+     * wildcardMatch("c.txt", "*.jpg")      --> false
+     * wildcardMatch("a/b/c.txt", "a/b/*")  --> true
+     * wildcardMatch("c.txt", "*.???")      --> true
+     * wildcardMatch("c.txt", "*.????")     --> false
      * </pre>
      * N.B. the sequence "*?" does not work properly at present in match strings.
      *
@@ -1250,11 +1250,11 @@ public class FilenameUtils {
      * This is the same as often found on Dos/Unix command lines.
      * The check is case-sensitive on Unix and case-insensitive on Windows.
      * <pre>
-     * wildcardMatch("c.txt", "*.txt")      --&gt; true
-     * wildcardMatch("c.txt", "*.jpg")      --&gt; false
-     * wildcardMatch("a/b/c.txt", "a/b/*")  --&gt; true
-     * wildcardMatch("c.txt", "*.???")      --&gt; true
-     * wildcardMatch("c.txt", "*.????")     --&gt; false
+     * wildcardMatch("c.txt", "*.txt")      --> true
+     * wildcardMatch("c.txt", "*.jpg")      --> false
+     * wildcardMatch("a/b/c.txt", "a/b/*")  --> true
+     * wildcardMatch("c.txt", "*.???")      --> true
+     * wildcardMatch("c.txt", "*.????")     --> false
      * </pre>
      * N.B. the sequence "*?" does not work properly at present in match strings.
      *
diff --git a/src/main/java/org/apache/commons/io/IOUtils.java b/src/main/java/org/apache/commons/io/IOUtils.java
index e132ad77..0d8e1975 100644
--- a/src/main/java/org/apache/commons/io/IOUtils.java
+++ b/src/main/java/org/apache/commons/io/IOUtils.java
@@ -2777,7 +2777,7 @@ public class IOUtils {
      * @param input where to read input from
      * @param buffer destination
      * @param offset initial offset into buffer
-     * @param length length to read, must be &gt;= 0
+     * @param length length to read, must be >= 0
      * @return actual length read; may be less than requested if EOF was reached
      * @throws IOException if a read error occurs
      * @since 2.2
@@ -2823,7 +2823,7 @@ public class IOUtils {
      * @param input where to read input from
      * @param buffer destination
      * @param offset initial offset into buffer
-     * @param length length to read, must be &gt;= 0
+     * @param length length to read, must be >= 0
      * @return actual length read; may be less than requested if EOF was reached
      * @throws IOException if a read error occurs
      * @since 2.2
@@ -2893,7 +2893,7 @@ public class IOUtils {
      * @param input where to read input from
      * @param buffer destination
      * @param offset initial offset into buffer
-     * @param length length to read, must be &gt;= 0
+     * @param length length to read, must be >= 0
      *
      * @throws IOException if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
@@ -2934,7 +2934,7 @@ public class IOUtils {
      * @param input where to read input from
      * @param buffer destination
      * @param offset initial offset into buffer
-     * @param length length to read, must be &gt;= 0
+     * @param length length to read, must be >= 0
      *
      * @throws IOException if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
@@ -2973,7 +2973,7 @@ public class IOUtils {
      * not read as many bytes as requested (most likely because of reaching EOF).
      *
      * @param input where to read input from
-     * @param length length to read, must be &gt;= 0
+     * @param length length to read, must be >= 0
      *
      * @throws IOException if there is a problem reading the file
      * @throws IllegalArgumentException if length is negative
diff --git a/src/main/java/org/apache/commons/io/ThreadMonitor.java b/src/main/java/org/apache/commons/io/ThreadMonitor.java
index 37138ebc..374c97c1 100644
--- a/src/main/java/org/apache/commons/io/ThreadMonitor.java
+++ b/src/main/java/org/apache/commons/io/ThreadMonitor.java
@@ -21,9 +21,9 @@ package org.apache.commons.io;
  * <p>
  * This works by sleeping until the specified timeout amount and then
  * interrupting the thread being monitored. If the thread being monitored
- * completes its work before being interrupted, it should <code>interrupt()</code>
+ * completes its work before being interrupted, it should <code>interrupt()<code>
  * the <i>monitor</i> thread.
- * </p>
+ * <p>
  * 
  * <pre>
  *       long timeoutInMillis = 1000;
diff --git a/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
index 8c435c9e..7c54b334 100644
--- a/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
@@ -33,7 +33,7 @@ import org.apache.commons.io.IOUtils;
  * <code>0xCAFEBABE</code>.
  * </p>
  *
- * <pre>
+ * <code><pre>
  * File dir = new File(".");
  * MagicNumberFileFilter javaClassFileFilter =
  *     MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE,
@@ -42,7 +42,7 @@ import org.apache.commons.io.IOUtils;
  * for (String javaClassFile : javaClassFiles) {
  *     System.out.println(javaClassFile);
  * }
- * </pre>
+ * </pre></code>
  *
  * <p>
  * Sometimes, such as in the case of TAR files, the
@@ -50,7 +50,7 @@ import org.apache.commons.io.IOUtils;
  * case of TAR archive files, this offset is 257 bytes.
  * </p>
  *
- * <pre>
+ * <code><pre>
  * File dir = new File(".");
  * MagicNumberFileFilter tarFileFilter =
  *     MagicNumberFileFilter("ustar", 257);
@@ -58,8 +58,7 @@ import org.apache.commons.io.IOUtils;
  * for (String tarFile : tarFiles) {
  *     System.out.println(tarFile);
  * }
- * </pre>
- *
+ * </pre></code>
  * @since 2.0
  * @see FileFilterUtils#magicNumberFileFilter(byte[])
  * @see FileFilterUtils#magicNumberFileFilter(String)
@@ -99,11 +98,11 @@ public class MagicNumberFileFilter extends AbstractFileFilter implements
      * behavior of this file filter.
      * </p>
      *
-     * <pre>
+     * <code><pre>
      * MagicNumberFileFilter javaClassFileFilter =
      *     MagicNumberFileFilter(new byte[] {(byte) 0xCA, (byte) 0xFE,
      *       (byte) 0xBA, (byte) 0xBE});
-     * </pre>
+     * </pre></code>
      *
      * @param magicNumber the magic number to look for in the file.
      *
@@ -146,10 +145,10 @@ public class MagicNumberFileFilter extends AbstractFileFilter implements
      * to look for that magic number.
      * </p>
      *
-     * <pre>
+     * <code><pre>
      * MagicNumberFileFilter tarFileFilter =
      *     MagicNumberFileFilter("ustar", 257);
-     * </pre>
+     * </pre></code>
      *
      * @param magicNumber the magic number to look for in the file.
      *        The string is converted to bytes using the platform default charset.
@@ -181,15 +180,15 @@ public class MagicNumberFileFilter extends AbstractFileFilter implements
      * to look for that magic number.
      * </p>
      *
-     * <pre>
+     * <code><pre>
      * MagicNumberFileFilter tarFileFilter =
      *     MagicNumberFileFilter(new byte[] {0x75, 0x73, 0x74, 0x61, 0x72}, 257);
-     * </pre>
+     * </pre></code>
      *
-     * <pre>
+     * <code><pre>
      * MagicNumberFileFilter javaClassFileFilter =
      *     MagicNumberFileFilter(new byte[] {0xCA, 0xFE, 0xBA, 0xBE}, 0);
-     * </pre>
+     * </pre></code>
      *
      * @param magicNumber the magic number to look for in the file.
      * @param offset the byte offset in the file to start comparing bytes.
diff --git a/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
index 074f22d9..321e9db0 100644
--- a/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
@@ -24,17 +24,17 @@ import org.apache.commons.io.IOCase;
 
 /**
  * Filters files using supplied regular expression(s).
- * <p>
+ * <p/>
  * See java.util.regex.Pattern for regex matching rules
- * </p>
+ * <p/>
  *
- * <p>
+ * <p/>
  * e.g.
  * <pre>
  * File dir = new File(".");
  * FileFilter fileFilter = new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$");
  * File[] files = dir.listFiles(fileFilter);
- * for (int i = 0; i &lt; files.length; i++) {
+ * for (int i = 0; i < files.length; i++) {
  *   System.out.println(files[i]);
  * }
  * </pre>
diff --git a/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
index 1b08ca90..f1a46683 100644
--- a/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
@@ -40,7 +40,7 @@ import org.apache.commons.io.IOCase;
  * File dir = new File(".");
  * FileFilter fileFilter = new WildcardFileFilter("*test*.java~*~");
  * File[] files = dir.listFiles(fileFilter);
- * for (int i = 0; i &lt; files.length; i++) {
+ * for (int i = 0; i < files.length; i++) {
  *   System.out.println(files[i]);
  * }
  * </pre>
diff --git a/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java b/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
index 9eb95961..f1251127 100644
--- a/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
@@ -39,7 +39,7 @@ import org.apache.commons.io.FilenameUtils;
  * File dir = new File(".");
  * FileFilter fileFilter = new WildcardFilter("*test*.java~*~");
  * File[] files = dir.listFiles(fileFilter);
- * for (int i = 0; i &lt; files.length; i++) {
+ * for (int i = 0; i < files.length; i++) {
  *   System.out.println(files[i]);
  * }
  * </pre>
diff --git a/src/main/java/org/apache/commons/io/input/NullInputStream.java b/src/main/java/org/apache/commons/io/input/NullInputStream.java
index f2d28393..75a3977a 100644
--- a/src/main/java/org/apache/commons/io/input/NullInputStream.java
+++ b/src/main/java/org/apache/commons/io/input/NullInputStream.java
@@ -50,7 +50,7 @@ import java.io.InputStream;
  *          return ... // return required value here
  *      }
  *      protected void processBytes(byte[] bytes, int offset, int length) {
- *          for (int i = offset; i &lt; length; i++) {
+ *          for (int i = offset; i < length; i++) {
  *              bytes[i] = ... // set array value here
  *          }
  *      }
diff --git a/src/main/java/org/apache/commons/io/input/NullReader.java b/src/main/java/org/apache/commons/io/input/NullReader.java
index 3880430b..0e37f399 100644
--- a/src/main/java/org/apache/commons/io/input/NullReader.java
+++ b/src/main/java/org/apache/commons/io/input/NullReader.java
@@ -50,7 +50,7 @@ import java.io.Reader;
  *          return ... // return required value here
  *      }
  *      protected void processChars(char[] chars, int offset, int length) {
- *          for (int i = offset; i &lt; length; i++) {
+ *          for (int i = offset; i < length; i++) {
  *              chars[i] = ... // set array value here
  *          }
  *      }
diff --git a/src/main/java/org/apache/commons/io/input/Tailer.java b/src/main/java/org/apache/commons/io/input/Tailer.java
index 5ff9dda5..129778a9 100644
--- a/src/main/java/org/apache/commons/io/input/Tailer.java
+++ b/src/main/java/org/apache/commons/io/input/Tailer.java
@@ -29,7 +29,7 @@ import org.apache.commons.io.IOUtils;
 /**
  * Simple implementation of the unix "tail -f" functionality.
  * <p>
- * <h2>1. Create a TailerListener implementation</h2>
+ * <h2>1. Create a TailerListener implementation</h3>
  * <p>
  * First you need to create a {@link TailerListener} implementation
  * ({@link TailerListenerAdapter} is provided for convenience so that you don't have to
@@ -92,13 +92,13 @@ import org.apache.commons.io.IOUtils;
  *      thread.setDaemon(true); // optional
  *      thread.start();</pre>
  *
- * <h2>3. Stopping a Tailer</h2>
+ * <h2>3. Stopping a Tailer</h3>
  * <p>Remember to stop the tailer when you have done with it:</p>
  * <pre>
  *      tailer.stop();
  * </pre>
  *
- * <h2>4. Interrupting a Tailer</h2>
+ * <h2>4. Interrupting a Tailer</h3>
  * <p>You can interrupt the thread a tailer is running on by calling {@link Thread#interrupt()}.</p>
  * <pre>
  *      thread.interrupt();
