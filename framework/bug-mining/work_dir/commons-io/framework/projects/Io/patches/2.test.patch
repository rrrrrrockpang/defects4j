diff --git a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
index a44bef11..8db76cfd 100644
--- a/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
+++ b/src/test/org/apache/commons/io/FileSystemUtilsTestCase.java
@@ -18,9 +18,7 @@ package org.apache.commons.io;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.OutputStream;
 import java.io.StringReader;
 
 import junit.framework.Test;
@@ -173,7 +171,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
             "17/08/2005  21:44    <DIR>          Desktop\n" +
             "               7 File(s)        180,260 bytes\n" +
             "              10 Dir(s)  41,411,551,232 bytes free";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(41411551232L, fsu.freeSpaceWindows(""));
     }
 
@@ -191,7 +194,13 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
             "17/08/2005  21:44    <DIR>          Desktop\n" +
             "               7 File(s)         180260 bytes\n" +
             "              10 Dir(s)     41411551232 bytes free";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines, "dir /-c ");
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                assertEquals("dir /-c ", params[2]);
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(41411551232L, fsu.freeSpaceWindows(""));
     }
 
@@ -208,7 +217,13 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
             "17/08/2005  21:44    <DIR>          Desktop\n" +
             "               7 File(s)         180260 bytes\n" +
             "              10 Dir(s)     41411551232 bytes free";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines, "dir /-c C:");
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                assertEquals("dir /-c C:", params[2]);
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(41411551232L, fsu.freeSpaceWindows("C:"));
     }
 
@@ -225,45 +240,24 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
             "17/08/2005  21:44    <DIR>          Desktop\n" +
             "               7 File(s)         180260 bytes\n" +
             "              10 Dir(s)     41411551232 bytes free";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines, "dir /-c C:");
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                assertEquals("dir /-c C:", params[2]);
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(41411551232L, fsu.freeSpaceWindows("C:\\somedir"));
     }
 
     public void testGetFreeSpaceWindows_String_EmptyResponse() throws Exception {
         String lines = "";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
-        try {
-            fsu.freeSpaceWindows("C:");
-            fail();
-        } catch (IOException ex) {}
-    }
-
-    public void testGetFreeSpaceWindows_String_EmptyMultiLineResponse() throws Exception {
-        String lines = "\n\n";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
-        try {
-            fsu.freeSpaceWindows("C:");
-            fail();
-        } catch (IOException ex) {}
-    }
-
-    public void testGetFreeSpaceWindows_String_InvalidTextResponse() throws Exception {
-        String lines = "BlueScreenOfDeath";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
-        try {
-            fsu.freeSpaceWindows("C:");
-            fail();
-        } catch (IOException ex) {}
-    }
-
-    public void testGetFreeSpaceWindows_String_NoSuchDirectoryResponse() throws Exception {
-        String lines =
-            " Volume in drive C is HDD\n" +
-            " Volume Serial Number is XXXX-YYYY\n" +
-            "\n" +
-            " Directory of C:\\Documents and Settings\\empty" +
-            "\n";
-        FileSystemUtils fsu = new MockFileSystemUtils(1, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceWindows("C:");
             fail();
@@ -275,7 +269,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx:/home/users/s     14428928  12956424   1472504  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceUnix("", false, false);
             fail();
@@ -299,7 +298,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx:/home/users/s     14428928  12956424   1472504  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false));
     }
 
@@ -307,7 +311,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx:/home/users/s     14428928  12956424   1472504  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false));
     }
 
@@ -316,7 +325,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx-yyyyyyy-zzz:/home/users/s\n" +
             "                      14428928  12956424   1472504  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", false, false));
     }
 
@@ -325,13 +339,23 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx-yyyyyyy-zzz:/home/users/s\n" +
             "                      14428928  12956424   1472504  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         assertEquals(1472504L, fsu.freeSpaceUnix("/home/users/s", true, false));
     }
 
     public void testGetFreeSpaceUnix_String_EmptyResponse() throws Exception {
         String lines = "";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceUnix("/home/users/s", false, false);
             fail();
@@ -354,7 +378,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "                      14428928  12956424       100";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceUnix("/home/users/s", false, false);
             fail();
@@ -377,7 +406,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx:/home/users/s     14428928  12956424   nnnnnnn  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceUnix("/home/users/s", false, false);
             fail();
@@ -400,7 +434,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx:/home/users/s     14428928  12956424        -1  90% /home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceUnix("/home/users/s", false, false);
             fail();
@@ -423,7 +462,12 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         String lines =
             "Filesystem           1K-blocks      Used Available Use% Mounted on\n" +
             "xxx-yyyyyyy-zzz:/home/users/s";
-        FileSystemUtils fsu = new MockFileSystemUtils(0, lines);
+        final StringReader reader = new StringReader(lines);
+        FileSystemUtils fsu = new FileSystemUtils() {
+            protected BufferedReader openProcessStream(String[] params) {
+                return new BufferedReader(reader);
+            }
+        };
         try {
             fsu.freeSpaceUnix("/home/users/s", false, false);
             fail();
@@ -442,46 +486,4 @@ public class FileSystemUtilsTestCase extends FileBasedTestCase {
         } catch (IOException ex) {}
     }
 
-    //-----------------------------------------------------------------------
-    static class MockFileSystemUtils extends FileSystemUtils {
-        private final int exitCode;
-        private final StringReader reader;
-        private final String cmd;
-        public MockFileSystemUtils(int exitCode, String lines) {
-            this(exitCode, lines, null);
-        }
-        public MockFileSystemUtils(int exitCode, String lines, String cmd) {
-            this.exitCode = exitCode;
-            this.reader = new StringReader(lines);
-            this.cmd = cmd;
-        }
-        protected Process openProcess(String[] params) {
-            if (cmd != null) {
-                assertEquals(cmd, params[params.length - 1]);
-            }
-            return new Process() {
-                public InputStream getErrorStream() {
-                    return null;
-                }
-                public InputStream getInputStream() {
-                    return null;
-                }
-                public OutputStream getOutputStream() {
-                    return null;
-                }
-                public int waitFor() throws InterruptedException {
-                    return exitCode;
-                }
-                public int exitValue() {
-                    return exitCode;
-                }
-                public void destroy() {
-                }
-            };
-        }
-        protected BufferedReader openProcessStream(Process p) {
-            return new BufferedReader(reader);
-        }
-    }
-
 }
