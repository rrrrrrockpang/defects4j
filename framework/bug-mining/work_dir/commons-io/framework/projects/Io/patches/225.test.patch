diff --git a/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java b/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java
index 72a2a5b2..e26442b4 100644
--- a/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java
+++ b/src/test/java/org/apache/commons/io/input/ReversedLinesFileReaderTestParamFile.java
@@ -16,21 +16,20 @@
  */
 package org.apache.commons.io.input;
 
+
 import static org.junit.Assert.assertEquals;
 
 import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.net.URISyntaxException;
-import java.nio.charset.Charset;
-import java.nio.file.*;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Stack;
 
-import com.google.common.jimfs.Configuration;
-import com.google.common.jimfs.Jimfs;
 import org.junit.After;
-import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
@@ -41,66 +40,52 @@ import org.junit.runners.Parameterized.Parameters;
  */
 @RunWith(Parameterized.class)
 public class ReversedLinesFileReaderTestParamFile {
-    @Parameters(name = "{0}, encoding={1}, blockSize={2}, useNonDefaultFileSystem={3}")
-    public static Collection<Object[]> parameters() {
+
+    @Parameters(name = "{0}, charset={1}")
+    public static Collection<Object[]> blockSizes() {
         return Arrays.asList(new Object[][]{
-                {"test-file-20byteslength.bin", "ISO_8859_1", null, false},
-                {"test-file-iso8859-1-shortlines-win-linebr.bin", "ISO_8859_1", null, false},
-                {"test-file-iso8859-1.bin", "ISO_8859_1", null, false},
-                {"test-file-shiftjis.bin", "Shift_JIS", null, false},
-                {"test-file-utf16be.bin", "UTF-16BE", null, false},
-                {"test-file-utf16le.bin", "UTF-16LE", null, false},
-                {"test-file-utf8-cr-only.bin", "UTF-8", null, false},
-                {"test-file-utf8-win-linebr.bin", "UTF-8", null, false},
-                {"test-file-utf8-win-linebr.bin", "UTF-8", 1, false},
-                {"test-file-utf8-win-linebr.bin", "UTF-8", 2, false},
-                {"test-file-utf8-win-linebr.bin", "UTF-8", 3, false},
-                {"test-file-utf8-win-linebr.bin", "UTF-8", 4, false},
-                {"test-file-utf8.bin", "UTF-8", null, false},
-                {"test-file-utf8.bin", "UTF-8", null, true},
-                {"test-file-windows-31j.bin", "windows-31j", null, false},
-                {"test-file-gbk.bin", "gbk", null, false},
-                {"test-file-x-windows-949.bin", "x-windows-949", null, false},
-                {"test-file-x-windows-950.bin", "x-windows-950", null, false},
+                {"test-file-20byteslength.bin", "ISO_8859_1", null},
+                {"test-file-iso8859-1-shortlines-win-linebr.bin", "ISO_8859_1", null},
+                {"test-file-iso8859-1.bin", "ISO_8859_1", null},
+                {"test-file-shiftjis.bin", "Shift_JIS", null},
+                {"test-file-utf16be.bin", "UTF-16BE", null},
+                {"test-file-utf16le.bin", "UTF-16LE", null},
+                {"test-file-utf8-cr-only.bin", "UTF-8", null},
+                {"test-file-utf8-win-linebr.bin", "UTF-8", null},
+                {"test-file-utf8-win-linebr.bin", "UTF-8", 1},
+                {"test-file-utf8-win-linebr.bin", "UTF-8", 2},
+                {"test-file-utf8-win-linebr.bin", "UTF-8", 3},
+                {"test-file-utf8-win-linebr.bin", "UTF-8", 4},
+                {"test-file-utf8.bin", "UTF-8", null},
+                {"test-file-windows-31j.bin", "windows-31j", null},
+                {"test-file-gbk.bin", "gbk", null},
+                {"test-file-x-windows-949.bin", "x-windows-949", null},
+                {"test-file-x-windows-950.bin", "x-windows-950", null},
         });
     }
 
-    private Path file;
-    private FileSystem fileSystem;
     private ReversedLinesFileReader reversedLinesFileReader;
     private BufferedReader bufferedReader;
 
     private final String fileName;
-    private final Charset encoding;
-    private final Integer blockSize;
-    private final boolean useNonDefaultFileSystem;
+    private final String encoding;
+    private final int buffSize;
 
-    public ReversedLinesFileReaderTestParamFile(final String fileName, final String encoding, final Integer blockSize, final boolean useNonDefaultFileSystem) {
+    public ReversedLinesFileReaderTestParamFile(final String fileName, final String encoding, final Integer buffsize) {
         this.fileName = fileName;
-        this.encoding = Charset.forName(encoding);
-        this.blockSize = blockSize;
-        this.useNonDefaultFileSystem = useNonDefaultFileSystem;
-    }
-
-    @Before
-    public void prepareFile() throws URISyntaxException, IOException {
-        file = Paths.get(getClass().getResource("/" + fileName).toURI());
-        if (useNonDefaultFileSystem) {
-            fileSystem = Jimfs.newFileSystem(Configuration.unix());
-            file = Files.copy(file, fileSystem.getPath("/" + fileName));
-        }
+        this.encoding = encoding;
+        this.buffSize = buffsize == null ? 4096 : buffsize;
     }
 
     @Test
-    public void testDataIntegrityWithBufferedReader() throws IOException {
-        reversedLinesFileReader = blockSize == null
-                ? new ReversedLinesFileReader(file, encoding)
-                : new ReversedLinesFileReader(file, blockSize, encoding);
+    public void testDataIntegrityWithBufferedReader() throws URISyntaxException, IOException {
+        final File testFileIso = new File(this.getClass().getResource("/" + fileName).toURI());
+        reversedLinesFileReader = new ReversedLinesFileReader(testFileIso, buffSize, encoding);
 
         final Stack<String> lineStack = new Stack<>();
 
-        bufferedReader = Files.newBufferedReader(file, encoding);
-        String line;
+        bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(testFileIso), encoding));
+        String line = null;
 
         // read all lines in normal order
         while ((line = bufferedReader.readLine()) != null) {
@@ -112,10 +97,11 @@ public class ReversedLinesFileReaderTestParamFile {
             final String lineFromBufferedReader = lineStack.pop();
             assertEquals(lineFromBufferedReader, line);
         }
+
     }
 
     @After
-    public void releaseResources() {
+    public void closeReader() {
         try {
             bufferedReader.close();
         } catch (final Exception e) {
@@ -126,10 +112,7 @@ public class ReversedLinesFileReaderTestParamFile {
         } catch (final Exception e) {
             // ignore
         }
-        try {
-            fileSystem.close();
-        } catch (final Exception e) {
-            // ignore
-        }
     }
+
+
 }
