diff --git a/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java b/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
index 514c12f4..8578c936 100644
--- a/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
+++ b/src/test/org/apache/commons/io/FilenameUtilsWildcardTestCase.java
@@ -17,7 +17,6 @@
 package org.apache.commons.io;
 
 import java.io.File;
-import java.util.Locale;
 
 import junit.framework.TestCase;
 
@@ -182,33 +181,4 @@ public class FilenameUtilsWildcardTestCase extends TestCase {
         assertMatch("log.log.abc.log.abc.d", "*log?abc?d", true);
     }
 
-    public void testLocaleIndependence() {
-        Locale orig = Locale.getDefault();
-
-        Locale[] locales = Locale.getAvailableLocales();
-
-        String[][] data = {
-            { "I", "i"},
-            { "i", "I"},
-            { "i", "\u0130"},
-            { "i", "\u0131"},
-            { "\u03A3", "\u03C2"},
-            { "\u03A3", "\u03C3"},
-            { "\u03C2", "\u03C3"},
-        };
-
-        try {
-            for (int i = 0; i < data.length; i++) {
-                for (int j = 0; j < locales.length; j++) {
-                    Locale.setDefault(locales[j]);
-                    assertTrue("Test data corrupt: " + i, data[i][0].equalsIgnoreCase(data[i][1]));
-                    boolean match = FilenameUtils.wildcardMatch(data[i][0], data[i][1], IOCase.INSENSITIVE);
-                    assertTrue(Locale.getDefault().toString() + ": " + i, match);
-                }
-            }
-        } finally {
-            Locale.setDefault(orig);
-        }
-    }
-
 }
diff --git a/src/test/org/apache/commons/io/IOCaseTestCase.java b/src/test/org/apache/commons/io/IOCaseTestCase.java
index d9ae5194..30c27549 100644
--- a/src/test/org/apache/commons/io/IOCaseTestCase.java
+++ b/src/test/org/apache/commons/io/IOCaseTestCase.java
@@ -245,70 +245,6 @@ public class IOCaseTestCase extends FileBasedTestCase {
         assertEquals(WINDOWS, IOCase.SYSTEM.checkEndsWith("ABC", "Bc"));
     }
 
-    //-----------------------------------------------------------------------
-    public void test_checkIndexOf_functionality() throws Exception {
-
-        // start
-        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "A"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "A"));
-        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "AB"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "AB"));
-        assertEquals(0,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "ABC"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 1, "ABC"));
-
-        // middle
-        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "D"));
-        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "D"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "D"));
-        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DE"));
-        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DE"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DE"));
-        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DEF"));
-        assertEquals(3,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 3, "DEF"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 4, "DEF"));
-
-        // end
-        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "J"));
-        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "J"));
-        assertEquals(9,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "J"));
-        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "IJ"));
-        assertEquals(8,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "IJ"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 9, "IJ"));
-        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 6, "HIJ"));
-        assertEquals(7,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 7, "HIJ"));
-        assertEquals(-1,  IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 8, "HIJ"));
-
-        // not found
-        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("ABCDEFGHIJ", 0, "DED"));
-
-        // too long
-        assertEquals(-1,   IOCase.SENSITIVE.checkIndexOf("DEF", 0, "ABCDEFGHIJ"));
-
-        try {
-            IOCase.SENSITIVE.checkIndexOf("ABC", 0, null);
-            fail();
-        } catch (NullPointerException ex) {}
-        try {
-            IOCase.SENSITIVE.checkIndexOf(null, 0, "ABC");
-            fail();
-        } catch (NullPointerException ex) {}
-        try {
-            IOCase.SENSITIVE.checkIndexOf(null, 0, null);
-            fail();
-        } catch (NullPointerException ex) {}
-    }
-
-    public void test_checkIndexOf_case() throws Exception {
-        assertEquals(1,  IOCase.SENSITIVE.checkIndexOf("ABC", 0, "BC"));
-        assertEquals(-1, IOCase.SENSITIVE.checkIndexOf("ABC", 0, "Bc"));
-        
-        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "BC"));
-        assertEquals(1, IOCase.INSENSITIVE.checkIndexOf("ABC", 0, "Bc"));
-        
-        assertEquals(1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "BC"));
-        assertEquals(WINDOWS ? 1 : -1, IOCase.SYSTEM.checkIndexOf("ABC", 0, "Bc"));
-    }
-
     //-----------------------------------------------------------------------
     public void test_checkRegionMatches_functionality() throws Exception {
         assertEquals(true, IOCase.SENSITIVE.checkRegionMatches("ABC", 0, ""));
