diff --git a/src/main/java/org/apache/commons/io/input/Tailer.java b/src/main/java/org/apache/commons/io/input/Tailer.java
index 77c917bc..8e97bb00 100644
--- a/src/main/java/org/apache/commons/io/input/Tailer.java
+++ b/src/main/java/org/apache/commons/io/input/Tailer.java
@@ -16,12 +16,10 @@
  */
 package org.apache.commons.io.input;
 
-import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.RandomAccessFile;
-import java.nio.charset.Charset;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
@@ -446,11 +444,11 @@ public class Tailer implements Runnable {
      * @throws java.io.IOException if an I/O error occurs.
      */
     private long readLines(final RandomAccessFile reader) throws IOException {
-        // Make explicit that the default charset is being used here
-        Charset cset = Charset.defaultCharset();
-        ByteArrayOutputStream lineBuf = new ByteArrayOutputStream(64);
+        final StringBuilder sb = new StringBuilder();
+
         long pos = reader.getFilePointer();
         long rePos = pos; // position to re-read
+
         int num;
         boolean seenCR = false;
         while (getRun() && ((num = reader.read(inbuf)) != -1)) {
@@ -459,29 +457,30 @@ public class Tailer implements Runnable {
                 switch (ch) {
                 case '\n':
                     seenCR = false; // swallow CR before LF
-                    listener.handle(new String(lineBuf.toByteArray(), cset));
-                    lineBuf.reset();
+                    listener.handle(sb.toString());
+                    sb.setLength(0);
                     rePos = pos + i + 1;
                     break;
                 case '\r':
                     if (seenCR) {
-                        lineBuf.write('\r');
+                        sb.append('\r');
                     }
                     seenCR = true;
                     break;
                 default:
                     if (seenCR) {
                         seenCR = false; // swallow final CR
-                        listener.handle(new String(lineBuf.toByteArray(), cset));
-                        lineBuf.reset(); 
+                        listener.handle(sb.toString());
+                        sb.setLength(0);
                         rePos = pos + i + 1;
                     }
-                    lineBuf.write(ch);
+                    sb.append((char) ch); // add character, not its ascii value
                 }
             }
+
             pos = reader.getFilePointer();
         }
-        IOUtils.closeQuietly(lineBuf); // not strictly necessary
+
         reader.seek(rePos); // Ensure we can re-read if necessary
         return rePos;
     }
