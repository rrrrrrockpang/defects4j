diff --git a/src/test/org/apache/commons/io/IOUtilsCopyTestCase.java b/src/test/org/apache/commons/io/IOUtilsCopyTestCase.java
index 2869e67a..686f4b11 100644
--- a/src/test/org/apache/commons/io/IOUtilsCopyTestCase.java
+++ b/src/test/org/apache/commons/io/IOUtilsCopyTestCase.java
@@ -21,7 +21,6 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
-import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
 import java.util.Arrays;
@@ -30,11 +29,7 @@ import junit.framework.Test;
 import junit.framework.TestSuite;
 import junit.textui.TestRunner;
 
-import org.apache.commons.io.input.NullInputStream;
-import org.apache.commons.io.input.NullReader;
 import org.apache.commons.io.output.ByteArrayOutputStream;
-import org.apache.commons.io.output.NullOutputStream;
-import org.apache.commons.io.output.NullWriter;
 import org.apache.commons.io.testtools.FileBasedTestCase;
 import org.apache.commons.io.testtools.YellOnCloseInputStream;
 import org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream;
@@ -116,29 +111,6 @@ public class IOUtilsCopyTestCase extends FileBasedTestCase {
         } catch (NullPointerException ex) {}
     }
 
-    /**
-     * Test Copying file > 2GB  - see issue# IO-84
-     */
-    public void testCopy_inputStreamToOutputStream_IO84() throws Exception {
-        long size = (long)Integer.MAX_VALUE + (long)1;
-        InputStream  in  = new NullInputStream(size);
-        OutputStream out = new NullOutputStream();
-
-        // Test copy() method
-        try {
-            IOUtils.copy(in, out);
-            fail("Expected copy() to throw an ArithmeticException");
-        } catch (ArithmeticException ae) {
-            // expected result
-        }
-
-        // reset the input
-        in.close();
-
-        // Test copyLarge() method
-        assertEquals("copyLarge()", size, IOUtils.copyLarge(in, out));
-    }
-
     //-----------------------------------------------------------------------
     public void testCopy_inputStreamToWriter() throws Exception {
         InputStream in = new ByteArrayInputStream(inData);
@@ -360,28 +332,4 @@ public class IOUtilsCopyTestCase extends FileBasedTestCase {
         } catch (NullPointerException ex) {}
     }
 
-    /**
-     * Test Copying file > 2GB  - see issue# IO-84
-     */
-    public void testCopy_readerToWriter_IO84() throws Exception {
-        long size = (long)Integer.MAX_VALUE + (long)1;
-        Reader reader = new NullReader(size);
-        Writer writer = new NullWriter();
-
-        // Test copy() method
-        try {
-            IOUtils.copy(reader, writer);
-            fail("Expected copy() to throw an ArithmeticException");
-        } catch (ArithmeticException ae) {
-            // expected result
-        }
-
-        // reset the input
-        reader.close();
-
-        // Test copyLarge() method
-        assertEquals("copyLarge()", size, IOUtils.copyLarge(reader, writer));
-
-    }
-
 }
diff --git a/src/test/org/apache/commons/io/input/CountingInputStreamTest.java b/src/test/org/apache/commons/io/input/CountingInputStreamTest.java
index fb7d0a04..31ed2f32 100644
--- a/src/test/org/apache/commons/io/input/CountingInputStreamTest.java
+++ b/src/test/org/apache/commons/io/input/CountingInputStreamTest.java
@@ -17,12 +17,9 @@
 package org.apache.commons.io.input;
 
 import java.io.ByteArrayInputStream;
-import java.io.OutputStream;
 import java.io.IOException;
 
 import junit.framework.TestCase;
-import org.apache.commons.io.IOUtils;
-import org.apache.commons.io.output.NullOutputStream;
 
 /**
  * Tests the CountingInputStream.
@@ -70,39 +67,6 @@ public class CountingInputStreamTest extends TestCase {
         assertEquals(textResult, text);
     }
 
-
-    /**
-     * Test for files > 2GB in size - see issue IO-84
-     */
-    public void testLargeFiles_IO84() throws Exception {
-        long size = (long)Integer.MAX_VALUE + (long)1;
-        NullInputStream mock    = new NullInputStream(size);
-        CountingInputStream cis = new CountingInputStream(mock);
-        OutputStream out        = new NullOutputStream();
-
-        // Test integer methods
-        IOUtils.copyLarge(cis, out);
-        try {
-            cis.getCount();
-            fail("Expected getCount() to throw an ArithmeticException");
-        } catch (ArithmeticException ae) {
-            // expected result
-        }
-        try {
-            cis.resetCount();
-            fail("Expected resetCount() to throw an ArithmeticException");
-        } catch (ArithmeticException ae) {
-            // expected result
-        }
-
-        mock.close();
-
-        // Test long methods
-        IOUtils.copyLarge(cis, out);
-        assertEquals("getByteCount()",   size, cis.getByteCount());
-        assertEquals("resetByteCount()", size, cis.resetByteCount());
-    }
-
     public void testResetting() throws Exception {
         String text = "A piece of text";
         byte[] bytes = text.getBytes();
diff --git a/src/test/org/apache/commons/io/output/CountingOutputStreamTest.java b/src/test/org/apache/commons/io/output/CountingOutputStreamTest.java
index eb430c0a..869bace4 100755
--- a/src/test/org/apache/commons/io/output/CountingOutputStreamTest.java
+++ b/src/test/org/apache/commons/io/output/CountingOutputStreamTest.java
@@ -17,13 +17,10 @@
 package org.apache.commons.io.output;
 
 
-import java.io.OutputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
 import junit.framework.TestCase;
-import org.apache.commons.io.IOUtils;
-import org.apache.commons.io.input.NullInputStream;
 
 
 /**
@@ -73,39 +70,6 @@ public class CountingOutputStreamTest extends TestCase {
 
     }
 
-    /**
-     * Test for files > 2GB in size - see issue IO-84
-     */
-    public void testLargeFiles_IO84() throws Exception {
-        long size = (long)Integer.MAX_VALUE + (long)1;
-
-        NullInputStream mock     = new NullInputStream(size);
-        OutputStream nos         = new NullOutputStream();
-        CountingOutputStream cos = new CountingOutputStream(nos);
-
-        // Test integer methods
-        IOUtils.copyLarge(mock, cos);
-        try {
-            cos.getCount();
-            fail("Expected getCount() to throw an ArithmeticException");
-        } catch (ArithmeticException ae) {
-            // expected result
-        }
-        try {
-            cos.resetCount();
-            fail("Expected resetCount() to throw an ArithmeticException");
-        } catch (ArithmeticException ae) {
-            // expected result
-        }
-
-        mock.close();
-
-        // Test long methods
-        IOUtils.copyLarge(mock, cos);
-        assertEquals("getByteCount()",   size, cos.getByteCount());
-        assertEquals("resetByteCount()", size, cos.resetByteCount());
-    }
-
     private void assertByteArrayEquals(String msg, byte[] array, int start, int end) {
         for (int i = start; i < end; i++) {
             assertEquals(msg+": array[" + i + "] mismatch", array[i], i-start);
