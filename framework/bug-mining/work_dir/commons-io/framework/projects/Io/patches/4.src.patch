diff --git a/src/java/org/apache/commons/io/FileSystemUtils.java b/src/java/org/apache/commons/io/FileSystemUtils.java
index b9d6019e..e64dbfb8 100644
--- a/src/java/org/apache/commons/io/FileSystemUtils.java
+++ b/src/java/org/apache/commons/io/FileSystemUtils.java
@@ -18,9 +18,7 @@ package org.apache.commons.io;
 
 import java.io.BufferedReader;
 import java.io.IOException;
-import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -115,8 +113,8 @@ public class FileSystemUtils {
      * As this is not very useful, this method is deprecated in favour
      * of {@link #freeSpaceKb(String)} which returns a result in kilobytes.
      * <p>
-     * Note that some OS's are NOT currently supported, including OS/390,
-     * OpenVMS and and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)
+     * Note that some OS's are NOT currently supported, including OS/390
+     * and SunOS 5. (SunOS is supported by <code>freeSpaceKb</code>.)
      * <pre>
      * FileSystemUtils.freeSpace("C:");       // Windows
      * FileSystemUtils.freeSpace("/volume");  // *nix
@@ -376,7 +374,6 @@ public class FileSystemUtils {
         }
     }
 
-    //-----------------------------------------------------------------------
     /**
      * Performs the os command.
      *
@@ -386,31 +383,16 @@ public class FileSystemUtils {
      * @throws IOException if an error occurs
      */
     List performCommand(String[] cmdAttribs, int max) throws IOException {
-        // this method does what it can to avoid the 'Too many open files' error
-        // based on trial and error and these links:
-        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4784692
-        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4801027
-        // http://forum.java.sun.com/thread.jspa?threadID=533029&messageID=2572018
-        // however, its still not perfect as the JDK support is so poor
-        // (see commond-exec or ant for a better multi-threaded multi-os solution)
-        
-        List lines = new ArrayList(20);
-        Process proc = null;
-        InputStream in = null;
-        OutputStream out = null;
-        InputStream err = null;
-        BufferedReader inr = null;
+        List lines = new ArrayList();
+        BufferedReader in = null;
         try {
-            proc = openProcess(cmdAttribs);
-            in = proc.getInputStream();
-            out = proc.getOutputStream();
-            err = proc.getErrorStream();
-            inr = new BufferedReader(new InputStreamReader(in));
-            String line = inr.readLine();
+            Process proc = openProcess(cmdAttribs);
+            in = openProcessStream(proc);
+            String line = in.readLine();
             while (line != null && lines.size() < max) {
                 line = line.toLowerCase().trim();
                 lines.add(line);
-                line = inr.readLine();
+                line = in.readLine();
             }
             
             proc.waitFor();
@@ -434,12 +416,6 @@ public class FileSystemUtils {
                     "' for command " + Arrays.asList(cmdAttribs));
         } finally {
             IOUtils.closeQuietly(in);
-            IOUtils.closeQuietly(out);
-            IOUtils.closeQuietly(err);
-            IOUtils.closeQuietly(inr);
-            if (proc != null) {
-                proc.destroy();
-            }
         }
     }
 
@@ -454,4 +430,16 @@ public class FileSystemUtils {
         return Runtime.getRuntime().exec(cmdAttribs);
     }
 
+    /**
+     * Opens the stream to the operating system.
+     *
+     * @param proc  the process
+     * @return a reader
+     * @throws IOException if an error occurs
+     */
+    BufferedReader openProcessStream(Process proc) throws IOException {
+        return new BufferedReader(
+            new InputStreamReader(proc.getInputStream()));
+    }
+
 }
