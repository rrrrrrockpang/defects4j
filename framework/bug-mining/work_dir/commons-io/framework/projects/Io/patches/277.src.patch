diff --git a/src/main/java/org/apache/commons/io/FilenameUtils.java b/src/main/java/org/apache/commons/io/FilenameUtils.java
index 6edb92ca..b5777488 100644
--- a/src/main/java/org/apache/commons/io/FilenameUtils.java
+++ b/src/main/java/org/apache/commons/io/FilenameUtils.java
@@ -23,6 +23,7 @@ import java.util.Arrays;
 import java.util.Collection;
 import java.util.Deque;
 import java.util.List;
+import java.util.Objects;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -538,7 +539,9 @@ public class FilenameUtils {
      * @see FileUtils#directoryContains(File, File)
      */
     public static boolean directoryContains(final String canonicalParent, final String canonicalChild) {
-        if (isEmpty(canonicalParent) || isEmpty(canonicalChild)) {
+        Objects.requireNonNull(canonicalParent, "canonicalParent");
+
+        if (canonicalChild == null) {
             return false;
         }
 
@@ -546,14 +549,7 @@ public class FilenameUtils {
             return false;
         }
 
-        final char separator = canonicalParent.charAt(0) == UNIX_SEPARATOR ? UNIX_SEPARATOR : WINDOWS_SEPARATOR;
-        final String parentWithEndSeparator = canonicalParent.charAt(canonicalParent.length() - 1) == separator ? canonicalParent : canonicalParent + separator;
-
-        return IOCase.SYSTEM.checkStartsWith(canonicalChild, parentWithEndSeparator);
-    }
-
-    private static boolean isEmpty(final String string) {
-        return string == null || string.isEmpty();
+        return IOCase.SYSTEM.checkStartsWith(canonicalChild, canonicalParent);
     }
 
     /**
@@ -1239,7 +1235,7 @@ public class FilenameUtils {
         }
         requireNonNullChars(fileName);
 
-        if (isEmpty(extension)) {
+        if (extension == null || extension.isEmpty()) {
             return indexOfExtension(fileName) == NOT_FOUND;
         }
         final String fileExt = getExtension(fileName);
