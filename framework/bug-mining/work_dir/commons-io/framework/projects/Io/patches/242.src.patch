diff --git a/src/main/java/org/apache/commons/io/FileUtils.java b/src/main/java/org/apache/commons/io/FileUtils.java
index 8cf6607f..3bcd9962 100644
--- a/src/main/java/org/apache/commons/io/FileUtils.java
+++ b/src/main/java/org/apache/commons/io/FileUtils.java
@@ -49,7 +49,6 @@ import java.util.zip.Checksum;
 
 import org.apache.commons.io.file.Counters;
 import org.apache.commons.io.file.PathUtils;
-import org.apache.commons.io.file.StandardDeleteOption;
 import org.apache.commons.io.filefilter.DirectoryFileFilter;
 import org.apache.commons.io.filefilter.FalseFileFilter;
 import org.apache.commons.io.filefilter.FileFilterUtils;
@@ -326,7 +325,6 @@ public class FileUtils {
      * @param directory directory to clean
      * @throws IOException              in case cleaning is unsuccessful
      * @throws IllegalArgumentException if {@code directory} does not exist or is not a directory
-     * @see #forceDelete(File)
      */
     public static void cleanDirectory(final File directory) throws IOException {
         final File[] files = verifiedListFiles(directory);
@@ -351,7 +349,6 @@ public class FileUtils {
      * @param directory directory to clean, must not be {@code null}
      * @throws NullPointerException if the directory is {@code null}
      * @throws IOException          in case cleaning is unsuccessful
-     * @see #forceDeleteOnExit(File)
      */
     private static void cleanDirectoryOnExit(final File directory) throws IOException {
         final File[] files = verifiedListFiles(directory);
@@ -1440,7 +1437,7 @@ public class FileUtils {
     public static void forceDelete(final File file) throws IOException {
         final Counters.PathCounters deleteCounters;
         try {
-            deleteCounters = PathUtils.delete(file.toPath(), StandardDeleteOption.OVERRIDE_READ_ONLY);
+            deleteCounters = PathUtils.delete(file.toPath());
         } catch (IOException e) {
             throw new IOException("Unable to delete file: " + file, e);
         }
diff --git a/src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java b/src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java
index 80546c0f..f56ee7d1 100644
--- a/src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java
+++ b/src/main/java/org/apache/commons/io/file/CleaningPathVisitor.java
@@ -20,7 +20,6 @@ package org.apache.commons.io.file;
 import java.io.IOException;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
-import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Arrays;
@@ -54,7 +53,6 @@ public class CleaningPathVisitor extends CountingPathVisitor {
     }
 
     private final String[] skip;
-    private final boolean overrideReadOnly;
 
     /**
      * Constructs a new visitor that deletes files except for the files and directories explicitly given.
@@ -63,24 +61,10 @@ public class CleaningPathVisitor extends CountingPathVisitor {
      * @param skip The files to skip deleting.
      */
     public CleaningPathVisitor(final PathCounters pathCounter, final String... skip) {
-        this(pathCounter, PathUtils.EMPTY_DELETE_OPTION_ARRAY, skip);
-    }
-
-    /**
-     * Constructs a new visitor that deletes files except for the files and directories explicitly given.
-     *
-     * @param pathCounter How to count visits.
-     * @param deleteOption options indicating how deletion is handled.
-     * @param skip The files to skip deleting.
-     * @since 2.8.0
-     */
-    public CleaningPathVisitor(final PathCounters pathCounter, final DeleteOption[] deleteOption,
-        final String... skip) {
         super(pathCounter);
         final String[] temp = skip != null ? skip.clone() : EMPTY_STRING_ARRAY;
         Arrays.sort(temp);
         this.skip = temp;
-        this.overrideReadOnly = StandardDeleteOption.overrideReadOnly(deleteOption);
     }
 
     /**
@@ -101,11 +85,7 @@ public class CleaningPathVisitor extends CountingPathVisitor {
 
     @Override
     public FileVisitResult visitFile(final Path file, final BasicFileAttributes attributes) throws IOException {
-        // Files.deleteIfExists() never follows links, so use LinkOption.NOFOLLOW_LINKS in other calls to Files.
-        if (accept(file) && Files.exists(file, LinkOption.NOFOLLOW_LINKS)) {
-            if (overrideReadOnly) {
-                PathUtils.setReadOnly(file, false, LinkOption.NOFOLLOW_LINKS);
-            }
+        if (accept(file) && Files.exists(file)) {
             Files.deleteIfExists(file);
         }
         updateFileCounters(file, attributes);
diff --git a/src/main/java/org/apache/commons/io/file/DeleteOption.java b/src/main/java/org/apache/commons/io/file/DeleteOption.java
deleted file mode 100644
index 3fe21add..00000000
--- a/src/main/java/org/apache/commons/io/file/DeleteOption.java
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.commons.io.file;
-
-/**
- * An object that configures how to delete a file.
- *
- * <p>
- * The {@link StandardDeleteOption} enumeration type defines our standard options.
- * </p>
- *
- * @see StandardDeleteOption
- * @since 2.8.0
- */
-public interface DeleteOption {
-    // empty
-}
diff --git a/src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java b/src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java
index 74376501..2d6405db 100644
--- a/src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java
+++ b/src/main/java/org/apache/commons/io/file/DeletingPathVisitor.java
@@ -20,7 +20,6 @@ package org.apache.commons.io.file;
 import java.io.IOException;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
-import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.util.Arrays;
@@ -55,7 +54,6 @@ public class DeletingPathVisitor extends CountingPathVisitor {
     }
 
     private final String[] skip;
-    private final boolean overrideReadOnly;
 
     /**
      * Constructs a new visitor that deletes files except for the files and directories explicitly given.
@@ -65,23 +63,10 @@ public class DeletingPathVisitor extends CountingPathVisitor {
      * @param skip The files to skip deleting.
      */
     public DeletingPathVisitor(final PathCounters pathCounter, final String... skip) {
-        this(pathCounter, PathUtils.EMPTY_DELETE_OPTION_ARRAY, skip);
-    }
-
-    /**
-     * Constructs a new visitor that deletes files except for the files and directories explicitly given.
-     *
-     * @param pathCounter How to count visits.
-     * @param deleteOption options indicating how deletion is handled.
-     * @param skip The files to skip deleting.
-     * @since 2.8.0
-     */
-    public DeletingPathVisitor(final PathCounters pathCounter, final DeleteOption[] deleteOption, final String... skip) {
         super(pathCounter);
         final String[] temp = skip != null ? skip.clone() : EMPTY_STRING_ARRAY;
         Arrays.sort(temp);
         this.skip = temp;
-        this.overrideReadOnly = StandardDeleteOption.overrideReadOnly(deleteOption);
     }
 
     /**
@@ -110,11 +95,7 @@ public class DeletingPathVisitor extends CountingPathVisitor {
 
     @Override
     public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
-        // Files.deleteIfExists() never follows links, so use LinkOption.NOFOLLOW_LINKS in other calls to Files.
-        if (accept(file) && Files.exists(file, LinkOption.NOFOLLOW_LINKS)) {
-            if (overrideReadOnly) {
-                PathUtils.setReadOnly(file, false, LinkOption.NOFOLLOW_LINKS);
-            }
+        if (accept(file) && Files.exists(file)) {
             Files.deleteIfExists(file);
         }
         updateFileCounters(file, attrs);
diff --git a/src/main/java/org/apache/commons/io/file/PathUtils.java b/src/main/java/org/apache/commons/io/file/PathUtils.java
index d370ef0b..6f5a8c30 100644
--- a/src/main/java/org/apache/commons/io/file/PathUtils.java
+++ b/src/main/java/org/apache/commons/io/file/PathUtils.java
@@ -27,16 +27,12 @@ import java.nio.file.FileVisitOption;
 import java.nio.file.FileVisitor;
 import java.nio.file.Files;
 import java.nio.file.LinkOption;
-import java.nio.file.NoSuchFileException;
+import java.nio.file.NotDirectoryException;
 import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.attribute.AclEntry;
 import java.nio.file.attribute.AclFileAttributeView;
-import java.nio.file.attribute.DosFileAttributeView;
-import java.nio.file.attribute.PosixFileAttributeView;
-import java.nio.file.attribute.PosixFileAttributes;
-import java.nio.file.attribute.PosixFilePermission;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -80,7 +76,7 @@ public final class PathUtils {
          * @throws IOException if an I/O error is thrown by a visitor method.
          */
         private RelativeSortedPaths(final Path dir1, final Path dir2, final int maxDepth,
-            final LinkOption[] linkOptions, final FileVisitOption[] fileVisitOptions) throws IOException {
+                final LinkOption[] linkOptions, final FileVisitOption[] fileVisitOptions) throws IOException {
             List<Path> tmpRelativeDirList1 = null;
             List<Path> tmpRelativeDirList2 = null;
             List<Path> tmpRelativeFileList1 = null;
@@ -95,10 +91,10 @@ public final class PathUtils {
                 if (!parentDirExists1 || !parentDirExists2) {
                     equals = !parentDirExists1 && !parentDirExists2;
                 } else {
-                    final AccumulatorPathVisitor visitor1 = accumulate(dir1, maxDepth, fileVisitOptions);
-                    final AccumulatorPathVisitor visitor2 = accumulate(dir2, maxDepth, fileVisitOptions);
+                    AccumulatorPathVisitor visitor1 = accumulate(dir1, maxDepth, fileVisitOptions);
+                    AccumulatorPathVisitor visitor2 = accumulate(dir2, maxDepth, fileVisitOptions);
                     if (visitor1.getDirList().size() != visitor2.getDirList().size()
-                        || visitor1.getFileList().size() != visitor2.getFileList().size()) {
+                            || visitor1.getFileList().size() != visitor2.getFileList().size()) {
                         equals = false;
                     } else {
                         tmpRelativeDirList1 = visitor1.relativizeDirectories(dir1, true, null);
@@ -120,13 +116,6 @@ public final class PathUtils {
         }
     }
 
-    /**
-     * Empty {@link LinkOption} array.
-     *
-     * @since 2.8.0
-     */
-    public static final DeleteOption[] EMPTY_DELETE_OPTION_ARRAY = new DeleteOption[0];
-
     /**
      * Empty {@link FileVisitOption} array.
      */
@@ -152,9 +141,9 @@ public final class PathUtils {
      * @return file tree information.
      */
     private static AccumulatorPathVisitor accumulate(final Path directory, final int maxDepth,
-        final FileVisitOption[] fileVisitOptions) throws IOException {
+            final FileVisitOption[] fileVisitOptions) throws IOException {
         return visitFileTree(AccumulatorPathVisitor.withLongCounters(), directory,
-            toFileVisitOptionSet(fileVisitOptions), maxDepth);
+                toFileVisitOptionSet(fileVisitOptions), maxDepth);
     }
 
     /**
@@ -165,21 +154,22 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method.
      */
     public static PathCounters cleanDirectory(final Path directory) throws IOException {
-        return cleanDirectory(directory, EMPTY_DELETE_OPTION_ARRAY);
+        return cleanDirectory(directory, FileVisitOption.FOLLOW_LINKS);
     }
 
     /**
      * Cleans a directory including sub-directories without deleting directories.
      *
      * @param directory directory to clean.
-     * @param options options indicating how deletion is handled.
+     * @param fileVisitOptions See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.
      * @return The visitation path counters.
      * @throws IOException if an I/O error is thrown by a visitor method.
      * @since 2.8.0
      */
-    public static PathCounters cleanDirectory(final Path directory, final DeleteOption... options) throws IOException {
-        return visitFileTree(new CleaningPathVisitor(Counters.longPathCounters(), options), directory)
-            .getPathCounters();
+    public static PathCounters cleanDirectory(final Path directory, final FileVisitOption... fileVisitOptions)
+        throws IOException {
+        return visitFileTree(CleaningPathVisitor.withLongCounters(), directory, toFileVisitOptionSet(fileVisitOptions),
+            Integer.MAX_VALUE).getPathCounters();
     }
 
     /**
@@ -192,10 +182,10 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method.
      */
     public static PathCounters copyDirectory(final Path sourceDirectory, final Path targetDirectory,
-        final CopyOption... copyOptions) throws IOException {
+            final CopyOption... copyOptions) throws IOException {
         return visitFileTree(
-            new CopyDirectoryVisitor(Counters.longPathCounters(), sourceDirectory, targetDirectory, copyOptions),
-            sourceDirectory).getPathCounters();
+                new CopyDirectoryVisitor(Counters.longPathCounters(), sourceDirectory, targetDirectory, copyOptions),
+                sourceDirectory).getPathCounters();
     }
 
     /**
@@ -209,7 +199,7 @@ public final class PathUtils {
      * @see Files#copy(InputStream, Path, CopyOption...)
      */
     public static Path copyFile(final URL sourceFile, final Path targetFile, final CopyOption... copyOptions)
-        throws IOException {
+            throws IOException {
         try (final InputStream inputStream = sourceFile.openStream()) {
             Files.copy(inputStream, targetFile, copyOptions);
             return targetFile;
@@ -227,7 +217,7 @@ public final class PathUtils {
      * @see Files#copy(Path, Path, CopyOption...)
      */
     public static Path copyFileToDirectory(final Path sourceFile, final Path targetDirectory,
-        final CopyOption... copyOptions) throws IOException {
+            final CopyOption... copyOptions) throws IOException {
         return Files.copy(sourceFile, targetDirectory.resolve(sourceFile.getFileName()), copyOptions);
     }
 
@@ -242,7 +232,7 @@ public final class PathUtils {
      * @see Files#copy(InputStream, Path, CopyOption...)
      */
     public static Path copyFileToDirectory(final URL sourceFile, final Path targetDirectory,
-        final CopyOption... copyOptions) throws IOException {
+            final CopyOption... copyOptions) throws IOException {
         try (final InputStream inputStream = sourceFile.openStream()) {
             Files.copy(inputStream, targetDirectory.resolve(sourceFile.getFile()), copyOptions);
             return targetDirectory;
@@ -277,31 +267,7 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method or if an I/O error occurs.
      */
     public static PathCounters delete(final Path path) throws IOException {
-        return delete(path, EMPTY_DELETE_OPTION_ARRAY);
-    }
-
-    /**
-     * Deletes a file or directory. If the path is a directory, delete it and all sub-directories.
-     * <p>
-     * The difference between File.delete() and this method are:
-     * </p>
-     * <ul>
-     * <li>A directory to delete does not have to be empty.</li>
-     * <li>You get exceptions when a file or directory cannot be deleted; {@link java.io.File#delete()} returns a
-     * boolean.
-     * </ul>
-     *
-     * @param path file or directory to delete, must not be {@code null}
-     * @param options options indicating how deletion is handled.
-     * @return The visitor used to delete the given directory.
-     * @throws NullPointerException if the directory is {@code null}
-     * @throws IOException if an I/O error is thrown by a visitor method or if an I/O error occurs.
-     * @since 2.8.0
-     */
-    public static PathCounters delete(final Path path, final DeleteOption... options) throws IOException {
-        // File deletion through Files deletes links, not targets, so use LinkOption.NOFOLLOW_LINKS.
-        return Files.isDirectory(path, LinkOption.NOFOLLOW_LINKS) ? deleteDirectory(path, options)
-            : deleteFile(path, options);
+        return Files.isDirectory(path) ? deleteDirectory(path) : deleteFile(path);
     }
 
     /**
@@ -312,21 +278,20 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method.
      */
     public static PathCounters deleteDirectory(final Path directory) throws IOException {
-        return deleteDirectory(directory, EMPTY_DELETE_OPTION_ARRAY);
+        return deleteDirectory(directory, FileVisitOption.FOLLOW_LINKS);
     }
 
     /**
      * Deletes a directory including sub-directories.
      *
      * @param directory directory to delete.
-     * @param options options indicating how deletion is handled.
+     * @param fileVisitOptions See {@link Files#walkFileTree(Path,Set,int,FileVisitor)}.
      * @return The visitor used to delete the given directory.
      * @throws IOException if an I/O error is thrown by a visitor method.
      * @since 2.8.0
      */
-    public static PathCounters deleteDirectory(final Path directory, final DeleteOption... options) throws IOException {
-        return visitFileTree(new DeletingPathVisitor(Counters.longPathCounters(), options), directory)
-            .getPathCounters();
+    public static PathCounters deleteDirectory(final Path directory, final FileVisitOption... fileVisitOptions) throws IOException {
+        return visitFileTree(DeletingPathVisitor.withLongCounters(), directory).getPathCounters();
     }
 
     /**
@@ -335,33 +300,14 @@ public final class PathUtils {
      * @param file The file to delete.
      * @return A visitor with path counts set to 1 file, 0 directories, and the size of the deleted file.
      * @throws IOException if an I/O error occurs.
-     * @throws NoSuchFileException if the file is a directory.
+     * @throws NotDirectoryException if the file is a directory.
      */
     public static PathCounters deleteFile(final Path file) throws IOException {
-        return deleteFile(file, EMPTY_DELETE_OPTION_ARRAY);
-    }
-
-    /**
-     * Deletes the given file.
-     *
-     * @param file The file to delete.
-     * @param options options indicating how deletion is handled.
-     * @return A visitor with path counts set to 1 file, 0 directories, and the size of the deleted file.
-     * @throws IOException if an I/O error occurs.
-     * @throws NoSuchFileException if the file is a directory.
-     * @since 2.8.0
-     */
-    public static PathCounters deleteFile(final Path file, final DeleteOption... options) throws IOException {
-        // Files.deleteIfExists() never follows links, so use LinkOption.NOFOLLOW_LINKS in other calls to Files.
-        if (Files.isDirectory(file, LinkOption.NOFOLLOW_LINKS)) {
-            throw new NoSuchFileException(file.toString());
+        if (Files.isDirectory(file)) {
+            throw new NotDirectoryException(file.toString());
         }
         final PathCounters pathCounts = Counters.longPathCounters();
-        final boolean exists = Files.exists(file, LinkOption.NOFOLLOW_LINKS);
-        final long size = exists ? Files.size(file) : 0;
-        if (overrideReadOnly(options) && exists) {
-            setReadOnly(file, false, LinkOption.NOFOLLOW_LINKS);
-        }
+        final long size = Files.exists(file) ? Files.size(file) : 0;
         if (Files.deleteIfExists(file)) {
             pathCounts.getFileCounter().increment();
             pathCounts.getByteCounter().add(size);
@@ -369,24 +315,6 @@ public final class PathUtils {
         return pathCounts;
     }
 
-    /**
-     * Returns true if the given options contain {@link StandardDeleteOption#OVERRIDE_READ_ONLY}.
-     *
-     * @param options the array to test
-     * @return true if the given options contain {@link StandardDeleteOption#OVERRIDE_READ_ONLY}.
-     */
-    private static boolean overrideReadOnly(final DeleteOption[] options) {
-        if (options == null) {
-            return false;
-        }
-        for (final DeleteOption deleteOption : options) {
-            if (deleteOption == StandardDeleteOption.OVERRIDE_READ_ONLY) {
-                return true;
-            }
-        }
-        return false;
-    }
-
     /**
      * Compares the file sets of two Paths to determine if they are equal or not while considering file contents. The
      * comparison includes all files in all sub-directories.
@@ -398,7 +326,7 @@ public final class PathUtils {
      */
     public static boolean directoryAndFileContentEquals(final Path path1, final Path path2) throws IOException {
         return directoryAndFileContentEquals(path1, path2, EMPTY_LINK_OPTION_ARRAY, EMPTY_OPEN_OPTION_ARRAY,
-            EMPTY_FILE_VISIT_OPTION_ARRAY);
+                EMPTY_FILE_VISIT_OPTION_ARRAY);
     }
 
     /**
@@ -414,8 +342,8 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method
      */
     public static boolean directoryAndFileContentEquals(final Path path1, final Path path2,
-        final LinkOption[] linkOptions, final OpenOption[] openOptions, final FileVisitOption[] fileVisitOption)
-        throws IOException {
+            final LinkOption[] linkOptions, final OpenOption[] openOptions, final FileVisitOption[] fileVisitOption)
+            throws IOException {
         // First walk both file trees and gather normalized paths.
         if (path1 == null && path2 == null) {
             return true;
@@ -427,7 +355,7 @@ public final class PathUtils {
             return true;
         }
         final RelativeSortedPaths relativeSortedPaths = new RelativeSortedPaths(path1, path2, Integer.MAX_VALUE,
-            linkOptions, fileVisitOption);
+                linkOptions, fileVisitOption);
         // If the normalized path names and counts are not the same, no need to compare contents.
         if (!relativeSortedPaths.equals) {
             return false;
@@ -435,7 +363,7 @@ public final class PathUtils {
         // Both visitors contain the same normalized paths, we can compare file contents.
         final List<Path> fileList1 = relativeSortedPaths.relativeFileList1;
         final List<Path> fileList2 = relativeSortedPaths.relativeFileList2;
-        for (final Path path : fileList1) {
+        for (Path path : fileList1) {
             final int binarySearch = Collections.binarySearch(fileList2, path);
             if (binarySearch > -1) {
                 if (!fileContentEquals(path1.resolve(path), path2.resolve(path), linkOptions, openOptions)) {
@@ -459,7 +387,7 @@ public final class PathUtils {
      */
     public static boolean directoryContentEquals(final Path path1, final Path path2) throws IOException {
         return directoryContentEquals(path1, path2, Integer.MAX_VALUE, EMPTY_LINK_OPTION_ARRAY,
-            EMPTY_FILE_VISIT_OPTION_ARRAY);
+                EMPTY_FILE_VISIT_OPTION_ARRAY);
     }
 
     /**
@@ -475,7 +403,7 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method
      */
     public static boolean directoryContentEquals(final Path path1, final Path path2, final int maxDepth,
-        final LinkOption[] linkOptions, final FileVisitOption[] fileVisitOptions) throws IOException {
+            LinkOption[] linkOptions, FileVisitOption[] fileVisitOptions) throws IOException {
         return new RelativeSortedPaths(path1, path2, maxDepth, linkOptions, fileVisitOptions).equals;
     }
 
@@ -512,7 +440,7 @@ public final class PathUtils {
      * @see org.apache.commons.io.FileUtils#contentEquals(java.io.File, java.io.File)
      */
     public static boolean fileContentEquals(final Path path1, final Path path2, final LinkOption[] linkOptions,
-        final OpenOption[] openOptions) throws IOException {
+            final OpenOption[] openOptions) throws IOException {
         if (path1 == null && path2 == null) {
             return true;
         }
@@ -547,7 +475,7 @@ public final class PathUtils {
             return true;
         }
         try (final InputStream inputStream1 = Files.newInputStream(nPath1, openOptions);
-            final InputStream inputStream2 = Files.newInputStream(nPath2, openOptions)) {
+                final InputStream inputStream2 = Files.newInputStream(nPath2, openOptions)) {
             return IOUtils.contentEquals(inputStream1, inputStream2);
         }
     }
@@ -613,8 +541,8 @@ public final class PathUtils {
      * @param comparator How to sort.
      * @return A collection of relativized paths, optionally sorted.
      */
-    static List<Path> relativize(final Collection<Path> collection, final Path parent, final boolean sort,
-        final Comparator<? super Path> comparator) {
+    static List<Path> relativize(Collection<Path> collection, Path parent, boolean sort,
+            Comparator<? super Path> comparator) {
         Stream<Path> stream = collection.stream().map(parent::relativize);
         if (sort) {
             stream = comparator == null ? stream.sorted() : stream.sorted(comparator);
@@ -622,43 +550,6 @@ public final class PathUtils {
         return stream.collect(Collectors.toList());
     }
 
-    /**
-     * Sets the given Path to the {@code readOnly} value.
-     * <p>
-     * This behavior is OS dependent.
-     * </p>
-     *
-     * @param path The path to set.
-     * @param readOnly true for read-only, false for not read-only.
-     * @param options options indicating how symbolic links are handled.
-     * @return The given path.
-     * @throws IOException if an I/O error occurs.
-     * @since 2.8.0
-     */
-    public static Path setReadOnly(final Path path, final boolean readOnly, final LinkOption... options)
-        throws IOException {
-        final DosFileAttributeView fileAttributeView = Files.getFileAttributeView(path, DosFileAttributeView.class,
-            options);
-        if (fileAttributeView != null) {
-            fileAttributeView.setReadOnly(readOnly);
-            return path;
-        }
-        final PosixFileAttributeView posixFileAttributeView = Files.getFileAttributeView(path,
-            PosixFileAttributeView.class, options);
-        if (posixFileAttributeView != null) {
-            // Works on Windows but not on Ubuntu:
-            // Files.setAttribute(path, "unix:readonly", readOnly, options);
-            // java.lang.IllegalArgumentException: 'unix:readonly' not recognized
-            final PosixFileAttributes readAttributes = posixFileAttributeView.readAttributes();
-            final Set<PosixFilePermission> permissions = readAttributes.permissions();
-            permissions.remove(PosixFilePermission.OWNER_WRITE);
-            permissions.remove(PosixFilePermission.GROUP_WRITE);
-            permissions.remove(PosixFilePermission.OTHERS_WRITE);
-            return Files.setPosixFilePermissions(path, permissions);
-        }
-        throw new IOException("No DosFileAttributeView or PosixFileAttributeView for " + path);
-    }
-
     /**
      * Converts an array of {@link FileVisitOption} to a {@link Set}.
      *
@@ -667,7 +558,7 @@ public final class PathUtils {
      */
     static Set<FileVisitOption> toFileVisitOptionSet(final FileVisitOption... fileVisitOptions) {
         return fileVisitOptions == null ? EnumSet.noneOf(FileVisitOption.class)
-            : Arrays.stream(fileVisitOptions).collect(Collectors.toSet());
+                : Arrays.stream(fileVisitOptions).collect(Collectors.toSet());
     }
 
     /**
@@ -683,7 +574,7 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method
      */
     public static <T extends FileVisitor<? super Path>> T visitFileTree(final T visitor, final Path directory)
-        throws IOException {
+            throws IOException {
         Files.walkFileTree(directory, visitor);
         return visitor;
     }
@@ -702,8 +593,8 @@ public final class PathUtils {
      *
      * @throws IOException if an I/O error is thrown by a visitor method
      */
-    public static <T extends FileVisitor<? super Path>> T visitFileTree(final T visitor, final Path start,
-        final Set<FileVisitOption> options, final int maxDepth) throws IOException {
+    public static <T extends FileVisitor<? super Path>> T visitFileTree(T visitor, Path start,
+            Set<FileVisitOption> options, int maxDepth) throws IOException {
         Files.walkFileTree(start, options, maxDepth, visitor);
         return visitor;
     }
@@ -722,7 +613,7 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method
      */
     public static <T extends FileVisitor<? super Path>> T visitFileTree(final T visitor, final String first,
-        final String... more) throws IOException {
+            final String... more) throws IOException {
         return visitFileTree(visitor, Paths.get(first, more));
     }
 
@@ -739,7 +630,7 @@ public final class PathUtils {
      * @throws IOException if an I/O error is thrown by a visitor method
      */
     public static <T extends FileVisitor<? super Path>> T visitFileTree(final T visitor, final URI uri)
-        throws IOException {
+            throws IOException {
         return visitFileTree(visitor, Paths.get(uri));
     }
 
diff --git a/src/main/java/org/apache/commons/io/file/StandardDeleteOption.java b/src/main/java/org/apache/commons/io/file/StandardDeleteOption.java
deleted file mode 100644
index e7343cb8..00000000
--- a/src/main/java/org/apache/commons/io/file/StandardDeleteOption.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.commons.io.file;
-
-/**
- * Defines the standard delete options.
- *
- * @since 2.8.0
- */
-public enum StandardDeleteOption implements DeleteOption {
-
-    /**
-     * Overrides the read-only attribute to allow deletion.
-     */
-    OVERRIDE_READ_ONLY;
-
-    /**
-     * Returns true if the given options contain {@link StandardDeleteOption#OVERRIDE_READ_ONLY}.
-     *
-     * For now, assume the array is not sorted.
-     *
-     * @param options the array to test
-     * @return true if the given options contain {@link StandardDeleteOption#OVERRIDE_READ_ONLY}.
-     */
-    public static boolean overrideReadOnly(final DeleteOption[] options) {
-        if (options == null || options.length == 0) {
-            return false;
-        }
-        for (final DeleteOption deleteOption : options) {
-            if (deleteOption == StandardDeleteOption.OVERRIDE_READ_ONLY) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-}
