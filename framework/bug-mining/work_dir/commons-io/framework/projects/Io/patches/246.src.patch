diff --git a/src/main/java/org/apache/commons/io/FileUtils.java b/src/main/java/org/apache/commons/io/FileUtils.java
index bcfd3893..af677b30 100644
--- a/src/main/java/org/apache/commons/io/FileUtils.java
+++ b/src/main/java/org/apache/commons/io/FileUtils.java
@@ -45,23 +45,18 @@ import java.time.chrono.ChronoLocalDateTime;
 import java.time.chrono.ChronoZonedDateTime;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
 import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import java.util.zip.CRC32;
 import java.util.zip.CheckedInputStream;
 import java.util.zip.Checksum;
 
-import org.apache.commons.io.file.AccumulatorPathVisitor;
 import org.apache.commons.io.file.Counters;
-import org.apache.commons.io.file.PathFilter;
 import org.apache.commons.io.file.PathUtils;
-import org.apache.commons.io.filefilter.FileEqualsFileFilter;
-import org.apache.commons.io.filefilter.FileFileFilter;
+import org.apache.commons.io.filefilter.DirectoryFileFilter;
+import org.apache.commons.io.filefilter.FalseFileFilter;
 import org.apache.commons.io.filefilter.IOFileFilter;
 import org.apache.commons.io.filefilter.SuffixFileFilter;
 import org.apache.commons.io.filefilter.TrueFileFilter;
@@ -1588,6 +1583,65 @@ public class FileUtils {
         return System.getProperty("user.home");
     }
 
+    /**
+     * Finds files within a given directory (and optionally its
+     * subdirectories). All files found are filtered by an IOFileFilter.
+     *
+     * @param files                 the collection of files found.
+     * @param directory             the directory to search in.
+     * @param filter                the filter to apply to files and directories.
+     * @param includeSubDirectories indicates if will include the subdirectories themselves
+     */
+    private static void innerListFiles(final Collection<File> files, final File directory,
+                                       final IOFileFilter filter, final boolean includeSubDirectories) {
+        final File[] found = directory.listFiles((FileFilter) filter);
+
+        if (found != null) {
+            for (final File file : found) {
+                if (file.isDirectory()) {
+                    if (includeSubDirectories) {
+                        files.add(file);
+                    }
+                    innerListFiles(files, file, filter, includeSubDirectories);
+                } else {
+                    files.add(file);
+                }
+            }
+        }
+    }
+
+    /**
+     * Finds files within a given directory (and optionally its
+     * subdirectories). All files found are filtered by an IOFileFilter.
+     *
+     * @param directory             the directory to search in
+     * @param fileFilter            filter to apply when finding files.
+     * @param dirFilter             optional filter to apply when finding subdirectories.
+     *                              If this parameter is {@code null}, subdirectories will not be included in the
+     *                              search. Use TrueFileFilter.INSTANCE to match all directories.
+     * @param includeSubDirectories indicates if will include the subdirectories themselves
+     * @return a collection of java.io.File with the matching files
+     * @see org.apache.commons.io.FileUtils#listFiles
+     * @see org.apache.commons.io.filefilter.FileFilterUtils
+     * @see org.apache.commons.io.filefilter.NameFileFilter
+     */
+    private static Collection<File> innerListFilesOrDirectories(
+            final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter,
+            final boolean includeSubDirectories) {
+        validateListFilesParameters(directory, fileFilter);
+
+        final IOFileFilter effFileFilter = setUpEffectiveFileFilter(fileFilter);
+        final IOFileFilter effDirFilter = setUpEffectiveDirFilter(dirFilter);
+
+        //Find files
+        final Collection<File> files = new java.util.LinkedList<>();
+        if (includeSubDirectories) {
+            files.add(directory);
+        }
+        innerListFiles(files, directory, effFileFilter.or(effDirFilter), includeSubDirectories);
+        return files;
+    }
+
     /**
      * Tests if the specified {@code File} is newer than the specified {@code ChronoLocalDate}
      * at the current time.
@@ -1952,14 +2006,12 @@ public class FileUtils {
     }
 
     /**
-     * Iterates over the files in given directory (and optionally
+     * Allows iteration over the files in given directory (and optionally
      * its subdirectories).
      * <p>
-     * The resulting iterator MUST be consumed in its entirety in order to close its underlying stream.
-     * </p>
-     * <p>
-     * <p>
-     * All files found are filtered by an IOFileFilter.
+     * All files found are filtered by an IOFileFilter. This method is
+     * based on {@link #listFiles(File, IOFileFilter, IOFileFilter)},
+     * which supports Iterable ('foreach' loop).
      * </p>
      *
      * @param directory  the directory to search in
@@ -1972,18 +2024,16 @@ public class FileUtils {
      * @see org.apache.commons.io.filefilter.NameFileFilter
      * @since 1.2
      */
-    public static Iterator<File> iterateFiles(final File directory, final IOFileFilter fileFilter,
-        final IOFileFilter dirFilter) {
+    public static Iterator<File> iterateFiles(
+            final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) {
         return listFiles(directory, fileFilter, dirFilter).iterator();
     }
 
     /**
-     * Iterates over the files in a given directory (and optionally
-     * its subdirectories) which match an array of extensions.
-     * <p>
-     * The resulting iterator MUST be consumed in its entirety in order to close its underlying stream.
-     * </p>
-     * <p>
+     * Allows iteration over the files in a given directory (and optionally
+     * its subdirectories) which match an array of extensions. This method
+     * is based on {@link #listFiles(File, String[], boolean)},
+     * which supports Iterable ('foreach' loop).
      *
      * @param directory  the directory to search in
      * @param extensions an array of extensions, ex. {"java","xml"}. If this
@@ -1992,23 +2042,18 @@ public class FileUtils {
      * @return an iterator of java.io.File with the matching files
      * @since 1.2
      */
-    public static Iterator<File> iterateFiles(final File directory, final String[] extensions,
-        final boolean recursive) {
-        try {
-            return StreamIterator.iterator(streamFiles(directory, recursive, extensions));
-        } catch (final IOException e) {
-            throw new IllegalStateException(e);
-        }
+    public static Iterator<File> iterateFiles(
+            final File directory, final String[] extensions, final boolean recursive) {
+        return listFiles(directory, extensions, recursive).iterator();
     }
 
     /**
-     * Iterates over the files in given directory (and optionally
+     * Allows iteration over the files in given directory (and optionally
      * its subdirectories).
      * <p>
-     * The resulting iterator MUST be consumed in its entirety in order to close its underlying stream.
-     * </p>
-     * <p>
-     * All files found are filtered by an IOFileFilter.
+     * All files found are filtered by an IOFileFilter. This method is
+     * based on {@link #listFilesAndDirs(File, IOFileFilter, IOFileFilter)},
+     * which supports Iterable ('foreach' loop).
      * </p>
      * <p>
      * The resulting iterator includes the subdirectories themselves.
@@ -2025,7 +2070,7 @@ public class FileUtils {
      * @since 2.2
      */
     public static Iterator<File> iterateFilesAndDirs(final File directory, final IOFileFilter fileFilter,
-        final IOFileFilter dirFilter) {
+                                                     final IOFileFilter dirFilter) {
         return listFilesAndDirs(directory, fileFilter, dirFilter).iterator();
     }
 
@@ -2087,17 +2132,6 @@ public class FileUtils {
         }
     }
 
-    private static AccumulatorPathVisitor listAccumulate(final File directory, final IOFileFilter fileFilter,
-        final IOFileFilter dirFilter) throws IOException {
-        final boolean isDirFilterSet = dirFilter != null;
-        final FileEqualsFileFilter rootFileFilter = new FileEqualsFileFilter(directory);
-        final PathFilter dirPathFilter = isDirFilterSet ? rootFileFilter.or(dirFilter) : rootFileFilter;
-        final AccumulatorPathVisitor visitor = new AccumulatorPathVisitor(Counters.noopPathCounters(), fileFilter,
-            dirPathFilter);
-        Files.walkFileTree(directory.toPath(), Collections.emptySet(), toMaxDepth(isDirFilterSet), visitor);
-        return visitor;
-    }
-
     /**
      * Finds files within a given directory (and optionally its
      * subdirectories). All files found are filtered by an IOFileFilter.
@@ -2128,13 +2162,8 @@ public class FileUtils {
      * @see org.apache.commons.io.filefilter.NameFileFilter
      */
     public static Collection<File> listFiles(
-        final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) {
-        try {
-            final AccumulatorPathVisitor visitor = listAccumulate(directory, fileFilter, dirFilter);
-            return visitor.getFileList().stream().map(Path::toFile).collect(Collectors.toList());
-        } catch (IOException e) {
-            throw new IllegalArgumentException(e);
-        }
+            final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) {
+        return innerListFilesOrDirectories(directory, fileFilter, dirFilter, false);
     }
 
     /**
@@ -2147,13 +2176,19 @@ public class FileUtils {
      * @param recursive  if true all subdirectories are searched as well
      * @return a collection of java.io.File with the matching files
      */
-    public static Collection<File> listFiles(final File directory, final String[] extensions, final boolean recursive) {
-        try {
-            return toList(streamFiles(directory, recursive, extensions));
-        } catch (final IOException e) {
-            throw new IllegalArgumentException(e);
+    public static Collection<File> listFiles(
+            final File directory, final String[] extensions, final boolean recursive) {
+        IOFileFilter filter;
+        if (extensions == null) {
+            filter = TrueFileFilter.INSTANCE;
+        } else {
+            filter = new SuffixFileFilter(toSuffixes(extensions));
         }
+        return listFiles(directory, filter,
+                recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE);
     }
+
+
     /**
      * Finds files within a given directory (and optionally its
      * subdirectories). All files found are filtered by an IOFileFilter.
@@ -2174,15 +2209,8 @@ public class FileUtils {
      * @since 2.2
      */
     public static Collection<File> listFilesAndDirs(
-        final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) {
-        try {
-            final AccumulatorPathVisitor visitor = listAccumulate(directory, fileFilter, dirFilter);
-            final List<Path> list = visitor.getFileList();
-            list.addAll(visitor.getDirList());
-            return list.stream().map(Path::toFile).collect(Collectors.toList());
-        } catch (IOException e) {
-            throw new IllegalStateException(e);
-        }
+            final File directory, final IOFileFilter fileFilter, final IOFileFilter dirFilter) {
+        return innerListFilesOrDirectories(directory, fileFilter, dirFilter, true);
     }
 
     /**
@@ -2379,6 +2407,7 @@ public class FileUtils {
         return new FileInputStream(file);
     }
 
+
     /**
      * Opens a {@link FileOutputStream} for the specified file, checking and
      * creating the parent directory if it does not exist.
@@ -2480,7 +2509,6 @@ public class FileUtils {
         return readFileToString(file, Charset.defaultCharset());
     }
 
-
     /**
      * Reads the contents of a file into a String.
      * The file is always closed.
@@ -2571,6 +2599,26 @@ public class FileUtils {
         }
     }
 
+    /**
+     * Returns a filter that accepts directories in addition to the {@link File} objects accepted by the given filter.
+     *
+     * @param dirFilter a base filter to add to
+     * @return a filter that accepts directories
+     */
+    private static IOFileFilter setUpEffectiveDirFilter(final IOFileFilter dirFilter) {
+        return dirFilter == null ? FalseFileFilter.INSTANCE : dirFilter.and(DirectoryFileFilter.INSTANCE);
+    }
+
+    /**
+     * Returns a filter that accepts files in addition to the {@link File} objects accepted by the given filter.
+     *
+     * @param fileFilter a base filter to add to
+     * @return a filter that accepts files
+     */
+    private static IOFileFilter setUpEffectiveFileFilter(final IOFileFilter fileFilter) {
+        return fileFilter.and(DirectoryFileFilter.INSTANCE.negate());
+    }
+
     /**
      * Returns the size of the specified file or directory. If the provided
      * {@link File} is a regular file, then the file's length is returned.
@@ -2733,30 +2781,6 @@ public class FileUtils {
         return size;
     }
 
-    /**
-     * Streams over the files in a given directory (and optionally
-     * its subdirectories) which match an array of extensions.
-     *
-     * @param directory  the directory to search in
-     * @param recursive  if true all subdirectories are searched as well
-     * @param extensions an array of extensions, ex. {"java","xml"}. If this
-     *                   parameter is {@code null}, all files are returned.
-     * @return an iterator of java.io.File with the matching files
-     * @throws IOException if an I/O error is thrown when accessing the starting file.
-     * @since 2.9.0
-     */
-    public static Stream<File> streamFiles(final File directory, final boolean recursive, final String... extensions)
-        throws IOException {
-        IOFileFilter filter;
-        if (extensions == null) {
-            filter = FileFileFilter.INSTANCE;
-        } else {
-            filter = FileFileFilter.INSTANCE.and(new SuffixFileFilter(toSuffixes(extensions)));
-        }
-        // We use filters that do not need file attributes so pass false.
-        return PathUtils.walk(directory.toPath(), filter, toMaxDepth(recursive), false).map(Path::toFile);
-    }
-
     /**
      * Convert from a <code>URL</code> to a <code>File</code>.
      * <p>
@@ -2820,20 +2844,6 @@ public class FileUtils {
         return files;
     }
 
-    private static List<File> toList(Stream<File> stream) {
-        return stream.collect(Collectors.toList());
-    }
-
-    /**
-     * Converts whether or not to recurse into a recursion max depth.
-     *
-     * @param recursive whether or not to recurse 
-     * @return the recursion depth
-     */
-    private static int toMaxDepth(final boolean recursive) {
-        return recursive ? Integer.MAX_VALUE : 1;
-    }
-
     /**
      * Converts an array of file extensions to suffixes for use
      * with IOFileFilters.
@@ -2893,6 +2903,23 @@ public class FileUtils {
         return urls;
     }
 
+    /**
+     * Validates the given arguments.
+     * <ul>
+     * <li>Throws {@link IllegalArgumentException} if {@code directory} is not a directory</li>
+     * <li>Throws {@link NullPointerException} if {@code fileFilter} is null</li>
+     * </ul>
+     *
+     * @param directory  The File to test
+     * @param fileFilter The IOFileFilter to test
+     */
+    private static void validateListFilesParameters(final File directory, final IOFileFilter fileFilter) {
+        if (!directory.isDirectory()) {
+            throw new IllegalArgumentException("Parameter 'directory' is not a directory: " + directory);
+        }
+        Objects.requireNonNull(fileFilter, "fileFilter");
+    }
+
     /**
      * Validates the given arguments.
      * <ul>
diff --git a/src/main/java/org/apache/commons/io/StreamIterator.java b/src/main/java/org/apache/commons/io/StreamIterator.java
deleted file mode 100644
index 5bc98e41..00000000
--- a/src/main/java/org/apache/commons/io/StreamIterator.java
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.commons.io;
-
-import java.io.Closeable;
-import java.util.Iterator;
-import java.util.Objects;
-import java.util.stream.Stream;
-
-/**
- * Wraps and presents a stream as a closable iterator resource that automatically closes itself when reaching the end
- * of stream.
- *
- * @param <E> The stream and iterator type.
- * @since 2.9.0
- */
-class StreamIterator<E> implements Iterator<E>, Closeable {
-
-    /**
-     * Wraps and presents a stream as a closable resource that automatically closes itself when reaching the end of
-     * stream.
-     * <h2>Warning</h2>
-     * <p>
-     * In order to close the stream, the call site MUST either close the stream it allocated OR call the iterator until
-     * the end.
-     * </p>
-     * 
-     * @param <T> The stream and iterator type.
-     * @param stream The stream iterate.
-     * @return A new iterator.
-     */
-    @SuppressWarnings("resource") // Caller MUST close or iterate to the end.
-    public static <T> Iterator<T> iterator(final Stream<T> stream) {
-        return new StreamIterator<>(stream).iterator;
-    }
-
-    private StreamIterator(final Stream<E> stream) {
-        super();
-        this.stream = Objects.requireNonNull(stream, "stream");
-        this.iterator = stream.iterator();
-    }
-
-    private final Iterator<E> iterator;
-    private final Stream<E> stream;
-
-    @Override
-    public boolean hasNext() {
-        final boolean hasNext = iterator.hasNext();
-        if (!hasNext) {
-            close();
-        }
-        return hasNext;
-    }
-
-    @Override
-    public E next() {
-        final E next = iterator.next();
-        if (next == null) {
-            close();
-        }
-        return next;
-    }
-
-    /**
-     * Closes the underlying stream.
-     */
-    @Override
-    public void close() {
-        stream.close();
-
-    }
-
-}
diff --git a/src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java b/src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java
index 7cbe3946..a2596409 100644
--- a/src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java
+++ b/src/main/java/org/apache/commons/io/file/AccumulatorPathVisitor.java
@@ -35,7 +35,7 @@ import org.apache.commons.io.file.Counters.PathCounters;
  * <h2>Example</h2>
  *
  * <pre>
- * Path dir = Paths.get("");
+ * Path dir = Paths.get(".");
  * // We are interested in files older than one day
  * long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
  * AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new AgeFileFilter(cutoff));
@@ -70,14 +70,12 @@ public class AccumulatorPathVisitor extends CountingPathVisitor {
     /**
      * Creates a new instance configured with a BigInteger {@link PathCounters}.
      *
-     * @param fileFilter Filters files to accumulate and count.
-     * @param dirFilter Filters directories to accumulate and count.
+     * @param pathFilter Filters files to accumulate and count.
      * @return a new instance configured with a long {@link PathCounters}.
      * @since 2.9.0
      */
-    public static AccumulatorPathVisitor withBigIntegerCounters(final PathFilter fileFilter,
-        final PathFilter dirFilter) {
-        return new AccumulatorPathVisitor(Counters.bigIntegerPathCounters(), fileFilter, dirFilter);
+    public static AccumulatorPathVisitor withBigIntegerCounters(final PathFilter pathFilter) {
+        return new AccumulatorPathVisitor(Counters.bigIntegerPathCounters(), pathFilter);
     }
 
     /**
@@ -92,13 +90,12 @@ public class AccumulatorPathVisitor extends CountingPathVisitor {
     /**
      * Creates a new instance configured with a long {@link PathCounters}.
      *
-     * @param fileFilter Filters files to accumulate and count.
-     * @param dirFilter Filters directories to accumulate and count.
+     * @param pathFilter Filters files to accumulate and count.
      * @return a new instance configured with a long {@link PathCounters}.
      * @since 2.9.0
      */
-    public static AccumulatorPathVisitor withLongCounters(final PathFilter fileFilter, final PathFilter dirFilter) {
-        return new AccumulatorPathVisitor(Counters.longPathCounters(), fileFilter, dirFilter);
+    public static AccumulatorPathVisitor withLongCounters(final PathFilter pathFilter) {
+        return new AccumulatorPathVisitor(Counters.longPathCounters(), pathFilter);
     }
 
     private final List<Path> dirList = new ArrayList<>();
@@ -127,13 +124,11 @@ public class AccumulatorPathVisitor extends CountingPathVisitor {
      * Constructs a new instance.
      *
      * @param pathCounter How to count path visits.
-     * @param pathFilter Filters which files to count.
-     * @param dirFilter Filters which directories to count.
+     * @param pathFilter Filters which paths to count.
      * @since 2.9.0
      */
-    public AccumulatorPathVisitor(final PathCounters pathCounter, final PathFilter pathFilter,
-        final PathFilter dirFilter) {
-        super(pathCounter, pathFilter, dirFilter);
+    public AccumulatorPathVisitor(final PathCounters pathCounter, final PathFilter pathFilter) {
+        super(pathCounter, pathFilter);
     }
 
     private void add(final List<Path> list, final Path dir) {
diff --git a/src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java b/src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java
index c2fdf8b0..72bca112 100644
--- a/src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java
+++ b/src/main/java/org/apache/commons/io/file/CopyDirectoryVisitor.java
@@ -59,16 +59,15 @@ public class CopyDirectoryVisitor extends CountingPathVisitor {
      * Constructs a new visitor that deletes files except for the files and directories explicitly given.
      *
      * @param pathCounter How to count visits.
-     * @param fileFilter How to filter file paths.
-     * @param dirFilter How to filter directory paths.
+     * @param pathFilter How to filter paths.
      * @param sourceDirectory The source directory
      * @param targetDirectory The target directory
      * @param copyOptions Specifies how the copying should be done.
      * @since 2.9.0
      */
-    public CopyDirectoryVisitor(final PathCounters pathCounter, final PathFilter fileFilter, final PathFilter dirFilter,
-        final Path sourceDirectory, final Path targetDirectory, final CopyOption... copyOptions) {
-        super(pathCounter, fileFilter, dirFilter);
+    public CopyDirectoryVisitor(final PathCounters pathCounter, final PathFilter pathFilter, final Path sourceDirectory, final Path targetDirectory,
+        final CopyOption... copyOptions) {
+        super(pathCounter, pathFilter);
         this.sourceDirectory = sourceDirectory;
         this.targetDirectory = targetDirectory;
         this.copyOptions = copyOptions == null ? PathUtils.EMPTY_COPY_OPTIONS : copyOptions.clone();
diff --git a/src/main/java/org/apache/commons/io/file/CountingPathVisitor.java b/src/main/java/org/apache/commons/io/file/CountingPathVisitor.java
index 53b41c82..7d34e597 100644
--- a/src/main/java/org/apache/commons/io/file/CountingPathVisitor.java
+++ b/src/main/java/org/apache/commons/io/file/CountingPathVisitor.java
@@ -55,8 +55,7 @@ public class CountingPathVisitor extends SimplePathVisitor {
     }
 
     private final PathCounters pathCounters;
-    private final PathFilter fileFilter;
-    private final PathFilter dirFilter;
+    private final PathFilter pathFilter;
 
     /**
      * Constructs a new instance.
@@ -64,22 +63,20 @@ public class CountingPathVisitor extends SimplePathVisitor {
      * @param pathCounter How to count path visits.
      */
     public CountingPathVisitor(final PathCounters pathCounter) {
-        this(pathCounter, TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);
+        this(pathCounter, TrueFileFilter.INSTANCE);
     }
 
     /**
      * Constructs a new instance.
      *
      * @param pathCounter How to count path visits.
-     * @param fileFilter Filters which files to count.
-     * @param dirFilter Filters which directories to count.
+     * @param pathFilter Filters which paths to count.
      * @since 2.9.0
      */
-    public CountingPathVisitor(final PathCounters pathCounter, final PathFilter fileFilter, PathFilter dirFilter) {
+    public CountingPathVisitor(final PathCounters pathCounter, final PathFilter pathFilter) {
         super();
         this.pathCounters = Objects.requireNonNull(pathCounter, "pathCounter");
-        this.fileFilter = Objects.requireNonNull(fileFilter, "fileFilter");
-        this.dirFilter = Objects.requireNonNull(dirFilter, "dirFilter");
+        this.pathFilter = Objects.requireNonNull(pathFilter, "pathFilter");
     }
 
     @Override
@@ -113,12 +110,6 @@ public class CountingPathVisitor extends SimplePathVisitor {
         updateDirCounter(dir, exc);
         return FileVisitResult.CONTINUE;
     }
-    
-    @Override
-    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attributes) throws IOException {
-        final FileVisitResult accept = dirFilter.accept(dir, attributes);
-        return accept != FileVisitResult.CONTINUE ? FileVisitResult.SKIP_SUBTREE : FileVisitResult.CONTINUE;
-    }
 
     @Override
     public String toString() {
@@ -149,7 +140,7 @@ public class CountingPathVisitor extends SimplePathVisitor {
 
     @Override
     public FileVisitResult visitFile(final Path file, final BasicFileAttributes attributes) throws IOException {
-        if (Files.exists(file) && fileFilter.accept(file, attributes) == FileVisitResult.CONTINUE) {
+        if (Files.exists(file) && pathFilter.accept(file, attributes) == FileVisitResult.CONTINUE) {
             updateFileCounters(file, attributes);
         }
         return FileVisitResult.CONTINUE;
diff --git a/src/main/java/org/apache/commons/io/file/PathFilter.java b/src/main/java/org/apache/commons/io/file/PathFilter.java
index 837ddc02..77de9e6c 100644
--- a/src/main/java/org/apache/commons/io/file/PathFilter.java
+++ b/src/main/java/org/apache/commons/io/file/PathFilter.java
@@ -33,7 +33,7 @@ public interface PathFilter {
      * Tests whether or not to include the specified Path in a result.
      *
      * @param path The Path to test.
-     * @param attributes the file's basic attributes (TODO may be null).
+     * @param attributes the file's basic attributes.
      * @return a FileVisitResult
      */
     FileVisitResult accept(Path path, BasicFileAttributes attributes);
diff --git a/src/main/java/org/apache/commons/io/file/PathUtils.java b/src/main/java/org/apache/commons/io/file/PathUtils.java
index 23f389dd..b639beb8 100644
--- a/src/main/java/org/apache/commons/io/file/PathUtils.java
+++ b/src/main/java/org/apache/commons/io/file/PathUtils.java
@@ -280,17 +280,6 @@ public final class PathUtils {
         return visitFileTree(new CountingPathVisitor(Counters.longPathCounters()), directory).getPathCounters();
     }
 
-    /**
-     * Gets the current directory.
-     * 
-     * @return the current directory.
-     *
-     * @since 2.9.0
-     */
-    public static Path current() {
-        return Paths.get("");
-    }
-    
     /**
      * Deletes a file or directory. If the path is a directory, delete it and all sub-directories.
      * <p>
@@ -695,8 +684,7 @@ public final class PathUtils {
      * @return a new instance.
      * @throws IOException if an I/O error occurs.
      */
-    public static DirectoryStream<Path> newDirectoryStream(final Path dir, final PathFilter pathFilter)
-        throws IOException {
+    public static DirectoryStream<Path> newDirectoryStream(final Path dir, final PathFilter pathFilter) throws IOException {
         return Files.newDirectoryStream(dir, new DirectoryStreamFilter(pathFilter));
     }
 
@@ -886,24 +874,6 @@ public final class PathUtils {
         return visitFileTree(visitor, Paths.get(uri));
     }
 
-    /**
-     * Returns a stream of filtered paths.
-     *
-     * @param start the start path
-     * @param pathFilter the path filter
-     * @param maxDepth the maximum depth of directories to walk.
-     * @param readAttributes whether to call the filters with file attributes (false passes null).
-     * @param options the options to configure the walk.
-     * @return a filtered stream of paths.
-     * @throws IOException if an I/O error is thrown when accessing the starting file.
-     * @since 2.9.0
-     */
-    public static Stream<Path> walk(final Path start, final PathFilter pathFilter, final int maxDepth,
-        boolean readAttributes, final FileVisitOption... options) throws IOException {
-        return Files.walk(start, maxDepth, options).filter(path -> pathFilter.accept(path,
-            readAttributes ? readBasicFileAttributesQuietly(path) : null) == FileVisitResult.CONTINUE);
-    }
-
     /**
      * Does allow to instantiate.
      */
diff --git a/src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java
index 6f919049..3632c93e 100644
--- a/src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/AbstractFileFilter.java
@@ -39,7 +39,7 @@ import org.apache.commons.io.file.PathVisitor;
  */
 public abstract class AbstractFileFilter implements IOFileFilter, PathVisitor {
 
-    static FileVisitResult toFileVisitResult(final boolean accept, final Path path) {
+    protected static FileVisitResult toFileVisitResult(final boolean accept) {
         return accept ? FileVisitResult.CONTINUE : FileVisitResult.TERMINATE;
     }
 
diff --git a/src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java
index 71facc5b..eb697585 100644
--- a/src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/AgeFileFilter.java
@@ -34,7 +34,7 @@ import org.apache.commons.io.file.PathUtils;
  * </p>
  * <h2>Using Classic IO</h2>
  * <pre>
- * Path dir = Paths.get("");
+ * Path dir = Paths.get(".");
  * // We are interested in files older than one day
  * long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
  * String[] files = dir.list(new AgeFileFilter(cutoff));
@@ -45,7 +45,7 @@ import org.apache.commons.io.file.PathUtils;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * Path dir = Paths.get("");
+ * Path dir = Paths.get(".");
  * // We are interested in files older than one day
  * long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
  * AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new AgeFileFilter(cutoff));
@@ -182,7 +182,7 @@ public class AgeFileFilter extends AbstractFileFilter implements Serializable {
         } catch (final IOException e) {
             return handle(e);
         }
-        return toFileVisitResult(acceptOlder != newer, file);
+        return toFileVisitResult(acceptOlder != newer);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java
index c50fa9c6..b87e176c 100644
--- a/src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/CanExecuteFileFilter.java
@@ -90,7 +90,7 @@ public class CanExecuteFileFilter extends AbstractFileFilter implements Serializ
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(Files.isExecutable(file), file);
+        return toFileVisitResult(Files.isExecutable(file));
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java
index 4f7bf033..320356d5 100644
--- a/src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/CanReadFileFilter.java
@@ -100,7 +100,7 @@ public class CanReadFileFilter extends AbstractFileFilter implements Serializabl
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(Files.isReadable(file), file);
+        return toFileVisitResult(Files.isReadable(file));
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java
index 825100e4..a49ec4e0 100644
--- a/src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/CanWriteFileFilter.java
@@ -89,7 +89,7 @@ public class CanWriteFileFilter extends AbstractFileFilter implements Serializab
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(Files.isWritable(file), file);
+        return toFileVisitResult(Files.isWritable(file));
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java
index c66d4c58..23183a5d 100644
--- a/src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/DirectoryFileFilter.java
@@ -41,7 +41,7 @@ import java.nio.file.attribute.BasicFileAttributes;
  * <h2>Using NIO</h2>
  *
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(DirectoryFileFilter.INSTANCE);
  * //
  * // Walk one dir
@@ -105,7 +105,7 @@ public class DirectoryFileFilter extends AbstractFileFilter implements Serializa
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(Files.isDirectory(file), file);
+        return toFileVisitResult(Files.isDirectory(file));
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java
index 813c7d48..aa83fc8a 100644
--- a/src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/EmptyFileFilter.java
@@ -56,7 +56,7 @@ import java.util.stream.Stream;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(EmptyFileFilter.EMPTY);
  * //
  * // Walk one dir
@@ -118,10 +118,10 @@ public class EmptyFileFilter extends AbstractFileFilter implements Serializable
         try {
             if (Files.isDirectory(file)) {
                 try (Stream<Path> stream = Files.list(file)) {
-                    return toFileVisitResult(!stream.findFirst().isPresent(), file);
+                    return toFileVisitResult(!stream.findFirst().isPresent());
                 }
             }
-            return toFileVisitResult(Files.size(file) == 0, file);
+            return toFileVisitResult(Files.size(file) == 0);
         } catch (final IOException e) {
             return handle(e);
         }
diff --git a/src/main/java/org/apache/commons/io/filefilter/FileEqualsFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/FileEqualsFileFilter.java
deleted file mode 100644
index 0f5f8dc8..00000000
--- a/src/main/java/org/apache/commons/io/filefilter/FileEqualsFileFilter.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.commons.io.filefilter;
-
-import java.io.File;
-import java.nio.file.FileVisitResult;
-import java.nio.file.Path;
-import java.nio.file.attribute.BasicFileAttributes;
-import java.util.Objects;
-
-/**
- * Accepts only an exact {@link File} object match. You can use this filter to visit the start directory when walking a
- * file tree with
- * {@link java.nio.file.Files#walkFileTree(java.nio.file.Path, java.util.Set, int, java.nio.file.FileVisitor)}.
- *
- * @since 2.9.0
- */
-public class FileEqualsFileFilter extends AbstractFileFilter {
-
-    private final File file;
-    private final Path path;
-
-    /**
-     * Constructs a new instance for the given {@link File}.
-     *
-     * @param file The file to match.
-     */
-    public FileEqualsFileFilter(final File file) {
-        super();
-        this.file = file;
-        this.path = file.toPath();
-    }
-
-    @Override
-    public boolean accept(final File file) {
-        return Objects.equals(this.file, file);
-    }
-
-    @Override
-    public FileVisitResult accept(final Path path, final BasicFileAttributes attributes) {
-        return toFileVisitResult(Objects.equals(this.path, path), path);
-    }
-}
diff --git a/src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java
index 39f6159a..a2980d70 100644
--- a/src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/FileFileFilter.java
@@ -40,7 +40,7 @@ import java.nio.file.attribute.BasicFileAttributes;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(FileFileFilter.FILE);
  * //
  * // Walk one dir
@@ -62,21 +62,8 @@ import java.nio.file.attribute.BasicFileAttributes;
  */
 public class FileFileFilter extends AbstractFileFilter implements Serializable {
 
-    /**
-     * Singleton instance of file filter.
-     *
-     * @since 2.9.0
-     */
-    public static final IOFileFilter INSTANCE = new FileFileFilter();
-
-    /**
-     * Singleton instance of file filter.
-     *
-     * @deprecated Use {@link #INSTANCE}.
-     */
-    @Deprecated
-    public static final IOFileFilter FILE = INSTANCE;
-
+    /** Singleton instance of file filter */
+    public static final IOFileFilter FILE = new FileFileFilter();
     private static final long serialVersionUID = 5345244090827540862L;
 
     /**
@@ -105,7 +92,7 @@ public class FileFileFilter extends AbstractFileFilter implements Serializable {
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(Files.isRegularFile(file), file);
+        return toFileVisitResult(Files.isRegularFile(file));
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java b/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java
index 2a3c6677..2147bac0 100644
--- a/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java
+++ b/src/main/java/org/apache/commons/io/filefilter/FileFilterUtils.java
@@ -214,10 +214,10 @@ public class FileFilterUtils {
      * Returns a filter that checks if the file is a file (and not a directory).
      *
      * @return file filter that accepts only files and not directories
-     * @see FileFileFilter#INSTANCE
+     * @see FileFileFilter#FILE
      */
     public static IOFileFilter fileFileFilter() {
-        return FileFileFilter.INSTANCE;
+        return FileFileFilter.FILE;
     }
 
     /**
@@ -545,14 +545,14 @@ public class FileFilterUtils {
      *
      * @param filter  the filter to decorate, null means an unrestricted filter
      * @return the decorated filter, never null
-     * @see FileFileFilter#INSTANCE
+     * @see FileFileFilter#FILE
      * @since 1.3
      */
     public static IOFileFilter makeFileOnly(final IOFileFilter filter) {
         if (filter == null) {
-            return FileFileFilter.INSTANCE;
+            return FileFileFilter.FILE;
         }
-        return FileFileFilter.INSTANCE.and(filter);
+        return FileFileFilter.FILE.and(filter);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java
index 618f7ace..ce20698c 100644
--- a/src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/HiddenFileFilter.java
@@ -54,7 +54,7 @@ import java.nio.file.attribute.BasicFileAttributes;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(HiddenFileFilter.HIDDEN);
  * //
  * // Walk one dir
@@ -112,7 +112,7 @@ public class HiddenFileFilter extends AbstractFileFilter implements Serializable
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
         try {
-            return toFileVisitResult(Files.isHidden(file), file);
+            return toFileVisitResult(Files.isHidden(file));
         } catch (final IOException e) {
             return handle(e);
         }
diff --git a/src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java
index 902b9cf3..ddb47223 100644
--- a/src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/IOFileFilter.java
@@ -71,7 +71,7 @@ public interface IOFileFilter extends FileFilter, FilenameFilter, PathFilter {
      */
     @Override
     default FileVisitResult accept(final Path path, final BasicFileAttributes attributes) {
-        return AbstractFileFilter.toFileVisitResult(accept(path.toFile()), path);
+        return AbstractFileFilter.toFileVisitResult(accept(path.toFile()));
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
index c1664427..701e5e10 100644
--- a/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/MagicNumberFileFilter.java
@@ -65,7 +65,7 @@ import java.util.Arrays;
  * </pre>
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(MagicNumberFileFilter("ustar", 257));
  * //
  * // Walk one dir
@@ -301,7 +301,7 @@ public class MagicNumberFileFilter extends AbstractFileFilter implements
                     if (read != magicNumbers.length) {
                         return FileVisitResult.TERMINATE;
                     }
-                    return toFileVisitResult(Arrays.equals(this.magicNumbers, byteBuffer.array()), file);
+                    return toFileVisitResult(Arrays.equals(this.magicNumbers, byteBuffer.array()));
                 }
             }
             catch (final IOException ioe) {
diff --git a/src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java
index f9879f69..e6df6df4 100644
--- a/src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/NameFileFilter.java
@@ -42,7 +42,7 @@ import org.apache.commons.io.IOCase;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new NameFileFilter("Test"));
  * //
  * // Walk one dir
@@ -187,7 +187,7 @@ public class NameFileFilter extends AbstractFileFilter implements Serializable {
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(acceptBaseName(file.getFileName().toString()), file);
+        return toFileVisitResult(acceptBaseName(file.getFileName().toString()));
     }
 
     private boolean acceptBaseName(final String baseName) {
diff --git a/src/main/java/org/apache/commons/io/filefilter/PathEqualsFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/PathEqualsFileFilter.java
deleted file mode 100644
index f24bf4c8..00000000
--- a/src/main/java/org/apache/commons/io/filefilter/PathEqualsFileFilter.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.commons.io.filefilter;
-
-import java.io.File;
-import java.nio.file.FileVisitResult;
-import java.nio.file.Path;
-import java.nio.file.attribute.BasicFileAttributes;
-import java.util.Objects;
-
-/**
- * Accepts only an exact {@link Path} object match. You can use this filter to visit the start directory when walking a
- * file tree with
- * {@link java.nio.file.Files#walkFileTree(java.nio.file.Path, java.util.Set, int, java.nio.file.FileVisitor)}.
- *
- * @since 2.9.0
- */
-public class PathEqualsFileFilter extends AbstractFileFilter {
-
-    private final Path path;
-
-    /**
-     * Constructs a new instance for the given {@link Path}.
-     * 
-     * @param file The file to match.
-     */
-    public PathEqualsFileFilter(final Path file) {
-        super();
-        this.path = file;
-    }
-
-    @Override
-    public boolean accept(File file) {
-        return Objects.equals(this.path, file.toPath());
-    }
-
-    @Override
-    public FileVisitResult accept(Path path, BasicFileAttributes attributes) {
-        return toFileVisitResult(Objects.equals(this.path, path), path);
-    }
-}
diff --git a/src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java
index c71fb207..97452e03 100644
--- a/src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/PrefixFileFilter.java
@@ -42,7 +42,7 @@ import org.apache.commons.io.IOCase;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new PrefixFileFilter("Test"));
  * //
  * // Walk one dir
@@ -192,7 +192,7 @@ public class PrefixFileFilter extends AbstractFileFilter implements Serializable
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(accept(file.getFileName().toFile()), file);
+        return toFileVisitResult(accept(file.getFileName().toFile()));
     }
 
     private boolean accept(final String name) {
diff --git a/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
index bfa75cff..e1039765 100644
--- a/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/RegexFileFilter.java
@@ -33,7 +33,7 @@ import org.apache.commons.io.IOCase;
  * <h2>Using Classic IO</h2>
  * <p>
  * e.g.
- *
+ * 
  * <pre>
  * File dir = new File(".");
  * FileFilter fileFilter = new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$");
@@ -44,9 +44,9 @@ import org.apache.commons.io.IOCase;
  * </pre>
  *
  * <h2>Using NIO</h2>
- *
+ * 
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new RegexFileFilter("^.*[tT]est(-\\d+)?\\.java$"));
  * //
  * // Walk one dir
@@ -145,14 +145,14 @@ public class RegexFileFilter extends AbstractFileFilter implements Serializable
 
     /**
      * Checks to see if the file name matches one of the regular expressions.
-     *
+     * 
      * @param path the path
      * @param attributes the path attributes
      * @return true if the file name matches one of the regular expressions
      */
     @Override
     public FileVisitResult accept(final Path path, final BasicFileAttributes attributes) {
-        return toFileVisitResult(pattern.matcher(path.toString()).matches(), path);
+        return toFileVisitResult(pattern.matcher(path.toString()).matches());
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java
index 6b11c5f1..d6680740 100644
--- a/src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/SizeFileFilter.java
@@ -42,7 +42,7 @@ import java.nio.file.attribute.BasicFileAttributes;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new SizeFileFilter(1024 * 1024));
  * //
  * // Walk one dir
@@ -138,7 +138,7 @@ public class SizeFileFilter extends AbstractFileFilter implements Serializable {
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
         try {
-            return toFileVisitResult(accept(Files.size(file)), file);
+            return toFileVisitResult(accept(Files.size(file)));
         } catch (final IOException e) {
             return handle(e);
         }
@@ -157,7 +157,7 @@ public class SizeFileFilter extends AbstractFileFilter implements Serializable {
 
     @Override
     public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs) throws IOException {
-        return toFileVisitResult(accept(Files.size(file)), file);
+        return toFileVisitResult(accept(Files.size(file)));
     }
 
 }
diff --git a/src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java
index d0c480bb..6875fcc7 100644
--- a/src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/SuffixFileFilter.java
@@ -43,7 +43,7 @@ import org.apache.commons.io.IOCase;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new SuffixFileFilter(".java"));
  * //
  * // Walk one dir
@@ -193,7 +193,7 @@ public class SuffixFileFilter extends AbstractFileFilter implements Serializable
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(accept(file.getFileName().toString()), file);
+        return toFileVisitResult(accept(file.getFileName().toString()));
     }
 
     private boolean accept(final String name) {
diff --git a/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java b/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
index 4590062c..d1ecf472 100644
--- a/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/WildcardFileFilter.java
@@ -54,7 +54,7 @@ import org.apache.commons.io.IOCase;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new WildcardFileFilter("*test*.java~*~"));
  * //
  * // Walk one dir
@@ -195,7 +195,7 @@ public class WildcardFileFilter extends AbstractFileFilter implements Serializab
      */
     @Override
     public FileVisitResult accept(final Path file, final BasicFileAttributes attributes) {
-        return toFileVisitResult(accept(file.getFileName().toString()), file);
+        return toFileVisitResult(accept(file.getFileName().toString()));
     }
 
     private boolean accept(final String name) {
diff --git a/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java b/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
index 07de7950..c06083ca 100644
--- a/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
+++ b/src/main/java/org/apache/commons/io/filefilter/WildcardFilter.java
@@ -54,7 +54,7 @@ import org.apache.commons.io.FilenameUtils;
  *
  * <h2>Using NIO</h2>
  * <pre>
- * final Path dir = Paths.get("");
+ * final Path dir = Paths.get(".");
  * final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new WildcardFilter("*test*.java~*~"));
  * //
  * // Walk one dir
diff --git a/src/main/java/org/apache/commons/io/filefilter/package.html b/src/main/java/org/apache/commons/io/filefilter/package.html
index 545ee6a1..9612aee3 100644
--- a/src/main/java/org/apache/commons/io/filefilter/package.html
+++ b/src/main/java/org/apache/commons/io/filefilter/package.html
@@ -153,7 +153,7 @@ above example will look using FileFilterUtils:</p>
 <h2>Using NIO</h2>
 <p>You can combine Java <b>file tree walking</b> by using <code>java.nio.file.Files.walk()</code> APIs with filters:</p>
 <pre>
-   final Path dir = Paths.get("");
+   final Path dir = Paths.get(".");
    // We are interested in files older than one day
    final long cutoff = System.currentTimeMillis() - (24 * 60 * 60 * 1000);
    final AccumulatorPathVisitor visitor = AccumulatorPathVisitor.withLongCounters(new AgeFileFilter(cutoff));
