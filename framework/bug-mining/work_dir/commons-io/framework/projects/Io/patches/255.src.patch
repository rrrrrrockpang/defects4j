diff --git a/src/main/java/org/apache/commons/io/FileUtils.java b/src/main/java/org/apache/commons/io/FileUtils.java
index 7df62904..adc92612 100644
--- a/src/main/java/org/apache/commons/io/FileUtils.java
+++ b/src/main/java/org/apache/commons/io/FileUtils.java
@@ -1167,7 +1167,9 @@ public class FileUtils {
      */
     public static File delete(final File file) throws IOException {
         Objects.requireNonNull(file, "file");
-        java.nio.file.Files.delete(file.toPath());
+        if (!file.delete()) {
+            throw new IOException("Unable to delete " + file);
+        }
         return file;
     }
 
diff --git a/src/main/java/org/apache/commons/io/file/PathUtils.java b/src/main/java/org/apache/commons/io/file/PathUtils.java
index 9cb1ec19..87f605aa 100644
--- a/src/main/java/org/apache/commons/io/file/PathUtils.java
+++ b/src/main/java/org/apache/commons/io/file/PathUtils.java
@@ -41,7 +41,6 @@ import java.nio.file.attribute.FileAttribute;
 import java.nio.file.attribute.PosixFileAttributeView;
 import java.nio.file.attribute.PosixFileAttributes;
 import java.nio.file.attribute.PosixFilePermission;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
@@ -54,7 +53,6 @@ import java.util.stream.Collector;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import org.apache.commons.io.IOExceptionList;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.file.Counters.PathCounters;
 import org.apache.commons.io.filefilter.IOFileFilter;
@@ -871,17 +869,11 @@ public final class PathUtils {
      */
     public static Path setReadOnly(final Path path, final boolean readOnly, final LinkOption... linkOptions)
             throws IOException {
-        final List<Exception> causeList = new ArrayList<>(2);
         final DosFileAttributeView fileAttributeView = Files.getFileAttributeView(path, DosFileAttributeView.class,
                 linkOptions);
         if (fileAttributeView != null) {
-            try {
-                fileAttributeView.setReadOnly(readOnly);
-                return path;
-            } catch (IOException e) {
-                //ignore for now, retry with PosixFileAttributeView
-                causeList.add(e);
-            }
+            fileAttributeView.setReadOnly(readOnly);
+            return path;
         }
         final PosixFileAttributeView posixFileAttributeView = Files.getFileAttributeView(path,
                 PosixFileAttributeView.class, linkOptions);
@@ -894,14 +886,7 @@ public final class PathUtils {
             permissions.remove(PosixFilePermission.OWNER_WRITE);
             permissions.remove(PosixFilePermission.GROUP_WRITE);
             permissions.remove(PosixFilePermission.OTHERS_WRITE);
-            try {
-                 return Files.setPosixFilePermissions(path, permissions);
-            } catch (IOException e) {
-                causeList.add(e);
-            }
-        }
-        if (!causeList.isEmpty()) {
-             throw new IOExceptionList(causeList);
+            return Files.setPosixFilePermissions(path, permissions);
         }
         throw new IOException(
                 String.format("No DosFileAttributeView or PosixFileAttributeView for '%s' (linkOptions=%s)", path,
