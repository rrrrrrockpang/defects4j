diff --git a/src/java/org/apache/commons/io/FileCleaner.java b/src/java/org/apache/commons/io/FileCleaner.java
index 96394df7..7a960776 100644
--- a/src/java/org/apache/commons/io/FileCleaner.java
+++ b/src/java/org/apache/commons/io/FileCleaner.java
@@ -29,12 +29,6 @@ import java.util.Vector;
  * This utility creates a background thread to handle file deletion.
  * Each file to be deleted is registered with a handler object.
  * When the handler object is garbage collected, the file is deleted.
- * <p>
- * In an environment with multiple class loaders (a servlet container, for
- * example), you should consider stopping the background thread if it is no
- * longer needed. This is done by invoking the method
- * {@link {@link #exitWhenFinished}, typically in
- * {@link javax.servlet.ServletContextListener#contextDestroyed} or similar.
  *
  * @author Noel Bergman
  * @author Martin Cooper
@@ -45,19 +39,47 @@ public class FileCleaner {
     /**
      * Queue of <code>Tracker</code> instances being watched.
      */
-    static ReferenceQueue /* Tracker */ q = new ReferenceQueue();
+    private static ReferenceQueue /* Tracker */ q = new ReferenceQueue();
+
     /**
      * Collection of <code>Tracker</code> instances in existence.
      */
-    static Collection /* Tracker */ trackers = new Vector();
+    private static Collection /* Tracker */ trackers = new Vector();
+
     /**
-     * Whether to terminate the thread when the tracking is complete.
+     * The thread that will clean up registered files.
      */
-    static volatile boolean exitWhenFinished = false;
+    private static Thread reaper = new Thread("File Reaper") {
+
+        /**
+         * Run the reaper thread that will delete files as their associated
+         * marker objects are reclaimed by the garbage collector.
+         */
+        public void run() {
+            for (;;) {
+                Tracker tracker = null;
+                try {
+                    // Wait for a tracker to remove.
+                    tracker = (Tracker) q.remove();
+                } catch (Exception e) {
+                    continue;
+                }
+
+                tracker.delete();
+                tracker.clear();
+                trackers.remove(tracker);
+            }
+        }
+    };
+
     /**
-     * The thread that will clean up registered files.
+     * The static initializer that starts the reaper thread.
      */
-    static Thread reaper;
+    static {
+        reaper.setPriority(Thread.MAX_PRIORITY);
+        reaper.setDaemon(true);
+        reaper.start();
+    }
 
     //-----------------------------------------------------------------------
     /**
@@ -87,7 +109,7 @@ public class FileCleaner {
         if (file == null) {
             throw new NullPointerException("The file must not be null");
         }
-        addTracker(file.getPath(), marker, deleteStrategy);
+        trackers.add(new Tracker(file.getPath(), deleteStrategy, marker, q));
     }
 
     /**
@@ -117,28 +139,9 @@ public class FileCleaner {
         if (path == null) {
             throw new NullPointerException("The path must not be null");
         }
-        addTracker(path, marker, deleteStrategy);
-    }
-
-    /**
-     * Adds a tracker to the list of trackers.
-     * 
-     * @param path  the full path to the file to be tracked, not null
-     * @param marker  the marker object used to track the file, not null
-     * @param deleteStrategy  the strategy to delete the file, null means normal
-     */
-    private static synchronized void addTracker(String path, Object marker, FileDeleteStrategy deleteStrategy) {
-        if (exitWhenFinished) {
-            throw new IllegalStateException("No new trackers can be added once exitWhenFinished() is called");
-        }
-        if (reaper == null) {
-            reaper = new Reaper();
-            reaper.start();
-        }
         trackers.add(new Tracker(path, deleteStrategy, marker, q));
     }
 
-    //-----------------------------------------------------------------------
     /**
      * Retrieve the number of files currently being tracked, and therefore
      * awaiting deletion.
@@ -149,75 +152,11 @@ public class FileCleaner {
         return trackers.size();
     }
 
-    /**
-     * Call this method to cause the file cleaner thread to terminate when
-     * there are no more objects being tracked for deletion.
-     * <p>
-     * In a simple environment, you don't need this method as the file cleaner
-     * thread will simply exit when the JVM exits. In a more complex environment,
-     * with multiple class loaders (such as an application server), you should be
-     * aware that the file cleaner thread will continue running even if the class
-     * loader it was started from terminates. This can consitute a memory leak.
-     * <p>
-     * For example, suppose that you have developed a web application, which
-     * contains the commons-io jar file in your WEB-INF/lib directory. In other
-     * words, the FileCleaner class is loaded through the class loader of your
-     * web application. If the web application is terminated, but the servlet
-     * container is still running, then the file cleaner thread will still exist,
-     * posing a memory leak.
-     * <p>
-     * This method allows the thread to be terminated. Simply call this method
-     * in the resource cleanup code, such as {@link javax.servlet.ServletContextListener#contextDestroyed}.
-     * One called, no new objects can be tracked by the file cleaner.
-     */
-    public static synchronized void exitWhenFinished() {
-        exitWhenFinished = true;
-        if (reaper != null) {
-            synchronized (reaper) {
-                reaper.interrupt();
-            }
-        }
-    }
-
-    // -----------------------------------------------------------------------
-    /**
-     * The reaper thread.
-     */
-    static final class Reaper extends Thread {
-        Reaper() {
-            super("File Reaper");
-            setPriority(Thread.MAX_PRIORITY);
-            setDaemon(true);
-        }
-
-        /**
-         * Run the reaper thread that will delete files as their associated
-         * marker objects are reclaimed by the garbage collector.
-         */
-        public void run() {
-            // thread exits when exitWhenFinished is true and there are no more tracked objects
-            while (exitWhenFinished == false || trackers.size() > 0) {
-                Tracker tracker = null;
-                try {
-                    // Wait for a tracker to remove.
-                    tracker = (Tracker) q.remove();
-                } catch (Exception e) {
-                    continue;
-                }
-                if (tracker != null) {
-                    tracker.delete();
-                    tracker.clear();
-                    trackers.remove(tracker);
-                }
-            }
-        }
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Inner class which acts as the reference for a file pending deletion.
      */
-    static final class Tracker extends PhantomReference {
+    static class Tracker extends PhantomReference {
 
         /**
          * The full path to the file being tracked.
