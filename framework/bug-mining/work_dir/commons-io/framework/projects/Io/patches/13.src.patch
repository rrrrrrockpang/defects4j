diff --git a/src/java/org/apache/commons/io/IOUtils.java b/src/java/org/apache/commons/io/IOUtils.java
index b46c8c7b..4d85b7af 100644
--- a/src/java/org/apache/commons/io/IOUtils.java
+++ b/src/java/org/apache/commons/io/IOUtils.java
@@ -982,10 +982,10 @@ public class IOUtils {
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedInputStream</code>.
      * <p>
-     * Large streams (over 2GB) will return a bytes copied value of
-     * <code>-1</code> after the copy has completed since the correct
-     * number of bytes cannot be returned as an int. For large streams
-     * use the <code>copyLarge(InputStream, OutputStream)</code> method.
+     * Large streams (over 2GB) will throw an {@link ArithmeticException}
+     * after the copy has completed since the correct number of bytes
+     * cannot be returned as an int. For large streams use the
+     * <code>copyLarge(InputStream, OutputStream)</code> method.
      * 
      * @param input  the <code>InputStream</code> to read from
      * @param output  the <code>OutputStream</code> to write to
@@ -995,12 +995,13 @@ public class IOUtils {
      * @throws ArithmeticException if the byte count is too large
      * @since Commons IO 1.1
      */
-    public static int copy(InputStream input, OutputStream output) throws IOException {
+    public static int copy(InputStream input, OutputStream output)
+            throws IOException {
         long count = copyLarge(input, output);
         if (count > Integer.MAX_VALUE) {
-            return -1;
+            throw new ArithmeticException("The byte count " + count + " is too large to be converted to an int");
         }
-        return (int) count;
+        return (int)count;
     }
 
     /**
@@ -1087,10 +1088,10 @@ public class IOUtils {
      * This method buffers the input internally, so there is no need to use a
      * <code>BufferedReader</code>.
      * <p>
-     * Large streams (over 2GB) will return a chars copied value of
-     * <code>-1</code> after the copy has completed since the correct
-     * number of chars cannot be returned as an int. For large streams
-     * use the <code>copyLarge(Reader, Writer)</code> method.
+     * Large streams (over 2GB) will throw an {@link ArithmeticException}
+     * after the copy has completed since the correct number of characters
+     * cannot be returned as an int. For large streams use the
+     * <code>copyLarge(Reader, Writer)</code> method.
      *
      * @param input  the <code>Reader</code> to read from
      * @param output  the <code>Writer</code> to write to
@@ -1103,9 +1104,9 @@ public class IOUtils {
     public static int copy(Reader input, Writer output) throws IOException {
         long count = copyLarge(input, output);
         if (count > Integer.MAX_VALUE) {
-            return -1;
+            throw new ArithmeticException("The character count " + count + " is too large to be converted to an int");
         }
-        return (int) count;
+        return (int)count;
     }
 
     /**
