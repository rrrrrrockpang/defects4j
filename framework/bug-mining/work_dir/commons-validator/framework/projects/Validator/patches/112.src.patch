diff --git a/src/main/java/org/apache/commons/validator/routines/DomainValidator.java b/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
index 86ce2049..a9a49888 100644
--- a/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
+++ b/src/main/java/org/apache/commons/validator/routines/DomainValidator.java
@@ -19,7 +19,6 @@ package org.apache.commons.validator.routines;
 import java.io.Serializable;
 import java.net.IDN;
 import java.util.Arrays;
-import java.util.List;
 import java.util.Locale;
 
 /**
@@ -91,21 +90,17 @@ public class DomainValidator implements Serializable {
 
     private final boolean allowLocal;
 
-    private static class LazyHolder { // IODH
-
-        /**
-         * Singleton instance of this validator, which
-         *  doesn't consider local addresses as valid.
-         */
-        private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);
-
-        /**
-         * Singleton instance of this validator, which does
-         *  consider local addresses valid.
-         */
-        private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);
+    /**
+     * Singleton instance of this validator, which
+     *  doesn't consider local addresses as valid.
+     */
+    private static final DomainValidator DOMAIN_VALIDATOR = new DomainValidator(false);
 
-    }
+    /**
+     * Singleton instance of this validator, which does
+     *  consider local addresses valid.
+     */
+    private static final DomainValidator DOMAIN_VALIDATOR_WITH_LOCAL = new DomainValidator(true);
 
     /**
      * The above instances must only be returned via the getInstance() methods.
@@ -131,7 +126,7 @@ public class DomainValidator implements Serializable {
      */
     public static synchronized DomainValidator getInstance() {
         inUse = true;
-        return LazyHolder.DOMAIN_VALIDATOR;
+        return DOMAIN_VALIDATOR;
     }
 
     /**
@@ -143,90 +138,18 @@ public class DomainValidator implements Serializable {
     public static synchronized DomainValidator getInstance(boolean allowLocal) {
         inUse = true;
         if(allowLocal) {
-            return LazyHolder.DOMAIN_VALIDATOR_WITH_LOCAL;
+            return DOMAIN_VALIDATOR_WITH_LOCAL;
         }
-        return LazyHolder.DOMAIN_VALIDATOR;
-    }
-
-    /**
-     * Returns a new instance of this validator.
-     * The user can provide a list of {@link Item} entries which can
-     * be used to override the generic and country code lists.
-     * Note that any such entries override values provided by the
-     * {@link #updateTLDOverride(ArrayType, String[])} method
-     * If an entry for a particular type is not provided, then
-     * the class override (if any) is retained.
-     *
-     * @param allowLocal Should local addresses be considered valid?
-     * @param items - array of {@link Item} entries
-     * @return an instance of this validator
-     * @since 1.7
-     */
-    public static synchronized DomainValidator getInstance(boolean allowLocal, List<Item> items) {
-        inUse = true;
-        return new DomainValidator(allowLocal, items);
+        return DOMAIN_VALIDATOR;
     }
 
-    // intance variables allowing local overrides
-    final String[] mycountryCodeTLDsMinus;
-    final String[] mycountryCodeTLDsPlus;
-    final String[] mygenericTLDsPlus;
-    final String[] mygenericTLDsMinus;
-    
     /**
      * Private constructor. 
+     * This does not set the inUse flag - that is done by getInstance.
+     * This is to allow the static shared instances to be created.
     */
-     DomainValidator(boolean allowLocal) {
+    private DomainValidator(boolean allowLocal) {
         this.allowLocal = allowLocal;
-        // link to class overrides
-        mycountryCodeTLDsMinus = countryCodeTLDsMinus;
-        mycountryCodeTLDsPlus = countryCodeTLDsPlus;
-        mygenericTLDsPlus = genericTLDsPlus;
-        mygenericTLDsMinus = genericTLDsMinus;
-    }
-
-    /**
-     * Private constructor, allowing local overrides
-     * @since 1.7
-    */
-    DomainValidator(boolean allowLocal,  List<Item> items) { 
-        this.allowLocal = allowLocal;
-
-        // default to class overrides
-        String[] ccMinus = countryCodeTLDsMinus;
-        String[] ccPlus = countryCodeTLDsPlus;
-        String[] genMinus = genericTLDsMinus;
-        String[] genPlus = genericTLDsPlus;
-
-        // apply the instance overrides
-        for(Item item: items) {
-            switch(item.type) {
-            case COUNTRY_CODE_MINUS: {
-                ccMinus = item.values.clone();
-                break;
-            }
-            case COUNTRY_CODE_PLUS: {
-                ccPlus = item.values.clone();
-                break;
-            }
-            case GENERIC_MINUS: {
-                genMinus = item.values.clone();
-                break;
-            }
-            case GENERIC_PLUS: {
-                genPlus = item.values.clone();
-                break;
-            }
-            default:
-                break;
-            }
-        }
-
-        // init the instance overrides
-        mycountryCodeTLDsMinus = ccMinus;
-        mycountryCodeTLDsPlus = ccPlus;
-        mygenericTLDsMinus = genMinus;
-        mygenericTLDsPlus = genPlus;
     }
 
     /**
@@ -315,8 +238,8 @@ public class DomainValidator implements Serializable {
      */
     public boolean isValidGenericTld(String gTld) {
         final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));
-        return (arrayContains(GENERIC_TLDS, key) || arrayContains(mygenericTLDsPlus, key))
-                && !arrayContains(mygenericTLDsMinus, key);
+        return (arrayContains(GENERIC_TLDS, key) || arrayContains(genericTLDsPlus, key))
+                && !arrayContains(genericTLDsMinus, key);
     }
 
     /**
@@ -328,8 +251,8 @@ public class DomainValidator implements Serializable {
      */
     public boolean isValidCountryCodeTld(String ccTld) {
         final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));
-        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(mycountryCodeTLDsPlus, key))
-                && !arrayContains(mycountryCodeTLDsMinus, key);
+        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(countryCodeTLDsPlus, key))
+                && !arrayContains(countryCodeTLDsMinus, key);
     }
 
     /**
@@ -2010,20 +1933,7 @@ public class DomainValidator implements Serializable {
         /** Get a copy of the local table */
         LOCAL_RO
         ;
-    }
-
-    /**
-     * Used to specify overrides when creating a new class.
-     * @since 1.7
-     */
-    public static class Item {
-        final ArrayType type;
-        final String[] values;
-        public Item(ArrayType type, String[] values) {
-            this.type = type;
-            this.values = values; // no need to copy here
-        }
-    }
+    };
 
     /**
      * Update one of the TLD override arrays.
@@ -2082,7 +1992,7 @@ public class DomainValidator implements Serializable {
     }
 
     /**
-     * Get a copy of a class level internal array.
+     * Get a copy of the internal array.
      * @param table the array type (any of the enum values)
      * @return a copy of the array
      * @throws IllegalArgumentException if the table type is unexpected (should not happen)
@@ -2121,33 +2031,6 @@ public class DomainValidator implements Serializable {
         return Arrays.copyOf(array, array.length); // clone the array
     }
 
-    /**
-     * Get a copy of an instance level internal array.
-     * @param table the array type (any of the enum values)
-     * @return a copy of the array
-     * @throws IllegalArgumentException if the table type is unexpected, e.g. GENERIC_RO
-     * @since 1.7
-     */
-    public String [] getOverrides(ArrayType table) {
-        final String array[];
-        switch(table) {
-        case COUNTRY_CODE_MINUS:
-            array = mycountryCodeTLDsMinus;
-            break;
-        case COUNTRY_CODE_PLUS:
-            array = mycountryCodeTLDsPlus;
-            break;
-        case GENERIC_MINUS:
-            array = mygenericTLDsMinus;
-            break;
-        case GENERIC_PLUS:
-            array = mygenericTLDsPlus;
-            break;
-        default:
-            throw new IllegalArgumentException("Unexpected enum value: " + table);
-        }
-        return Arrays.copyOf(array, array.length); // clone the array
-    }
     /**
      * Converts potentially Unicode input to punycode.
      * If conversion fails, returns the original input.
