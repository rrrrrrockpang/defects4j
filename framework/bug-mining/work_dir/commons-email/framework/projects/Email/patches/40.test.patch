diff --git a/src/test/java/org/apache/commons/mail/SendWithAttachmentsTest.java b/src/test/java/org/apache/commons/mail/SendWithAttachmentsTest.java
index 02f2e3f..b37c693 100644
--- a/src/test/java/org/apache/commons/mail/SendWithAttachmentsTest.java
+++ b/src/test/java/org/apache/commons/mail/SendWithAttachmentsTest.java
@@ -20,8 +20,6 @@ import java.io.File;
 import java.io.IOException;
 import java.net.URL;
 
-import javax.mail.internet.MimeUtility;
-
 import org.apache.commons.mail.mocks.MockHtmlEmailConcrete;
 import org.apache.commons.mail.settings.EmailConfiguration;
 import org.junit.Before;
@@ -112,7 +110,7 @@ public class SendWithAttachmentsTest extends AbstractEmailTest
         EmailAttachment attachment = new EmailAttachment();
         File testFile = null;
 
-        /** File to used to test file attachments (Must be valid) */
+        /** File to used to test file attachmetns (Must be valid) */
         testFile = File.createTempFile("commons-email-testfile", ".txt");
 
         // ====================================================================
@@ -128,9 +126,8 @@ public class SendWithAttachmentsTest extends AbstractEmailTest
         this.email.setFrom(this.strTestMailFrom);
         this.email.addTo(this.strTestMailTo);
 
-        /** File to be used to test file attachments (Must be valid) */
-        /** Use umlaut characters to test if the filename is properly encoded */
-        attachment.setName("Test Attachment - a>ä, o>ö, u>ü, au>äu");
+        /** File to used to test file attachmetns (Must be valid) */
+        attachment.setName("Test Attachment");
         attachment.setDescription("Test Attachment Desc");
         attachment.setPath(testFile.getAbsolutePath());
         this.email.attach(attachment);
@@ -140,7 +137,11 @@ public class SendWithAttachmentsTest extends AbstractEmailTest
         this.email.setCharset(EmailConstants.ISO_8859_1);
         this.email.setSubject(strSubject);
 
-        String strHtmlMsg = "<html>Test Message<html>";
+        URL url = new URL(EmailConfiguration.TEST_URL);
+        String cid = this.email.embed(url, "Apache Logo");
+
+        String strHtmlMsg =
+            "<html>The Apache logo - <img src=\"cid:" + cid + "\"><html>";
 
         this.email.setHtmlMsg(strHtmlMsg);
         this.email.setTextMsg(
@@ -174,7 +175,7 @@ public class SendWithAttachmentsTest extends AbstractEmailTest
         validateSend(
             this.fakeMailServer,
             strSubject,
-            MimeUtility.encodeText(attachment.getName()),
+            attachment.getName(),
             this.email.getFromAddress(),
             this.email.getToAddresses(),
             this.email.getCcAddresses(),
diff --git a/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java b/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java
index 4f8a4ef..05dc6a1 100644
--- a/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java
+++ b/src/test/java/org/apache/commons/mail/util/MimeMessageParserTest.java
@@ -121,38 +121,6 @@ public class MimeMessageParserTest
         assertEquals("application/pdf", dataSource.getContentType());
     }
 
-    @Test
-    public void testParseHtmlEmailWithAttachmentAndEncodedFilename() throws Exception
-    {
-        DataSource dataSource;
-        Session session = Session.getDefaultInstance(new Properties());
-        MimeMessage message = MimeMessageUtils.createMimeMessage(session, new File("./src/test/resources/eml/html-attachment-encoded-filename.eml"));
-        MimeMessageParser mimeMessageParser = new MimeMessageParser(message);
-
-        mimeMessageParser.parse();
-
-        assertEquals("Test HTML Send #1 Subject (w charset)", mimeMessageParser.getSubject());
-        assertNotNull(mimeMessageParser.getMimeMessage());
-        assertTrue(mimeMessageParser.isMultipart());
-        assertTrue(mimeMessageParser.hasHtmlContent());
-        assertTrue(mimeMessageParser.hasPlainContent());
-        assertNotNull(mimeMessageParser.getPlainContent());
-        assertNotNull(mimeMessageParser.getHtmlContent());
-        assertTrue(mimeMessageParser.getTo().size() == 1);
-        assertTrue(mimeMessageParser.getCc().size() == 0);
-        assertTrue(mimeMessageParser.getBcc().size() == 0);
-        assertEquals("test_from@apache.org", mimeMessageParser.getFrom());
-        assertEquals("test_from@apache.org", mimeMessageParser.getReplyTo());
-        assertTrue(mimeMessageParser.hasAttachments());
-        List<?> attachmentList = mimeMessageParser.getAttachmentList();
-        assertTrue(attachmentList.size() == 1);
-
-        dataSource = mimeMessageParser.getAttachmentList().get(0);
-        assertNotNull(dataSource);
-        assertEquals("text/plain", dataSource.getContentType());
-        assertEquals("Test Attachment - a>ä, o>ö, u>ü, au>äu", dataSource.getName());
-    }
-
     /**
      * This test parses an "email read notification" where the resulting data source has no name. Originally
      * the missing name caused a NPE in MimeUtility.decodeText().
