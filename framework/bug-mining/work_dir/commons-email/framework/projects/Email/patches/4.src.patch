diff --git a/src/java/org/apache/commons/mail/HtmlEmail.java b/src/java/org/apache/commons/mail/HtmlEmail.java
index 2e2ccaf..7e4a8d5 100644
--- a/src/java/org/apache/commons/mail/HtmlEmail.java
+++ b/src/java/org/apache/commons/mail/HtmlEmail.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.mail;
 
-import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.MalformedURLException;
@@ -26,8 +25,6 @@ import java.util.Iterator;
 import java.util.Map;
 
 import javax.activation.DataHandler;
-import javax.activation.DataSource;
-import javax.activation.FileDataSource;
 import javax.activation.URLDataSource;
 import javax.mail.BodyPart;
 import javax.mail.MessagingException;
@@ -41,41 +38,17 @@ import javax.mail.internet.MimeMultipart;
  * can also be set for HTML unaware email clients, such as text-based
  * email clients.
  *
- * <p>This class also inherits from {@link MultiPartEmail}, so it is easy to
+ * <p>This class also inherits from MultiPartEmail, so it is easy to
  * add attachments to the email.
  *
- * <p>To send an email in HTML, one should create a <code>HtmlEmail</code>, then
- * use the {@link #setFrom(String)}, {@link #addTo(String)} etc. methods.
- * The HTML content can be set with the {@link #setHtmlMsg(String)} method. The
- * alternative text content can be set with {@link #setTextMsg(String)}.
+ * <p>To send an email in HTML, one should create a HtmlEmail, then
+ * use the setFrom, addTo, etc. methods.  The HTML content can be set
+ * with the setHtmlMsg method.  The alternative text content can be set
+ * with setTextMsg.
  *
  * <p>Either the text or HTML can be omitted, in which case the "main"
  * part of the multipart becomes whichever is supplied rather than a
- * <code>multipart/alternative</code>.
- *
- * <h3>Embedding Images and Media</h3>
- *
- * <p>It is also possible to embed URLs, files, or arbitrary
- * <code>DataSource</code>s directly into the body of the mail:
- * <pre><code>
- * HtmlEmail he = new HtmlEmail();
- * File img = new File("my/image.gif");
- * PNGDataSource png = new PNGDataSource(decodedPNGOutputStream); // a custom class
- * StringBuffer msg = new StringBuffer();
- * msg.append("&lt;html&gt;&lt;body&gt;");
- * msg.append("&lt;img src=cid:").append(he.embed(img)).append("&gt;");
- * msg.append("&lt;img src=cid:").append(he.embed(png)).append("&gt;");
- * msg.append("&lt;/body&gt;&lt;/html&gt;");
- * he.setHtmlMsg(msg.toString());
- * // code to set the other email fields (not shown)
- * </pre></code>
- *
- * <p>Embedded entities are tracked by their name, which for <code>File</code>s is
- * the filename itself and for <code>URL</code>s is the canonical path. It is
- * an error to bind the same name to more than one entity, and this class will
- * attempt to validate that for <code>File</code>s and <code>URL</code>s. When
- * embedding a <code>DataSource</code>, the code uses the <code>equals()</code>
- * method defined on the <code>DataSource</code>s to make the determination.
+ * multipart/alternative.
  *
  * @since 1.0
  * @author <a href="mailto:unknown">Regis Koenig</a>
@@ -103,8 +76,8 @@ public class HtmlEmail extends MultiPartEmail
     protected String html;
 
     /**
-     * Embedded images Map<String, InlineImage> where the key is the
-     * user-defined image name.
+     * Embedded images Map<String,InlineImages> where the key is the
+     * user-defined image name
      */
     protected Map inlineImages = new HashMap();
 
@@ -124,7 +97,7 @@ public class HtmlEmail extends MultiPartEmail
             throw new EmailException("Invalid message supplied");
         }
 
-        this.text = aText;
+       this.text = aText;
         return this;
     }
 
@@ -151,16 +124,16 @@ public class HtmlEmail extends MultiPartEmail
     /**
      * Set the message.
      *
-     * <p>This method overrides {@link MultiPartEmail#setMsg(String)} in
-     * order to send an HTML message instead of a plain text message in
+     * <p>This method overrides the MultiPartEmail setMsg() method in
+     * order to send an HTML message instead of a full text message in
      * the mail body. The message is formatted in HTML for the HTML
-     * part of the message; it is left as is in the alternate text
+     * part of the message, it is let as is in the alternate text
      * part.
      *
-     * @param msg the message text to use
-     * @return this <code>HtmlEmail</code>
-     * @throws EmailException if msg is null or empty;
-     * see javax.mail.internet.MimeBodyPart for definitions
+     * @param msg A String.
+     * @return An Email.
+     * @throws EmailException see javax.mail.internet.MimeBodyPart
+     *  for definitions
      * @since 1.0
      */
     public Email setMsg(String msg) throws EmailException
@@ -188,23 +161,22 @@ public class HtmlEmail extends MultiPartEmail
     }
 
     /**
-     * Attempts to parse the specified <code>String</code> as a URL that will
-     * then be embedded in the message.
+     * Embeds an URL in the HTML.
      *
-     * @param urlString String representation of the URL.
+     * @param url The URL of the file.
      * @param name The name that will be set in the filename header field.
-     * @return A String with the Content-ID of the URL.
-     * @throws EmailException when URL supplied is invalid or if <code> is null
-     * or empty; also see {@link javax.mail.internet.MimeBodyPart} for definitions
+     * @return A String with the Content-ID of the file.
+     * @throws EmailException when URL supplied is invalid
+     *  also see javax.mail.internet.MimeBodyPart for definitions
      *
      * @see #embed(URL, String)
      * @since 1.1
      */
-    public String embed(String urlString, String name) throws EmailException
+    public String embed(String url, String name) throws EmailException
     {
         try
         {
-            return embed(new URL(urlString), name);
+            return embed(new URL(url), name);
         }
         catch (MalformedURLException e)
         {
@@ -215,19 +187,20 @@ public class HtmlEmail extends MultiPartEmail
     /**
      * Embeds an URL in the HTML.
      *
-     * <p>This method embeds a file located by an URL into
-     * the mail body. It allows, for instance, to add inline images
+     * <p>This method allows to embed a file located by an URL into
+     * the mail body.  It allows, for instance, to add inline images
      * to the email.  Inline files may be referenced with a
      * <code>cid:xxxxxx</code> URL, where xxxxxx is the Content-ID
      * returned by the embed function. It is an error to bind the same name
-     * to more than one URL; if the same URL is embedded multiple times, the
-     * same Content-ID is guaranteed to be returned.
+     * to more than one URL.
      *
-     * <p>While functionally the same as passing <code>URLDataSource</code> to
-     * {@link #embed(DataSource, String, String)}, this method attempts
-     * to validate the URL before embedding it in the message and will throw
-     * <code>EmailException</code> if the validation fails. In this case, the
-     * <code>HtmlEmail</code> object will not be changed.
+     * <p>Example of use:<br><code><pre>
+     * HtmlEmail he = new HtmlEmail();
+     * he.setHtmlMsg("&lt;html&gt;&lt;img src=cid:" +
+     *  embed(new URL("file:/my/image.gif"),"image.gif") +
+     *  "&gt;&lt;/html&gt;");
+     * // code to set the others email fields (not shown)
+     * </pre></code>
      *
      * <p>
      * NOTE: Clients should take care to ensure that different URLs are bound to
@@ -240,33 +213,29 @@ public class HtmlEmail extends MultiPartEmail
      * @param name The name that will be set in the filename header
      * field.
      * @return A String with the Content-ID of the file.
-     * @throws EmailException when URL supplied is invalid or if <code> is null
-     * or empty; also see {@link javax.mail.internet.MimeBodyPart} for definitions
+     * @throws EmailException when URL supplied is invalid
+     *  also see javax.mail.internet.MimeBodyPart for definitions
      * @since 1.0
      */
     public String embed(URL url, String name) throws EmailException
     {
-        if (EmailUtils.isEmpty(name))
-        {
-            throw new EmailException("name cannot be null or empty");
-        }
+        InlineImage ii = null;
 
-        // check if a URLDataSource for this name has already been attached;
+        // check if the URL contents have already been attached;
         // if so, return the cached CID value.
         if (inlineImages.containsKey(name))
         {
-            InlineImage ii = (InlineImage) inlineImages.get(name);
-            URLDataSource urlDataSource = (URLDataSource) ii.getDataSource();
+            ii = (InlineImage) inlineImages.get(name);
             // make sure the supplied URL points to the same thing
             // as the one already associated with this name.
-            if (url.equals(urlDataSource.getURL()))
+            if (url.equals(ii.getURL()))
             {
                 return ii.getCid();
             }
             else
             {
-                throw new EmailException("embedded name '" + name
-                    + "' is already bound to URL " + urlDataSource.getURL()
+                throw new EmailException("embedded file name '" + name
+                    + " is already bound to URL " + ii.getURL().toString()
                     + "; existing names cannot be rebound");
             }
             // NOTE: Comparing URLs with URL.equals() is known to be
@@ -276,207 +245,27 @@ public class HtmlEmail extends MultiPartEmail
         }
 
         // verify that the URL is valid
-        InputStream is = null;
         try
         {
-            is = url.openStream();
+            InputStream is = url.openStream();
+            is.close();
         }
         catch (IOException e)
         {
             throw new EmailException("Invalid URL", e);
         }
-        finally
-        {
-            try
-            {
-                if (is != null)
-                {
-                    is.close();
-                }
-            }
-            catch (IOException ioe) { /* sigh */ }
-        }
-
-        return embed(new URLDataSource(url), name);
-    }
-
-    /**
-     * Embeds a file in the HTML. This implementation delegates to
-     * {@link #embed(File, String)}.
-     *
-     * @param file The <code>File</code> object to embed
-     * @return A String with the Content-ID of the file.
-     * @throws EmailException when the supplied <code>File</code> cannot be
-     * used; also see {@link javax.mail.internet.MimeBodyPart} for definitions
-     *
-     * @see #embed(File, String)
-     * @since 1.1
-     */
-    public String embed(File file) throws EmailException
-    {
-        String cid = EmailUtils.randomAlphabetic(HtmlEmail.CID_LENGTH).toLowerCase();
-        return embed(file, cid);
-    }
-
-    /**
-     * Embeds a file in the HTML.
-     *
-     * <p>This method embeds a file located by an URL into
-     * the mail body. It allows, for instance, to add inline images
-     * to the email.  Inline files may be referenced with a
-     * <code>cid:xxxxxx</code> URL, where xxxxxx is the Content-ID
-     * returned by the embed function. Files are bound to their names, which is
-     * the value returned by {@link java.io.File#getName()}. If the same file
-     * is embedded multiple times, the same CID is guaranteed to be returned.
-     *
-     * <p>While functionally the same as passing <code>FileDataSource</code> to
-     * {@link #embed(DataSource, String, String)}, this method attempts
-     * to validate the file before embedding it in the message and will throw
-     * <code>EmailException</code> if the validation fails. In this case, the
-     * <code>HtmlEmail</code> object will not be changed.
-     *
-     * @param file The <code>File</code> to embed
-     * @param cid the Content-ID to use for the embedded <code>File</code>
-     * @return A String with the Content-ID of the file.
-     * @throws EmailException when the supplied <code>File</code> cannot be used
-     *  or if the file has already been embedded;
-     *  also see {@link javax.mail.internet.MimeBodyPart} for definitions
-     * @since 1.1
-     */
-    public String embed(File file, String cid) throws EmailException
-    {
-        if (EmailUtils.isEmpty(file.getName()))
-        {
-            throw new EmailException("file name cannot be null or empty");
-        }
-
-        // verify that the File can provide a canonical path
-        String filePath = null;
-        try
-        {
-            filePath = file.getCanonicalPath();
-        }
-        catch (IOException ioe)
-        {
-            throw new EmailException("couldn't get canonical path for "
-                    + file.getName(), ioe);
-        }
-
-        // check if a FileDataSource for this name has already been attached;
-        // if so, return the cached CID value.
-        if (inlineImages.containsKey(file.getName()))
-        {
-            InlineImage ii = (InlineImage) inlineImages.get(file.getName());
-            FileDataSource fileDataSource = (FileDataSource) ii.getDataSource();
-            // make sure the supplied file has the same canonical path
-            // as the one already associated with this name.
-            String existingFilePath = null;
-            try
-            {
-                existingFilePath = fileDataSource.getFile().getCanonicalPath();
-            }
-            catch (IOException ioe)
-            {
-                throw new EmailException("couldn't get canonical path for file "
-                        + fileDataSource.getFile().getName()
-                        + "which has already been embedded", ioe);
-            }
-            if (filePath.equals(existingFilePath))
-            {
-                return ii.getCid();
-            }
-            else
-            {
-                throw new EmailException("embedded name '" + file.getName()
-                    + "' is already bound to file " + existingFilePath
-                    + "; existing names cannot be rebound");
-            }
-        }
-
-        // verify that the file is valid
-        if (!file.exists())
-        {
-            throw new EmailException("file " + filePath + " doesn't exist");
-        }
-        if (!file.isFile())
-        {
-            throw new EmailException("file " + filePath + " isn't a normal file");
-        }
-        if (!file.canRead())
-        {
-            throw new EmailException("file " + filePath + " isn't readable");
-        }
-
-        return embed(new FileDataSource(file), file.getName());
-    }
-
-    /**
-     * Embeds the specified <code>DataSource</code> in the HTML using a
-     * randomly generated Content-ID. Returns the generated Content-ID string.
-     *
-     * @param dataSource the <code>DataSource</code> to embed
-     * @param name the name that will be set in the filename header field
-     * @return the generated Content-ID for this <code>DataSource</code>
-     * @throws EmailException if the embedding fails or if <code>name</code> is
-     * null or empty
-     * @see #embed(DataSource, String, String)
-     * @since 1.1
-     */
-    public String embed(DataSource dataSource, String name) throws EmailException
-    {
-        // check if the DataSource has already been attached;
-        // if so, return the cached CID value.
-        if (inlineImages.containsKey(name))
-        {
-            InlineImage ii = (InlineImage) inlineImages.get(name);
-            // make sure the supplied URL points to the same thing
-            // as the one already associated with this name.
-            if (dataSource.equals(ii.getDataSource()))
-            {
-                return ii.getCid();
-            }
-            else
-            {
-                throw new EmailException("embedded DataSource '" + name
-                    + "' is already bound to name " + ii.getDataSource().toString()
-                    + "; existing names cannot be rebound");
-            }
-        }
-
-        String cid = EmailUtils.randomAlphabetic(HtmlEmail.CID_LENGTH).toLowerCase();
-        return embed(dataSource, name, cid);
-    }
-
-    /**
-     * Embeds the specified <code>DataSource</code> in the HTML using the
-     * specified Content-ID. Returns the specified Content-ID string.
-     *
-     * @param dataSource the <code>DataSource</code> to embed
-     * @param name the name that will be set in the filename header field
-     * @param cid the Content-ID to use for this <code>DataSource</code>
-     * @return the supplied Content-ID for this <code>DataSource</code>
-     * @throws EmailException if the embedding fails or if <code>name</code> is
-     * null or empty
-     * @since 1.1
-     */
-    public String embed(DataSource dataSource, String name, String cid)
-        throws EmailException
-    {
-        if (EmailUtils.isEmpty(name))
-        {
-            throw new EmailException("name cannot be null or empty");
-        }
 
         MimeBodyPart mbp = new MimeBodyPart();
 
         try
         {
-            mbp.setDataHandler(new DataHandler(dataSource));
+            mbp.setDataHandler(new DataHandler(new URLDataSource(url)));
             mbp.setFileName(name);
             mbp.setDisposition("inline");
+            String cid = EmailUtils.randomAlphabetic(HtmlEmail.CID_LENGTH).toLowerCase();
             mbp.setContentID("<" + cid + ">");
 
-            InlineImage ii = new InlineImage(cid, dataSource, mbp);
+            ii = new InlineImage(cid, url, mbp);
             this.inlineImages.put(name, ii);
 
             return cid;
@@ -593,8 +382,8 @@ public class HtmlEmail extends MultiPartEmail
     {
         /** content id */
         private String cid;
-        /** <code>DataSource</code> for the content */
-        private DataSource dataSource;
+        /** URL that points to the content */
+        private URL url;
         /** the <code>MimeBodyPart</code> that contains the encoded data */
         private MimeBodyPart mbp;
 
@@ -602,14 +391,14 @@ public class HtmlEmail extends MultiPartEmail
          * Creates an InlineImage object to represent the
          * specified content ID and <code>MimeBodyPart</code>.
          * @param cid the generated content ID
-         * @param dataSource the <code>DataSource</code> that represents the content
+         * @param url the URL that points to the content
          * @param mbp the <code>MimeBodyPart</code> that contains the encoded
          * data
          */
-        public InlineImage(String cid, DataSource dataSource, MimeBodyPart mbp)
+        public InlineImage(String cid, URL url, MimeBodyPart mbp)
         {
             this.cid = cid;
-            this.dataSource = dataSource;
+            this.url = url;
             this.mbp = mbp;
         }
 
@@ -623,12 +412,12 @@ public class HtmlEmail extends MultiPartEmail
         }
 
         /**
-         * Returns the <code>DataSource</code> that represents the encoded content.
-         * @return the <code>DataSource</code> representing the encoded content
+         * Returns the URL that points to the encoded content.
+         * @return the URL pointing to the encoded content
          */
-        public DataSource getDataSource()
+        public URL getURL()
         {
-            return dataSource;
+            return url;
         }
 
         /**
