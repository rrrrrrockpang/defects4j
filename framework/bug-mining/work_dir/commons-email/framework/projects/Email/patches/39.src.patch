diff --git a/src/main/java/org/apache/commons/mail/util/MimeMessageParser.java b/src/main/java/org/apache/commons/mail/util/MimeMessageParser.java
index 6aa3d2c..cc57282 100644
--- a/src/main/java/org/apache/commons/mail/util/MimeMessageParser.java
+++ b/src/main/java/org/apache/commons/mail/util/MimeMessageParser.java
@@ -16,30 +16,27 @@
  */
 package org.apache.commons.mail.util;
 
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
 import javax.activation.DataHandler;
 import javax.activation.DataSource;
 import javax.mail.Message;
 import javax.mail.MessagingException;
 import javax.mail.Multipart;
 import javax.mail.Part;
-import javax.mail.internet.ContentType;
 import javax.mail.internet.InternetAddress;
 import javax.mail.internet.MimeBodyPart;
 import javax.mail.internet.MimeMessage;
 import javax.mail.internet.MimePart;
 import javax.mail.internet.MimeUtility;
-import javax.mail.internet.ParseException;
 import javax.mail.util.ByteArrayDataSource;
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 /**
  * Parses a MimeMessage and stores the individual parts such a plain text,
@@ -173,21 +170,21 @@ public class MimeMessageParser
     protected void parse(Multipart parent, MimePart part)
         throws MessagingException, IOException
     {
-        if (isMimeType(part, "text/plain") && (plainContent == null)
+        if (part.isMimeType("text/plain") && (plainContent == null)
                 && (!MimePart.ATTACHMENT.equalsIgnoreCase(part.getDisposition())))
         {
             plainContent = (String) part.getContent();
         }
         else
         {
-            if (isMimeType(part, "text/html") && (htmlContent == null)
+            if (part.isMimeType("text/html") && (htmlContent == null)
                     && (!MimePart.ATTACHMENT.equalsIgnoreCase(part.getDisposition())))
             {
                 htmlContent = (String) part.getContent();
             }
             else
             {
-                if (isMimeType(part, "multipart/*"))
+                if (part.isMimeType("multipart/*"))
                 {
                     this.isMultiPart = true;
                     Multipart mp = (Multipart) part.getContent();
@@ -208,32 +205,6 @@ public class MimeMessageParser
         }
     }
 
-    /**
-     * Checks whether the MimePart contains an object of the given mime type.
-     *
-     * @param part     the current MimePart
-     * @param mimeType the mime type to check
-     * @return {@code true} if the MimePart matches the given mime type, {@code false} otherwise
-     * @throws MessagingException parsing the MimeMessage failed
-     * @throws IOException        parsing the MimeMessage failed
-     */
-    private boolean isMimeType(MimePart part, String mimeType)
-        throws MessagingException, IOException
-    {
-        // Do not use part.isMimeType(String) as it is broken for MimeBodyPart
-        // and does not really check the actual content type.
-
-        try
-        {
-            ContentType ct = new ContentType(part.getDataHandler().getContentType());
-            return ct.match(mimeType);
-        }
-        catch (ParseException ex)
-        {
-            return part.getContentType().equalsIgnoreCase(mimeType);
-        }
-    }
-
     /**
      * Parses the MimePart to create a DataSource.
      *
