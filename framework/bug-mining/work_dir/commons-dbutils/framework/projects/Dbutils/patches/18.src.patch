diff --git a/src/main/java/org/apache/commons/dbutils/DbUtils.java b/src/main/java/org/apache/commons/dbutils/DbUtils.java
index 7971bd1..c9899ef 100644
--- a/src/main/java/org/apache/commons/dbutils/DbUtils.java
+++ b/src/main/java/org/apache/commons/dbutils/DbUtils.java
@@ -16,17 +16,11 @@
  */
 package org.apache.commons.dbutils;
 
-import static java.sql.DriverManager.registerDriver;
-
 import java.io.PrintWriter;
-import java.lang.reflect.Constructor;
 import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.DriverPropertyInfo;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.util.Properties;
 
 /**
  * A collection of JDBC helper methods.  This class is thread safe.
@@ -199,30 +193,13 @@ public final class DbUtils {
      */
     public static boolean loadDriver(ClassLoader classLoader, String driverClassName) {
         try {
-            Class<?> loadedClass = classLoader.loadClass(driverClassName);
-
-            if (!Driver.class.isAssignableFrom(loadedClass)) {
-                return false;
-            }
-
-            @SuppressWarnings("unchecked") // guarded by previous check
-            Class<Driver> driverClass = (Class<Driver>) loadedClass;
-            Constructor<Driver> driverConstructor = driverClass.getConstructor();
-
-            // make Constructor accessible if it is private
-            boolean isConstructorAccessible = driverConstructor.isAccessible();
-            if (!isConstructorAccessible) {
-                driverConstructor.setAccessible(true);
-            }
-
-            try {
-                Driver driver = driverConstructor.newInstance();
-                registerDriver(new DriverProxy(driver));
-            } finally {
-                driverConstructor.setAccessible(isConstructorAccessible);
-            }
+            classLoader.loadClass(driverClassName).newInstance();
+            return true;
 
+        } catch (IllegalAccessException e) {
+            // Constructor is private, OK for DriverManager contract
             return true;
+
         } catch (Exception e) {
             return false;
 
@@ -326,75 +303,4 @@ public final class DbUtils {
         }
     }
 
-    /**
-     * Simple {@link Driver} proxy class that proxies a JDBC Driver loaded dynamically.
-     *
-     * @since 1.6
-     */
-    private static final class DriverProxy implements Driver {
-
-        /**
-         * The adapted JDBC Driver loaded dynamically.
-         */
-        private final Driver adapted;
-
-        /**
-         * Creates a new JDBC Driver that adapts a JDBC Driver loaded dynamically.
-         *
-         * @param adapted the adapted JDBC Driver loaded dynamically.
-         */
-        public DriverProxy(Driver adapted) {
-            this.adapted = adapted;
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public boolean acceptsURL(String url) throws SQLException {
-            return adapted.acceptsURL(url);
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public Connection connect(String url, Properties info) throws SQLException {
-            return adapted.connect(url, info);
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public int getMajorVersion() {
-            return adapted.getMajorVersion();
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public int getMinorVersion() {
-            return adapted.getMinorVersion();
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {
-            return adapted.getPropertyInfo(url, info);
-        }
-
-        /**
-         * {@inheritDoc}
-         */
-        @Override
-        public boolean jdbcCompliant() {
-            return adapted.jdbcCompliant();
-        }
-
-    }
-
 }
