diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java
index 01a73bf0..71233ddc 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorAttribute.java
@@ -17,13 +17,13 @@
 package org.apache.commons.configuration.tree.xpath;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Set;
 
 import org.apache.commons.jxpath.ri.QName;
 import org.apache.commons.jxpath.ri.model.NodePointer;
-import org.apache.commons.lang3.StringUtils;
 
 /**
  * A specialized node iterator implementation that deals with attribute nodes.
@@ -91,25 +91,25 @@ class ConfigurationNodeIteratorAttribute<T> extends
     private List<String> createAttributeDataList(
             ConfigurationNodePointer<T> parent, QName name)
     {
+        if (name.getPrefix() != null)
+        {
+            // namespace prefixes are not supported
+            return Collections.emptyList();
+        }
+
         List<String> result = new ArrayList<String>();
         if (!WILDCARD.equals(name.getName()))
         {
-            addAttributeData(parent, result, qualifiedName(name));
+            addAttributeData(parent, result, name.getName());
         }
         else
         {
             Set<String> names =
                     new LinkedHashSet<String>(parent.getNodeHandler()
                             .getAttributes(parent.getConfigurationNode()));
-            String prefix =
-                    (name.getPrefix() != null) ? prefixName(name.getPrefix(),
-                            null) : null;
             for (String n : names)
             {
-                if (prefix == null || StringUtils.startsWith(n, prefix))
-                {
-                    addAttributeData(parent, result, n);
-                }
+                addAttributeData(parent, result, n);
             }
         }
 
diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java
index 35da018a..407e19a0 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorBase.java
@@ -17,10 +17,8 @@
 package org.apache.commons.configuration.tree.xpath;
 
 import org.apache.commons.configuration.tree.NodeHandler;
-import org.apache.commons.jxpath.ri.QName;
 import org.apache.commons.jxpath.ri.model.NodeIterator;
 import org.apache.commons.jxpath.ri.model.NodePointer;
-import org.apache.commons.lang3.StringUtils;
 
 /**
  * <p>
@@ -38,12 +36,6 @@ import org.apache.commons.lang3.StringUtils;
  */
 abstract class ConfigurationNodeIteratorBase<T> implements NodeIterator
 {
-    /** Constant for the prefix separator. */
-    private static final String PREFIX_SEPARATOR = ":";
-
-    /** A format for constructing a node name with a namespace prefix. */
-    private static final String FMT_NAMESPACE = "%s" + PREFIX_SEPARATOR + "%s";
-
     /** Stores the parent node pointer. */
     private final ConfigurationNodePointer<T> parent;
 
@@ -195,31 +187,4 @@ abstract class ConfigurationNodeIteratorBase<T> implements NodeIterator
      * @return the number of elements
      */
     protected abstract int size();
-
-    /**
-     * Generates a qualified name with a namespace prefix.
-     *
-     * @param prefix the prefix
-     * @param name the name (may be <b>null</b>)
-     * @return the qualified name
-     */
-    protected static String prefixName(String prefix, String name)
-    {
-        return String.format(FMT_NAMESPACE, prefix,
-                StringUtils.defaultString(name));
-    }
-
-    /**
-     * Returns the qualified name from the given {@code QName}. If the name has
-     * no namespace, result is the simple name. Otherwise, the namespace prefix
-     * is added.
-     *
-     * @param name the {@code QName}
-     * @return the qualified name
-     */
-    protected static String qualifiedName(QName name)
-    {
-        return (name.getPrefix() == null) ? name.getName() : prefixName(
-                name.getPrefix(), name.getName());
-    }
 }
diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
index b035a6b0..926ee1a2 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
@@ -38,6 +38,11 @@ import org.apache.commons.lang3.StringUtils;
 class ConfigurationNodeIteratorChildren<T> extends
         ConfigurationNodeIteratorBase<T>
 {
+    /** Constant for the prefix separator. */
+    private static final String PREFIX_SEPARATOR = ":";
+
+    /** A format for constructing a node name with a namespace prefix. */
+    private static final String FMT_NAMESPACE = "%s" + PREFIX_SEPARATOR + "%s";
 
     /** The list with the sub nodes to iterate over. */
     private final List<T> subNodes;
@@ -147,7 +152,9 @@ class ConfigurationNodeIteratorChildren<T> extends
      */
     private List<T> createSubNodeListForName(T node, QName name)
     {
-        String compareName = qualifiedName(name);
+        String compareName =
+                (name.getPrefix() == null) ? name.getName() : prefixName(
+                        name.getPrefix(), name.getName());
         List<T> result = new ArrayList<T>();
         for (T child : getNodeHandler().getChildren(node))
         {
@@ -214,4 +221,16 @@ class ConfigurationNodeIteratorChildren<T> extends
         return -1;
     }
 
+    /**
+     * Generates a qualified name with a namespace prefix.
+     *
+     * @param prefix the prefix
+     * @param name the name
+     * @return the qualified name
+     */
+    private static String prefixName(String prefix, String name)
+    {
+        return String.format(FMT_NAMESPACE, prefix,
+                StringUtils.defaultString(name));
+    }
 }
