diff --git a/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java b/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
index b04f639c..b7c501ef 100644
--- a/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
+++ b/src/test/org/apache/commons/configuration/TestAbstractConfigurationBasicFeatures.java
@@ -19,14 +19,10 @@ package org.apache.commons.configuration;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.configuration.event.ConfigurationEvent;
-import org.apache.commons.configuration.event.ConfigurationListener;
 
 import junit.framework.TestCase;
 
@@ -38,12 +34,6 @@ import junit.framework.TestCase;
  */
 public class TestAbstractConfigurationBasicFeatures extends TestCase
 {
-    /** Constant for the prefix of test keys.*/
-    private static final String KEY_PREFIX = "key";
-
-    /** Constant for the number of properties in tests for copy operations.*/
-    private static final int PROP_COUNT = 12;
-
     /**
      * Tests the clear() implementation of AbstractConfiguration if the iterator
      * returned by getKeys() does not support the remove() operation.
@@ -133,217 +123,6 @@ public class TestAbstractConfigurationBasicFeatures extends TestCase
         }
     }
 
-    /**
-     * Tests the copy() method.
-     */
-    public void testCopy()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        Configuration srcConfig = setUpSourceConfig();
-        config.copy(srcConfig);
-        for (int i = 0; i < PROP_COUNT; i++)
-        {
-            String key = KEY_PREFIX + i;
-            if (srcConfig.containsKey(key))
-            {
-                assertEquals("Value not replaced: " + key, srcConfig
-                        .getProperty(key), config.getProperty(key));
-            }
-            else
-            {
-                assertEquals("Value modified: " + key, "value" + i, config
-                        .getProperty(key));
-            }
-        }
-    }
-
-    /**
-     * Tests the copy() method when properties with multiple values and escaped
-     * list delimiters are involved.
-     */
-    public void testCopyWithLists()
-    {
-        Configuration srcConfig = setUpSourceConfig();
-        AbstractConfiguration config = setUpDestConfig();
-        config.copy(srcConfig);
-        checkListProperties(config);
-    }
-
-    /**
-     * Tests the events generated by a copy() operation.
-     */
-    public void testCopyEvents()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        Configuration srcConfig = setUpSourceConfig();
-        CollectingConfigurationListener l = new CollectingConfigurationListener();
-        config.addConfigurationListener(l);
-        config.copy(srcConfig);
-        checkCopyEvents(l, srcConfig, AbstractConfiguration.EVENT_SET_PROPERTY);
-    }
-
-    /**
-     * Tests copying a null configuration. This should be a noop.
-     */
-    public void testCopyNull()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        config.copy(null);
-        ConfigurationAssert.assertEquals(setUpDestConfig(), config);
-    }
-
-    /**
-     * Tests the append() method.
-     */
-    public void testAppend()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        Configuration srcConfig = setUpSourceConfig();
-        config.append(srcConfig);
-        for (int i = 0; i < PROP_COUNT; i++)
-        {
-            String key = KEY_PREFIX + i;
-            if (srcConfig.containsKey(key))
-            {
-                List values = config.getList(key);
-                assertEquals("Value not added: " + key, 2, values.size());
-                assertEquals("Wrong value 1 for " + key, "value" + i, values
-                        .get(0));
-                assertEquals("Wrong value 2 for " + key, "src" + i, values
-                        .get(1));
-            }
-            else
-            {
-                assertEquals("Value modified: " + key, "value" + i, config
-                        .getProperty(key));
-            }
-        }
-    }
-
-    /**
-     * Tests the append() method when properties with multiple values and
-     * escaped list delimiters are involved.
-     */
-    public void testAppendWithLists()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        config.append(setUpSourceConfig());
-        checkListProperties(config);
-    }
-
-    /**
-     * Tests the events generated by an append() operation.
-     */
-    public void testAppendEvents()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        Configuration srcConfig = setUpSourceConfig();
-        CollectingConfigurationListener l = new CollectingConfigurationListener();
-        config.addConfigurationListener(l);
-        config.append(srcConfig);
-        checkCopyEvents(l, srcConfig, AbstractConfiguration.EVENT_ADD_PROPERTY);
-    }
-
-    /**
-     * Tests appending a null configuration. This should be a noop.
-     */
-    public void testAppendNull()
-    {
-        AbstractConfiguration config = setUpDestConfig();
-        config.append(null);
-        ConfigurationAssert.assertEquals(setUpDestConfig(), config);
-    }
-
-    /**
-     * Creates the source configuration for testing the copy() and append()
-     * methods. This configuration contains keys with an odd index and values
-     * starting with the prefix "src". There are also some list properties.
-     *
-     * @return the source configuration for copy operations
-     */
-    private Configuration setUpSourceConfig()
-    {
-        BaseConfiguration config = new BaseConfiguration();
-        for (int i = 1; i < PROP_COUNT; i += 2)
-        {
-            config.addProperty(KEY_PREFIX + i, "src" + i);
-        }
-        config.addProperty("list1", "1,2,3");
-        config.addProperty("list2", "3\\,1415,9\\,81");
-        return config;
-    }
-
-    /**
-     * Creates the destination configuration for testing the copy() and append()
-     * methods. This configuration contains keys with a running index and
-     * corresponding values starting with the prefix "value".
-     *
-     * @return the destination configuration for copy operations
-     */
-    private AbstractConfiguration setUpDestConfig()
-    {
-        AbstractConfiguration config = new TestConfigurationImpl(
-                new PropertiesConfiguration());
-        for (int i = 0; i < PROP_COUNT; i++)
-        {
-            config.addProperty(KEY_PREFIX + i, "value" + i);
-        }
-        return config;
-    }
-
-    /**
-     * Tests the values of list properties after a copy operation.
-     *
-     * @param config the configuration to test
-     */
-    private void checkListProperties(Configuration config)
-    {
-        List values = config.getList("list1");
-        assertEquals("Wrong number of elements in list 1", 3, values.size());
-        values = config.getList("list2");
-        assertEquals("Wrong number of elements in list 2", 2, values.size());
-        assertEquals("Wrong value 1", "3,1415", values.get(0));
-        assertEquals("Wrong value 2", "9,81", values.get(1));
-    }
-
-    /**
-     * Tests whether the correct events are received for a copy operation.
-     *
-     * @param l the event listener
-     * @param src the configuration that was copied
-     * @param eventType the expected event type
-     */
-    private void checkCopyEvents(CollectingConfigurationListener l,
-            Configuration src, int eventType)
-    {
-        Map events = new HashMap();
-        for (Iterator it = l.events.iterator(); it.hasNext();)
-        {
-            ConfigurationEvent e = (ConfigurationEvent) it.next();
-            assertEquals("Wrong event type", eventType, e.getType());
-            assertTrue("Unknown property: " + e.getPropertyName(), src
-                    .containsKey(e.getPropertyName()));
-            assertEquals("Wrong property value for " + e.getPropertyName(), e
-                    .getPropertyValue(), src.getProperty(e.getPropertyName()));
-            if (!e.isBeforeUpdate())
-            {
-                assertTrue("After event without before event", events
-                        .containsKey(e.getPropertyName()));
-            }
-            else
-            {
-                events.put(e.getPropertyName(), e);
-            }
-        }
-
-        for (Iterator it = src.getKeys(); it.hasNext();)
-        {
-            String key = (String) it.next();
-            assertTrue("No event received for key " + key, events
-                    .containsKey(key));
-        }
-    }
-
     /**
      * A test configuration implementation. This implementation inherits
      * directly from AbstractConfiguration. For implementing the required
@@ -396,19 +175,4 @@ public class TestAbstractConfigurationBasicFeatures extends TestCase
             config.clearPropertyDirect(key);
         }
     }
-
-    /**
-     * An event listener implementation that simply collects all received
-     * configuration events.
-     */
-    static class CollectingConfigurationListener implements
-            ConfigurationListener
-    {
-        List events = new ArrayList();
-
-        public void configurationChanged(ConfigurationEvent event)
-        {
-            events.add(event);
-        }
-    }
 }
diff --git a/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java b/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
index cbb9a5c6..cae7e51d 100644
--- a/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestPropertiesConfiguration.java
@@ -756,66 +756,6 @@ public class TestPropertiesConfiguration extends TestCase
                 .getBoolean(testProperty));
     }
 
-    /**
-     * Tests copying another configuration into the test configuration. This
-     * test ensures that the layout object is informed about the newly added
-     * properties.
-     */
-    public void testCopyAndSave() throws ConfigurationException
-    {
-        Configuration copyConf = setUpCopyConfig();
-        conf.copy(copyConf);
-        checkCopiedConfig(copyConf);
-    }
-
-    /**
-     * Tests appending a configuration to the test configuration. Again it has
-     * to be ensured that the layout object is correctly updated.
-     */
-    public void testAppendAndSave() throws ConfigurationException
-    {
-        Configuration copyConf = setUpCopyConfig();
-        conf.append(copyConf);
-        checkCopiedConfig(copyConf);
-    }
-
-    /**
-     * Creates a configuration that can be used for testing copy operations.
-     *
-     * @return the configuration to be copied
-     */
-    private Configuration setUpCopyConfig()
-    {
-        final int count = 25;
-        Configuration result = new BaseConfiguration();
-        for (int i = 1; i <= count; i++)
-        {
-            result.addProperty("copyKey" + i, "copyValue" + i);
-        }
-        return result;
-    }
-
-    /**
-     * Tests whether the data of a configuration that was copied into the test
-     * configuration is correctly saved.
-     *
-     * @param copyConf the copied configuration
-     * @throws ConfigurationException if an error occurs
-     */
-    private void checkCopiedConfig(Configuration copyConf)
-            throws ConfigurationException
-    {
-        conf.save(testSavePropertiesFile);
-        PropertiesConfiguration checkConf = new PropertiesConfiguration(
-                testSavePropertiesFile);
-        for (Iterator it = copyConf.getKeys(); it.hasNext();)
-        {
-            String key = (String) it.next();
-            assertEquals("Wrong value for property " + key, checkConf
-                    .getProperty(key), copyConf.getProperty(key));
-        }
-    }
-
     /**
      * A dummy layout implementation for checking whether certain methods are
      * correctly called by the configuration.
