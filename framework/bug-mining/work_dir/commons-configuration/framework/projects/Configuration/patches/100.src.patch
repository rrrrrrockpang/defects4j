diff --git a/src/java/org/apache/commons/configuration/XMLConfiguration.java b/src/java/org/apache/commons/configuration/XMLConfiguration.java
index ece131d9..c8afdc15 100644
--- a/src/java/org/apache/commons/configuration/XMLConfiguration.java
+++ b/src/java/org/apache/commons/configuration/XMLConfiguration.java
@@ -833,8 +833,7 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
             }
 
             XMLBuilderVisitor builder = new XMLBuilderVisitor(document,
-                    isDelimiterParsingDisabled() ? (char) 0 : getListDelimiter(),
-                    isAttributeSplittingDisabled());
+                    isDelimiterParsingDisabled() ? (char) 0 : getListDelimiter());
             builder.processDocument(getRoot());
             initRootElementText(document, getRootNode().getValue());
             return document;
@@ -1310,9 +1309,9 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
             {
                 if (txtNode == null)
                 {
-                    String newValue = isDelimiterParsingDisabled() ? value.toString() :
-                        PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
-                    txtNode = document.createTextNode(newValue);
+                    txtNode = document
+                            .createTextNode(PropertyConverter.escapeDelimiters(
+                                    value.toString(), getListDelimiter()));
                     if (((Element) getReference()).getFirstChild() != null)
                     {
                         ((Element) getReference()).insertBefore(txtNode,
@@ -1325,9 +1324,8 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
                 }
                 else
                 {
-                    String newValue = isDelimiterParsingDisabled() ? value.toString() :
-                        PropertyConverter.escapeDelimiters(value.toString(), getListDelimiter());
-                    txtNode.setNodeValue(newValue);
+                    txtNode.setNodeValue(PropertyConverter.escapeDelimiters(
+                            value.toString(), getListDelimiter()));
                 }
             }
         }
@@ -1338,8 +1336,7 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
          */
         private void updateAttribute()
         {
-            XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter(),
-                    isAttributeSplittingDisabled());
+            XMLBuilderVisitor.updateAttribute(getParent(), getName(), getListDelimiter());
         }
 
         /**
@@ -1402,21 +1399,16 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
         private char listDelimiter = AbstractConfiguration.
                 getDefaultListDelimiter();
 
-        /** True if attributes should not be split */
-        private boolean isAttributeSplittingDisabled;
-
         /**
          * Creates a new instance of <code>XMLBuilderVisitor</code>
          *
          * @param doc the document to be created
          * @param listDelimiter the delimiter for attribute properties with multiple values
-         * @param isAttributeSplittingDisabled true if attribute splitting is disabled.
          */
-        public XMLBuilderVisitor(Document doc, char listDelimiter, boolean isAttributeSplittingDisabled)
+        public XMLBuilderVisitor(Document doc, char listDelimiter)
         {
             document = doc;
             this.listDelimiter = listDelimiter;
-            this.isAttributeSplittingDisabled = isAttributeSplittingDisabled;
         }
 
         /**
@@ -1443,8 +1435,7 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
         {
             if (newNode.isAttribute())
             {
-                updateAttribute(parent, getElement(parent), newNode.getName(), listDelimiter,
-                    isAttributeSplittingDisabled);
+                updateAttribute(parent, getElement(parent), newNode.getName(), listDelimiter);
                 return null;
             }
 
@@ -1484,10 +1475,8 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
          * @param elem the element that is associated with this node
          * @param name the name of the affected attribute
          * @param listDelimiter the delimiter for attributes with multiple values
-         * @param isAttributeSplittingDisabled true if attribute splitting is disabled.
          */
-        private static void updateAttribute(Node node, Element elem, String name, char listDelimiter,
-                                            boolean isAttributeSplittingDisabled)
+        private static void updateAttribute(Node node, Element elem, String name, char listDelimiter)
         {
             if (node != null && elem != null)
             {
@@ -1503,10 +1492,8 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
                         {
                             buf.append(delimiter);
                         }
-                        String value = isAttributeSplittingDisabled ? attr.getValue().toString() :
-                            PropertyConverter.escapeDelimiters(attr.getValue().toString(),
-                                    delimiter);
-                        buf.append(value);
+                        buf.append(PropertyConverter.escapeDelimiters(attr
+                                .getValue().toString(), delimiter));
                     }
                     attr.setReference(elem);
                 }
@@ -1530,15 +1517,12 @@ public class XMLConfiguration extends AbstractHierarchicalFileConfiguration
          * @param node the affected node
          * @param name the name of the attribute
          * @param listDelimiter the delimiter for attributes with multiple values
-         * @param isAttributeSplittingDisabled true if attributes splitting is disabled.
          */
-        static void updateAttribute(Node node, String name, char listDelimiter,
-                                    boolean isAttributeSplittingDisabled)
+        static void updateAttribute(Node node, String name, char listDelimiter)
         {
             if (node != null)
             {
-                updateAttribute(node, (Element) node.getReference(), name, listDelimiter,
-                        isAttributeSplittingDisabled);
+                updateAttribute(node, (Element) node.getReference(), name, listDelimiter);
             }
         }
 
