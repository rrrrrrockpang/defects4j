diff --git a/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java b/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java
index 30cbbce6..01a9794b 100644
--- a/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java
+++ b/src/main/java/org/apache/commons/configuration2/ConfigurationConverter.java
@@ -62,10 +62,10 @@ public final class ConfigurationConverter
      * configuration (if it extends AbstractConfiguration) or with a comma as
      * delimiter otherwise.
      *
-     * @param config ImmutableConfiguration object to convert
+     * @param config Configuration object to convert
      * @return Properties created from the Configuration
      */
-    public static Properties getProperties(ImmutableConfiguration config)
+    public static Properties getProperties(Configuration config)
     {
         Properties props = new Properties();
         ListDelimiterHandler listHandler;
@@ -114,21 +114,6 @@ public final class ConfigurationConverter
         return props;
     }
 
-    /**
-     * Convert a Configuration class into a Properties class. List properties
-     * are joined into a string using either the list delimiter handler of the
-     * configuration (if it extends AbstractConfiguration) or with a comma as
-     * delimiter otherwise.
-     * This version of the method exists only for backwards compatibility reason.
-     *
-     * @param config Configuration object to convert
-     * @return Properties created from the Configuration
-     */
-    public static Properties getProperties(Configuration config)
-    {
-        return getProperties((ImmutableConfiguration) config);
-    }
-
     /**
      * Convert a Configuration class into a Map class.
      *
diff --git a/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java b/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java
index a5244873..6132571f 100644
--- a/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java
+++ b/src/main/java/org/apache/commons/configuration2/ConfigurationUtils.java
@@ -105,21 +105,9 @@ public final class ConfigurationUtils
      * @param configuration the configuration
      * @param out the output stream to dump the configuration to
      */
-    public static void dump(ImmutableConfiguration configuration, PrintStream out)
-    {
-        dump(configuration, new PrintWriter(out));
-    }
-
-    /**
-     * Dump the configuration key/value mappings to some ouput stream.
-     * This version of the method exists only for backwards compatibility reason.
-     *
-     * @param configuration the configuration
-     * @param out the output stream to dump the configuration to
-     */
     public static void dump(Configuration configuration, PrintStream out)
     {
-        dump((ImmutableConfiguration) configuration, out);
+        dump(configuration, new PrintWriter(out));
     }
 
     /**
@@ -128,7 +116,7 @@ public final class ConfigurationUtils
      * @param configuration the configuration
      * @param out the writer to dump the configuration to
      */
-    public static void dump(ImmutableConfiguration configuration, PrintWriter out)
+    public static void dump(Configuration configuration, PrintWriter out)
     {
         for (Iterator<String> keys = configuration.getKeys(); keys.hasNext();)
         {
@@ -147,18 +135,6 @@ public final class ConfigurationUtils
         out.flush();
     }
 
-    /**
-     * Dump the configuration key/value mappings to some writer.
-     * This version of the method exists only for backwards compatibility reason.
-     *
-     * @param configuration the configuration
-     * @param out the writer to dump the configuration to
-     */
-    public static void dump(Configuration configuration, PrintWriter out)
-    {
-        dump((ImmutableConfiguration) configuration, out);
-    }
-
     /**
      * Get a string representation of the key/value mappings of a
      * configuration.
@@ -166,26 +142,13 @@ public final class ConfigurationUtils
      * @param configuration the configuration
      * @return a string representation of the configuration
      */
-    public static String toString(ImmutableConfiguration configuration)
+    public static String toString(Configuration configuration)
     {
         StringWriter writer = new StringWriter();
         dump(configuration, new PrintWriter(writer));
         return writer.toString();
     }
 
-    /**
-     * Get a string representation of the key/value mappings of a
-     * configuration.
-     * This version of the method exists only for backwards compatibility reason.
-     *
-     * @param configuration the configuration
-     * @return a string representation of the configuration
-     */
-    public static String toString(Configuration configuration)
-    {
-        return toString((ImmutableConfiguration) configuration);
-    }
-
     /**
      * <p>Copy all properties from the source configuration to the target
      * configuration. Properties in the target configuration are replaced with
@@ -200,7 +163,7 @@ public final class ConfigurationUtils
      * @param target the target configuration
      * @since 1.1
      */
-    public static void copy(ImmutableConfiguration source, Configuration target)
+    public static void copy(Configuration source, Configuration target)
     {
         for (Iterator<String> keys = source.getKeys(); keys.hasNext();)
         {
@@ -209,25 +172,6 @@ public final class ConfigurationUtils
         }
     }
 
-    /**
-     * <p>Copy all properties from the source configuration to the target
-     * configuration. Properties in the target configuration are replaced with
-     * the properties with the same key in the source configuration.</p>
-     * <p><em>Note:</em> This method is not able to handle some specifics of
-     * configurations derived from {@code AbstractConfiguration} (e.g.
-     * list delimiters). For a full support of all of these features the
-     * {@code copy()} method of {@code AbstractConfiguration} should
-     * be used. In a future release this method might become deprecated.</p>
-     *
-     * @param source the source configuration
-     * @param target the target configuration
-     * @since 1.1
-     */
-    public static void copy(Configuration source, Configuration target)
-    {
-        copy((ImmutableConfiguration) source, target);
-    }
-
     /**
      * <p>Append all properties from the source configuration to the target
      * configuration. Properties in the source configuration are appended to
@@ -242,7 +186,7 @@ public final class ConfigurationUtils
      * @param target the target configuration
      * @since 1.1
      */
-    public static void append(ImmutableConfiguration source, Configuration target)
+    public static void append(Configuration source, Configuration target)
     {
         for (Iterator<String> keys = source.getKeys(); keys.hasNext();)
         {
@@ -251,25 +195,6 @@ public final class ConfigurationUtils
         }
     }
 
-    /**
-     * <p>Append all properties from the source configuration to the target
-     * configuration. Properties in the source configuration are appended to
-     * the properties with the same key in the target configuration.</p>
-     * <p><em>Note:</em> This method is not able to handle some specifics of
-     * configurations derived from {@code AbstractConfiguration} (e.g.
-     * list delimiters). For a full support of all of these features the
-     * {@code copy()} method of {@code AbstractConfiguration} should
-     * be used. In a future release this method might become deprecated.</p>
-     *
-     * @param source the source configuration
-     * @param target the target configuration
-     * @since 1.1
-     */
-    public static void append(Configuration source, Configuration target)
-    {
-        append((ImmutableConfiguration) source, target);
-    }
-
     /**
      * Converts the passed in configuration to a hierarchical one. If the
      * configuration is already hierarchical, it is directly returned. Otherwise
diff --git a/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java b/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java
index b51bad03..8a3de5f0 100644
--- a/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/plist/PropertyListConfiguration.java
@@ -34,7 +34,6 @@ import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.FileBasedConfiguration;
 import org.apache.commons.configuration2.HierarchicalConfiguration;
-import org.apache.commons.configuration2.ImmutableConfiguration;
 import org.apache.commons.configuration2.MapConfiguration;
 import org.apache.commons.configuration2.ex.ConfigurationException;
 import org.apache.commons.configuration2.tree.ImmutableNode;
@@ -323,13 +322,13 @@ public class PropertyListConfiguration extends BaseHierarchicalConfiguration
                             .getNodeHandler();
             printNode(out, indentLevel, handler.getRootNode(), handler);
         }
-        else if (value instanceof ImmutableConfiguration)
+        else if (value instanceof Configuration)
         {
             // display a flat Configuration as a dictionary
             out.println();
             out.println(padding + "{");
 
-            ImmutableConfiguration config = (ImmutableConfiguration) value;
+            Configuration config = (Configuration) value;
             Iterator<String> it = config.getKeys();
             while (it.hasNext())
             {
diff --git a/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java b/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java
index 929146de..7895a5de 100644
--- a/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration2/plist/XMLPropertyListConfiguration.java
@@ -45,7 +45,6 @@ import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
 import org.apache.commons.configuration2.Configuration;
 import org.apache.commons.configuration2.FileBasedConfiguration;
 import org.apache.commons.configuration2.HierarchicalConfiguration;
-import org.apache.commons.configuration2.ImmutableConfiguration;
 import org.apache.commons.configuration2.MapConfiguration;
 import org.apache.commons.configuration2.ex.ConfigurationException;
 import org.apache.commons.configuration2.ex.ConfigurationRuntimeException;
@@ -388,12 +387,12 @@ public class XMLPropertyListConfiguration extends BaseHierarchicalConfiguration
             printNode(out, indentLevel, config.getNodeModel().getNodeHandler()
                     .getRootNode());
         }
-        else if (value instanceof ImmutableConfiguration)
+        else if (value instanceof Configuration)
         {
             // display a flat Configuration as a dictionary
             out.println(padding + "<dict>");
 
-            ImmutableConfiguration config = (ImmutableConfiguration) value;
+            Configuration config = (Configuration) value;
             Iterator<String> it = config.getKeys();
             while (it.hasNext())
             {
