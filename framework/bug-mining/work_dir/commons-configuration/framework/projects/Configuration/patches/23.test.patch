diff --git a/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java b/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java
index 94e6a404..30e6400b 100644
--- a/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java
@@ -19,15 +19,14 @@ package org.apache.commons.configuration;
 
 import junit.framework.TestCase;
 
-import javax.naming.Context;
 import javax.naming.InitialContext;
-import javax.naming.NamingException;
-
-import org.apache.commons.configuration.event.ConfigurationErrorEvent;
-import org.apache.commons.configuration.event.ConfigurationErrorListener;
 
 /**
- * Test to see if the JNDIConfiguration works properly.
+ * Test to see if the JNDIConfiguration works properly.  Currently excluded
+ * in the project.xml unitTest section as our JNDI provider doesn't
+ * properly support the listBindings() method.
+ *
+ * This does work fine with Tomcat's JNDI provider however.
  *
  * @version $Id$
  */
@@ -39,33 +38,14 @@ public class TestJNDIConfiguration extends TestCase {
     private JNDIConfiguration conf;
     private NonStringTestHolder nonStringTestHolder;
 
-    /** A test error listener for counting internal errors.*/
-    private TestErrorListener listener;
-
     public void setUp() throws Exception {
 
         System.setProperty("java.naming.factory.initial", CONTEXT_FACTORY);
 
-        conf = new PotentialErrorJNDIConfiguration();
+        conf = new JNDIConfiguration();
 
         nonStringTestHolder = new NonStringTestHolder();
         nonStringTestHolder.setConfiguration(conf);
-
-        listener = new TestErrorListener();
-        conf.addErrorListener(listener);
-    }
-
-    /**
-     * Clears the test environment. If an error listener is defined, checks
-     * whether no error event was received.
-     */
-    protected void tearDown() throws Exception
-    {
-        if (listener != null)
-        {
-            listener.verify();
-        }
-        super.tearDown();
     }
 
     public void testBoolean() throws Exception {
@@ -182,153 +162,4 @@ public class TestJNDIConfiguration extends TestCase {
         assertEquals("'boolean' property", "true", conf.getString("boolean"));
     }
 
-    /**
-     * Configures the test config to throw an exception.
-     */
-    private PotentialErrorJNDIConfiguration setUpErrorConfig()
-    {
-        ((PotentialErrorJNDIConfiguration) conf).failOnGetCtx = true;
-        conf.removeErrorListener((ConfigurationErrorListener) conf
-                .getErrorListeners().iterator().next());
-        return (PotentialErrorJNDIConfiguration) conf;
-    }
-
-    /**
-     * Tests whether the expected error events have been received.
-     *
-     * @param type the expected event type
-     * @param propName the name of the property
-     * @param propValue the property value
-     */
-    private void checkErrorListener(int type, String propName, Object propValue)
-    {
-        listener.verify(type, propName, propValue);
-        listener = null;
-    }
-
-    /**
-     * Tests whether a JNDI configuration registers an error log listener.
-     */
-    public void testLogListener() throws NamingException
-    {
-        conf = new JNDIConfiguration();
-        assertEquals("No error log listener registered", 1, conf
-                .getErrorListeners().size());
-    }
-
-    /**
-     * Tests handling of errors in getKeys().
-     */
-    public void testGetKeysError()
-    {
-        assertFalse("Iteration not empty", setUpErrorConfig().getKeys()
-                .hasNext());
-        checkErrorListener(AbstractConfiguration.EVENT_READ_PROPERTY, null,
-                null);
-    }
-
-    /**
-     * Tests handling of errors in isEmpty().
-     */
-    public void testIsEmptyError() throws NamingException
-    {
-        assertTrue("Error config not empty", setUpErrorConfig().isEmpty());
-        checkErrorListener(AbstractConfiguration.EVENT_READ_PROPERTY, null,
-                null);
-    }
-
-    /**
-     * Tests handling of errors in the containsKey() method.
-     */
-    public void testContainsKeyError()
-    {
-        assertFalse("Key contained after error", setUpErrorConfig()
-                .containsKey("key"));
-        checkErrorListener(AbstractConfiguration.EVENT_READ_PROPERTY, "key",
-                null);
-    }
-
-    /**
-     * Tests handling of errors in getProperty().
-     */
-    public void testGetPropertyError()
-    {
-        assertNull("Wrong property value after error", setUpErrorConfig()
-                .getProperty("key"));
-        checkErrorListener(AbstractConfiguration.EVENT_READ_PROPERTY, "key",
-                null);
-    }
-
-    /**
-     * A special JNDI configuration implementation that can be configured to
-     * throw an exception when accessing the base context. Used for testing the
-     * exception handling.
-     */
-    static class PotentialErrorJNDIConfiguration extends JNDIConfiguration
-    {
-        /** A flag whether an exception should be thrown. */
-        boolean failOnGetCtx;
-
-        public PotentialErrorJNDIConfiguration() throws NamingException
-        {
-            super();
-        }
-
-        public Context getBaseContext() throws NamingException
-        {
-            if (failOnGetCtx)
-            {
-                throw new NamingException("Simulated JNDI exception!");
-            }
-            return super.getBaseContext();
-        }
-    }
-
-    /**
-     * A test listener implementation that is used for counting and testing
-     * internal errors.
-     */
-    static class TestErrorListener implements ConfigurationErrorListener
-    {
-        /** Stores the last received error event. */
-        ConfigurationErrorEvent event;
-
-        /** Stores the number of calls. */
-        int errorCount;
-
-        public void configurationError(ConfigurationErrorEvent event)
-        {
-            this.event = event;
-            errorCount++;
-        }
-
-        /**
-         * Checks whether no error event was received.
-         */
-        public void verify()
-        {
-            assertEquals("Error events received", 0, errorCount);
-        }
-
-        /**
-         * Checks whether an expected error event was received.
-         *
-         * @param type the type of the event
-         * @param propName the name of the property
-         * @param propValue the value of the property
-         */
-        public void verify(int type, String propName, Object propValue)
-        {
-            assertEquals("Wrong number of error events", 1, errorCount);
-            assertEquals("Wrong event type", type, event.getType());
-            assertTrue("Wrong property name", (propName == null) ? event
-                    .getPropertyName() == null : propName.equals(event
-                    .getPropertyName()));
-            assertTrue("Wrong property value", (propValue == null) ? event
-                    .getPropertyValue() == null : propValue.equals(event
-                    .getPropertyValue()));
-            assertTrue("Wrong exception class",
-                    event.getCause() instanceof NamingException);
-        }
-    }
 }
\ No newline at end of file
