diff --git a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
index 620b4803..9684f036 100644
--- a/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
+++ b/src/java/org/apache/commons/configuration/HierarchicalConfiguration.java
@@ -458,36 +458,13 @@ public class HierarchicalConfiguration extends AbstractConfiguration implements
      * <code>SubnodeConfiguration</code> class to obtain further information
      * about subnode configurations and when they should be used.
      * </p>
-     * <p>
-     * With the <code>supportUpdate</code> flag the behavior of the returned
-     * <code>SubnodeConfiguration</code> regarding updates of its parent
-     * configuration can be determined. A subnode configuration operates on the
-     * same nodes as its parent, so changes at one configuration are normally
-     * directly visible for the other configuration. There are however changes
-     * of the parent configuration, which are not recognized by the subnode
-     * configuration per default. An example for this is a reload operation (for
-     * file-based configurations): Here the complete node set of the parent
-     * configuration is replaced, but the subnode configuration still references
-     * the old nodes. If such changes should be detected by the subnode
-     * configuration, the <code>supportUpdates</code> flag must be set to
-     * <b>true</b>. This causes the subnode configuration to reevaluate the key
-     * used for its creation each time it is accessed. This guarantees that the
-     * subnode configuration always stays in sync with its key, even if the
-     * parent configuration's data significantly changes. If such a change
-     * makes the key invalid - because it now no longer points to exactly one
-     * node -, the subnode configuration is not reconstructed, but keeps its
-     * old data. It is then quasi detached from its parent.
-     * </p>
      *
      * @param key the key that selects the sub tree
-     * @param supportUpdates a flag whether the returned subnode configuration
-     * should be able to handle updates of its parent
      * @return a hierarchical configuration that contains this sub tree
      * @see SubnodeConfiguration
-     * @since 1.5
+     * @since 1.3
      */
-    public SubnodeConfiguration configurationAt(String key,
-            boolean supportUpdates)
+    public SubnodeConfiguration configurationAt(String key)
     {
         List nodes = fetchNodeList(key);
         if (nodes.size() != 1)
@@ -495,24 +472,7 @@ public class HierarchicalConfiguration extends AbstractConfiguration implements
             throw new IllegalArgumentException(
                     "Passed in key must select exactly one node: " + key);
         }
-        return supportUpdates ? createSubnodeConfiguration(
-                (ConfigurationNode) nodes.get(0), key)
-                : createSubnodeConfiguration((ConfigurationNode) nodes.get(0));
-    }
-
-    /**
-     * Returns a hierarchical subnode configuration for the node specified by
-     * the given key. This is a short form for <code>configurationAt(key,
-     * <b>false</b>)</code>.
-     *
-     * @param key the key that selects the sub tree
-     * @return a hierarchical configuration that contains this sub tree
-     * @see SubnodeConfiguration
-     * @since 1.3
-     */
-    public SubnodeConfiguration configurationAt(String key)
-    {
-        return configurationAt(key, false);
+        return createSubnodeConfiguration((ConfigurationNode) nodes.get(0));
     }
 
     /**
@@ -567,24 +527,6 @@ public class HierarchicalConfiguration extends AbstractConfiguration implements
         return new SubnodeConfiguration(this, node);
     }
 
-    /**
-     * Creates a new subnode configuration for the specified node and sets its
-     * construction key. A subnode configuration created this way will be aware
-     * of structural changes of its parent.
-     *
-     * @param node the node, for which a subnode configuration is to be created
-     * @param subnodeKey the key used to construct the configuration
-     * @return the configuration for the given node
-     * @since 1.5
-     */
-    protected SubnodeConfiguration createSubnodeConfiguration(
-            ConfigurationNode node, String subnodeKey)
-    {
-        SubnodeConfiguration result = createSubnodeConfiguration(node);
-        result.setSubnodeKey(subnodeKey);
-        return result;
-    }
-
     /**
      * Checks if the specified key is contained in this configuration. Note that
      * for this configuration the term &quot;contained&quot; means that the key
diff --git a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
index 7c25cab8..5aebcd4b 100644
--- a/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
+++ b/src/java/org/apache/commons/configuration/SubnodeConfiguration.java
@@ -16,11 +16,6 @@
  */
 package org.apache.commons.configuration;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-
 import org.apache.commons.configuration.tree.ConfigurationNode;
 
 /**
@@ -48,48 +43,6 @@ import org.apache.commons.configuration.tree.ConfigurationNode;
  * configuration's root node is involved.
  * </p>
  * <p>
- * There are however changes at the parent configuration, which cause the
- * subnode configuration to become detached. An example for such a change is a
- * reload operation of a file-based configuration, which replaces all nodes of
- * the parent configuration. The subnode configuration per default still
- * references the old nodes. Another example are list structures: a subnode
- * configuration can be created to point on the <em>i</em>th element of the
- * list. Now list elements can be added or removed, so that the list elements'
- * indices change. In such a scenario the subnode configuration would always
- * point to the same list element, regardless of its current index.
- * </p>
- * <p>
- * To solve these problems and make a subnode configuration aware of
- * such structural changes of its parent, it is possible to associate a
- * subnode configuration with a configuration key. This can be done by calling
- * the <code>setSubnodeKey()</code> method. If here a key is set, the subnode
- * configuration will evaluate it on each access, thus ensuring that it is
- * always in sync with its parent. In this mode the subnode configuration really
- * behaves like a live-view on its parent. The price for this is a decreased
- * performance because now an additional evaluation has to be performed on each
- * property access. So this mode should only be used if necessary; if for
- * instance a subnode configuration is only used for a temporary convenient
- * access to a complex configuration, there is no need to make it aware for
- * structural changes of its parent. If a subnode configuration is created
- * using the <code>{@link HierarchicalConfiguration#configurationAt(String, boolean)
- * configurationAt()}</code> method of <code>HierarchicalConfiguration</code>
- * (which should be the preferred way), with an additional boolean parameter it
- * can be specified whether the resulting subnode configuration should be
- * aware of structural changes or not. Then the configuration key will be
- * automatically set.
- * </p>
- * <p>
- * <em>Note:</em> At the moment support for creating a subnode configuration
- * that is aware of structural changes of its parent from another subnode
- * configuration (a "sub subnode configuration") is limited. This only works if
- * <ol><li>the subnode configuration that serves as the parent for the new
- * subnode configuration is itself associated with a configuration key and</li>
- * <li>the key passed in to create the new subnode configuration is not too
- * complex (if configuration keys are used that contain indices, a corresponding
- * key that is valid from the parent configuration's point of view cannot be
- * constructed).</li></ol>
- * </p>
- * <p>
  * When a subnode configuration is created, it inherits the settings of its
  * parent configuration, e.g. some flags like the
  * <code>throwExceptionOnMissing</code> flag or the settings for handling list
@@ -123,9 +76,6 @@ public class SubnodeConfiguration extends HierarchicalConfiguration
     /** Stores the parent configuration. */
     private HierarchicalConfiguration parent;
 
-    /** Stores the key that was used to construct this configuration.*/
-    private String subnodeKey;
-
     /**
      * Creates a new instance of <code>SubnodeConfiguration</code> and
      * initializes it with the parent configuration and the new root node.
@@ -160,80 +110,6 @@ public class SubnodeConfiguration extends HierarchicalConfiguration
         return parent;
     }
 
-    /**
-     * Returns the key that was used to construct this configuration. If here a
-     * non-<b>null</b> value is returned, the subnode configuration will
-     * always check its parent for structural changes and reconstruct itself if
-     * necessary.
-     *
-     * @return the key for selecting this configuration's root node
-     * @since 1.5
-     */
-    public String getSubnodeKey()
-    {
-        return subnodeKey;
-    }
-
-    /**
-     * Sets the key to the root node of this subnode configuration. If here a
-     * key is set, the subnode configuration will behave like a live-view on its
-     * parent for this key. See the class comment for more details.
-     *
-     * @param subnodeKey the key used to construct this configuration
-     * @since 1.5
-     */
-    public void setSubnodeKey(String subnodeKey)
-    {
-        this.subnodeKey = subnodeKey;
-    }
-
-    /**
-     * Returns the root node for this configuration. If a subnode key is set,
-     * this implementation re-evaluates this key to find out if this subnode
-     * configuration needs to be reconstructed. This ensures that the subnode
-     * configuration is always synchronized with its parent configuration.
-     *
-     * @return the root node of this configuration
-     * @since 1.5
-     * @see #setSubnodeKey(String)
-     */
-    public ConfigurationNode getRootNode()
-    {
-        if (getSubnodeKey() != null)
-        {
-            try
-            {
-                List nodes = getParent().fetchNodeList(getSubnodeKey());
-                if (nodes.size() != 1)
-                {
-                    // key is invalid, so detach this subnode configuration
-                    setSubnodeKey(null);
-                }
-                else
-                {
-                    ConfigurationNode currentRoot = (ConfigurationNode) nodes
-                            .get(0);
-                    if (currentRoot != super.getRootNode())
-                    {
-                        // the root node was changed due to a change of the
-                        // parent
-                        setRootNode(currentRoot);
-                    }
-                    return currentRoot;
-                }
-            }
-            catch (Exception ex)
-            {
-                // Evaluation of the key caused an exception. Probably the
-                // expression engine has changed on the parent. Detach this
-                // configuration, there is not much we can do about this.
-                setSubnodeKey(null);
-            }
-        }
-
-        return super.getRootNode(); // use stored root node
-    }
-
     /**
      * Returns a hierarchical configuration object for the given sub node.
      * This implementation will ensure that the returned
@@ -248,53 +124,6 @@ public class SubnodeConfiguration extends HierarchicalConfiguration
         return new SubnodeConfiguration(getParent(), node);
     }
 
-    /**
-     * Returns a hierarchical configuration object for the given sub node that
-     * is aware of structural changes of its parent. Works like the method with
-     * the same name, but also sets the subnode key for the new subnode
-     * configuration, so it can check whether the parent has been changed. This
-     * only works if this subnode configuration has itself a valid subnode key.
-     * So if a subnode configuration that should be aware of structural changes
-     * is created from an already existing subnode configuration, this subnode
-     * configuration must also be aware of such changes.
-     *
-     * @param node the sub node, for which the configuration is to be created
-     * @param subnodeKey the construction key
-     * @return a hierarchical configuration for this sub node
-     * @since 1.5
-     */
-    protected SubnodeConfiguration createSubnodeConfiguration(
-            ConfigurationNode node, String subnodeKey)
-    {
-        SubnodeConfiguration result = createSubnodeConfiguration(node);
-
-        if (getSubnodeKey() != null)
-        {
-            // construct the correct subnode key
-            // determine path to root node
-            List lstPathToRoot = new ArrayList();
-            ConfigurationNode top = super.getRootNode();
-            ConfigurationNode nd = node;
-            while (nd != top)
-            {
-                lstPathToRoot.add(nd);
-                nd = nd.getParentNode();
-            }
-
-            // construct the keys for the nodes on this path
-            Collections.reverse(lstPathToRoot);
-            String key = getSubnodeKey();
-            for (Iterator it = lstPathToRoot.iterator(); it.hasNext();)
-            {
-                key = getParent().getExpressionEngine().nodeKey(
-                        (ConfigurationNode) it.next(), key);
-            }
-            result.setSubnodeKey(key);
-        }
-
-        return result;
-    }
-
     /**
      * Creates a new node. This task is delegated to the parent.
      *
