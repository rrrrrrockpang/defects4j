diff --git a/src/test/org/apache/commons/configuration/MockInitialContextFactory.java b/src/test/org/apache/commons/configuration/MockInitialContextFactory.java
index 4102f907..f231cdda 100644
--- a/src/test/org/apache/commons/configuration/MockInitialContextFactory.java
+++ b/src/test/org/apache/commons/configuration/MockInitialContextFactory.java
@@ -39,21 +39,12 @@ import com.mockobjects.dynamic.Mock;
  */
 public class MockInitialContextFactory implements InitialContextFactory
 {
-    /**
-     * Constant for the use cycles environment property. If this property is
-     * present in the environment, a cyclic context will be created.
-     */
-    public static final String PROP_CYCLES = "useCycles";
-
     /** Constant for the lookup method. */
     private static final String METHOD_LOOKUP = "lookup";
 
     /** Constant for the list method. */
     private static final String METHOD_LIST = "list";
 
-    /** Constant for the close method.*/
-    private static final String METHOD_CLOSE = "close";
-
     /** Constant for the name of the missing property. */
     private static final String MISSING_PROP = "/missing";
 
@@ -84,10 +75,7 @@ public class MockInitialContextFactory implements InitialContextFactory
      */
     public Context getInitialContext(Hashtable env) throws NamingException
     {
-        boolean useCycles = env.containsKey(PROP_CYCLES);
-
         Mock mockTopCtx = createCtxMock(PREFIX);
-        Mock mockCycleCtx = createCtxMock("");
         Mock mockPrfxCtx = createCtxMock("");
         Mock mockBaseCtx = new Mock(Context.class);
         mockBaseCtx.matchAndReturn(METHOD_LOOKUP, C.eq(""), mockTopCtx.proxy());
@@ -95,33 +83,12 @@ public class MockInitialContextFactory implements InitialContextFactory
                 .proxy());
         mockTopCtx.matchAndReturn(METHOD_LOOKUP, C.eq("test"), mockPrfxCtx
                 .proxy());
+        mockTopCtx.matchAndReturn(METHOD_LIST, C.eq(""), createEnumMock(
+                mockTopCtx, new String[]
+                { "test" }, new Object[]
+                { mockPrfxCtx.proxy() }).proxy());
         mockPrfxCtx.matchAndReturn(METHOD_LIST, C.eq(""), createEnumMock(
                 mockPrfxCtx, PROP_NAMES, PROP_VALUES).proxy());
-
-        if (useCycles)
-        {
-            mockTopCtx.matchAndReturn(METHOD_LOOKUP, C.eq("cycle"),
-                    mockCycleCtx.proxy());
-            mockTopCtx.matchAndReturn(METHOD_LIST, C.eq(""), createEnumMock(
-                    mockTopCtx, new String[]
-                    { "test", "cycle" }, new Object[]
-                    { mockPrfxCtx.proxy(), mockCycleCtx.proxy() }).proxy());
-            Mock mockEnum = createEnumMock(mockCycleCtx, PROP_NAMES,
-                    PROP_VALUES, false);
-            addEnumPair(mockEnum, "cycleCtx", mockCycleCtx.proxy());
-            closeEnum(mockEnum);
-            mockCycleCtx
-                    .matchAndReturn(METHOD_LIST, C.eq(""), mockEnum.proxy());
-            mockCycleCtx.matchAndReturn(METHOD_LOOKUP, C.eq("cycleCtx"),
-                    mockCycleCtx.proxy());
-        }
-        else
-        {
-            mockTopCtx.matchAndReturn(METHOD_LIST, C.eq(""), createEnumMock(
-                    mockTopCtx, new String[]
-                    { "test" }, new Object[]
-                    { mockPrfxCtx.proxy() }).proxy());
-        }
         return (Context) mockBaseCtx.proxy();
     }
 
@@ -145,8 +112,6 @@ public class MockInitialContextFactory implements InitialContextFactory
         {
             bindError(mockCtx, MISSING_NAMES[i]);
         }
-        mockCtx.matchAndReturn("hashCode", System.identityHashCode(mockCtx.proxy()));
-        
         return mockCtx;
     }
 
@@ -181,61 +146,20 @@ public class MockInitialContextFactory implements InitialContextFactory
      * @param mockCtx the mock representing the context
      * @param names the names contained in the iteration
      * @param values the corresponding values
-     * @param close a flag whether the enumeration should expect to be closed
      * @return the mock for the enumeration
      */
-    private Mock createEnumMock(Mock mockCtx, String[] names, Object[] values,
-            boolean close)
+    private Mock createEnumMock(Mock mockCtx, String[] names, Object[] values)
     {
         Mock mockEnum = new Mock(NamingEnumeration.class);
         for (int i = 0; i < names.length; i++)
         {
-            addEnumPair(mockEnum, names[i], values[i]);
-        }
-        if (close)
-        {
-            closeEnum(mockEnum);
+            NameClassPair ncp = new NameClassPair(names[i], values[i]
+                    .getClass().getName());
+            mockEnum.expectAndReturn("hasMore", true);
+            mockEnum.expectAndReturn("next", ncp);
         }
-        return mockEnum;
-    }
-
-    /**
-     * Creates and initializes a mock for a naming enumeration that expects to
-     * be closed. This is a shortcut of createEnumMock(mockCtx, names, values,
-     * true);
-     *
-     * @param mockCtx the mock representing the context
-     * @param names the names contained in the iteration
-     * @param values the corresponding values
-     * @return the mock for the enumeration
-     */
-    private Mock createEnumMock(Mock mockCtx, String[] names, Object[] values)
-    {
-        return createEnumMock(mockCtx, names, values, true);
-    }
-
-    /**
-     * Adds a new name-and-value pair to an enum mock.
-     *
-     * @param mockEnum the enum mock
-     * @param name the name
-     * @param value the value
-     */
-    private void addEnumPair(Mock mockEnum, String name, Object value)
-    {
-        NameClassPair ncp = new NameClassPair(name, value.getClass().getName());
-        mockEnum.expectAndReturn("hasMore", true);
-        mockEnum.expectAndReturn("next", ncp);
-    }
-
-    /**
-     * Closes an enumeration mock.
-     *
-     * @param mockEnum the mock
-     */
-    private void closeEnum(Mock mockEnum)
-    {
         mockEnum.expectAndReturn("hasMore", false);
-        mockEnum.expect(METHOD_CLOSE);
+        mockEnum.expect("close");
+        return mockEnum;
     }
 }
diff --git a/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java b/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java
index 8f46446f..3a00902b 100644
--- a/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestJNDIConfiguration.java
@@ -17,8 +17,6 @@
 
 package org.apache.commons.configuration;
 
-import java.util.Hashtable;
-
 import junit.framework.TestCase;
 
 import javax.naming.Context;
@@ -260,18 +258,6 @@ public class TestJNDIConfiguration extends TestCase {
                 null);
     }
 
-    /**
-     * Tests the getKeys() method when there are cycles in the tree.
-     */
-    public void testGetKeysWithCycles() throws NamingException
-    {
-        Hashtable env = new Hashtable();
-        env.put(MockInitialContextFactory.PROP_CYCLES, Boolean.TRUE);
-        InitialContext initCtx = new InitialContext(env);
-        conf = new JNDIConfiguration(initCtx);
-        conf.getKeys("cycle");
-    }
-
     /**
      * A special JNDI configuration implementation that can be configured to
      * throw an exception when accessing the base context. Used for testing the
@@ -287,11 +273,6 @@ public class TestJNDIConfiguration extends TestCase {
             super();
         }
 
-        public PotentialErrorJNDIConfiguration(Context ctx) throws NamingException
-        {
-            super(ctx);
-        }
-
         public Context getBaseContext() throws NamingException
         {
             if (failOnGetCtx)
