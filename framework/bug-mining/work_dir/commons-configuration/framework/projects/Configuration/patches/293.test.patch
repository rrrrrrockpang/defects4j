diff --git a/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java b/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java
index 7874d714..7e091284 100644
--- a/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java
+++ b/src/test/java/org/apache/commons/configuration2/TestPropertiesConfigurationLayout.java
@@ -128,7 +128,7 @@ public class TestPropertiesConfigurationLayout
      * Tests whether blank lines before a property are correctly detected.
      */
     @Test
-    public void testBlankLines() throws ConfigurationException
+    public void testBlancLines() throws ConfigurationException
     {
         builder.addProperty("prop", "value");
         builder.addComment(null);
@@ -144,25 +144,6 @@ public class TestPropertiesConfigurationLayout
                 .getString(TEST_KEY));
     }
 
-    /**
-     * Tests whether blank lines before a property are correctly detected if a header comment is present
-     */
-    @Test
-    public void testBlankLinesWithHeaderComment() throws ConfigurationException
-    {
-        builder.addComment(TEST_COMMENT);
-        builder.addComment(null);
-        builder.addComment(null);
-        builder.addComment(TEST_COMMENT);
-        builder.addProperty(TEST_KEY, TEST_VALUE);
-        layout.load(config, builder.getReader());
-        assertEquals("Wrong number of blank lines", 2, layout.getBlankLinesBefore(TEST_KEY));
-        assertEquals("Wrong comment", TEST_COMMENT, layout
-                .getCanonicalComment(TEST_KEY, false));
-        assertEquals("Wrong property value", TEST_VALUE, config
-                .getString(TEST_KEY));
-    }
-
     /**
      * Tests the single line flag for a simple property definition.
      */
@@ -229,7 +210,7 @@ public class TestPropertiesConfigurationLayout
      * Tests if a header comment containing blank lines is correctly detected.
      */
     @Test
-    public void testHeaderCommentWithBlanks() throws ConfigurationException
+    public void testHeaderCommentWithBlancs() throws ConfigurationException
     {
         builder.addComment(TEST_COMMENT);
         builder.addComment(null);
@@ -247,7 +228,7 @@ public class TestPropertiesConfigurationLayout
      * comment in the case that the header comment is already set
      */
     @Test
-    public void testHeaderCommentWithBlanksAndPresetHeaderComment() throws ConfigurationException
+    public void testHeaderCommentWithBlancsAndPresetHeaderComment() throws ConfigurationException
     {
         final String presetHeaderComment = "preset" + TEST_COMMENT + CRNORM + CRNORM + TEST_COMMENT;
         builder.addComment(TEST_COMMENT);
@@ -267,7 +248,7 @@ public class TestPropertiesConfigurationLayout
      * lines and the first property has a comment, too.
      */
     @Test
-    public void testHeaderCommentWithBlanksAndPropComment()
+    public void testHeaderCommentWithBlancsAndPropComment()
             throws ConfigurationException
     {
         builder.addComment(TEST_COMMENT);
@@ -450,7 +431,6 @@ public class TestPropertiesConfigurationLayout
         builder.addComment("This is my test properties file,");
         builder.addComment("which contains a header comment.");
         builder.addComment(null);
-        builder.addComment(null);
         builder.addComment(TEST_COMMENT);
         builder.addProperty(TEST_KEY, TEST_COMMENT);
         builder.addComment(null);
@@ -669,7 +649,7 @@ public class TestPropertiesConfigurationLayout
         layout.setComment(TEST_KEY, TEST_COMMENT);
         layout.setHeaderComment("Header comment");
         layout.setLineSeparator(lf);
-        checkLayoutString("# Header comment" + lf + lf + lf + "# "
+        checkLayoutString("# Header comment" + lf + lf + lf + lf + "# "
                 + TEST_COMMENT + lf + TEST_KEY + " = " + TEST_VALUE + lf);
     }
 
