diff --git a/src/java/org/apache/commons/configuration/MapConfiguration.java b/src/java/org/apache/commons/configuration/MapConfiguration.java
index 056e8b8d..888ede1f 100644
--- a/src/java/org/apache/commons/configuration/MapConfiguration.java
+++ b/src/java/org/apache/commons/configuration/MapConfiguration.java
@@ -62,7 +62,7 @@ public class MapConfiguration extends AbstractConfiguration implements Cloneable
         if ((value instanceof String) && (!isDelimiterParsingDisabled()))
         {
             List list = PropertyConverter.split((String) value, getListDelimiter());
-            return list.size() > 1 ? list : list.get(0);
+            return list.size() > 1 ? list : value;
         }
         else
         {
diff --git a/src/java/org/apache/commons/configuration/web/AppletConfiguration.java b/src/java/org/apache/commons/configuration/web/AppletConfiguration.java
index 0b2b4021..e6857be8 100644
--- a/src/java/org/apache/commons/configuration/web/AppletConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/AppletConfiguration.java
@@ -19,8 +19,10 @@ package org.apache.commons.configuration.web;
 
 import java.applet.Applet;
 import java.util.Iterator;
+import java.util.List;
 
 import org.apache.commons.collections.iterators.ArrayIterator;
+import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper to read applet parameters. This configuration is
@@ -49,7 +51,14 @@ public class AppletConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        return handleDelimiters(applet.getParameter(key));
+        Object value = applet.getParameter(key);
+        if (!isDelimiterParsingDisabled())
+        {
+            List list = PropertyConverter.split((String) value, getListDelimiter());
+            value = list.size() > 1 ? list : value;
+        }
+
+        return value;
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java b/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java
index 6d7c2791..f0c6db8d 100644
--- a/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/BaseWebConfiguration.java
@@ -16,10 +16,7 @@
  */
 package org.apache.commons.configuration.web;
 
-import java.util.List;
-
 import org.apache.commons.configuration.AbstractConfiguration;
-import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * <p>
@@ -86,24 +83,4 @@ abstract class BaseWebConfiguration extends AbstractConfiguration
     {
         throw new UnsupportedOperationException("Read only configuration");
     }
-
-    /**
-     * Takes care of list delimiters in property values. This method checks if
-     * delimiter parsing is enabled and the passed in value contains a delimiter
-     * character. If this is the case, a split operation is performed.
-     *
-     * @param value the property value to be examined
-     * @return the processed value
-     */
-    protected Object handleDelimiters(Object value)
-    {
-        if (!isDelimiterParsingDisabled() && value instanceof String)
-        {
-            List list = PropertyConverter.split((String) value,
-                    getListDelimiter());
-            value = list.size() > 1 ? list : list.get(0);
-        }
-
-        return value;
-    }
 }
diff --git a/src/java/org/apache/commons/configuration/web/ServletConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletConfiguration.java
index 7318a0b3..2e7d8757 100644
--- a/src/java/org/apache/commons/configuration/web/ServletConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletConfiguration.java
@@ -18,10 +18,12 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Iterator;
+import java.util.List;
 import javax.servlet.Servlet;
 import javax.servlet.ServletConfig;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
+import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper around a {@link ServletConfig}. This configuration
@@ -60,7 +62,14 @@ public class ServletConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        return handleDelimiters(config.getInitParameter(key));
+        Object value = config.getInitParameter(key);
+        if (!isDelimiterParsingDisabled())
+        {
+            List list = PropertyConverter.split((String) value, getListDelimiter());
+            value = list.size() > 1 ? list : value;
+        }
+
+        return value;
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java
index 44224564..4cf25864 100644
--- a/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletContextConfiguration.java
@@ -18,10 +18,12 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Iterator;
+import java.util.List;
 import javax.servlet.Servlet;
 import javax.servlet.ServletContext;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
+import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper to read the initialization parameters of a servlet
@@ -61,7 +63,14 @@ public class ServletContextConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        return handleDelimiters(context.getInitParameter(key));
+        Object value = context.getInitParameter(key);
+        if (!isDelimiterParsingDisabled())
+        {
+            List list = PropertyConverter.split((String) value, getListDelimiter());
+            value = list.size() > 1 ? list : value;
+        }
+
+        return value;
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java
index 0acbffcb..95ea8660 100644
--- a/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletFilterConfiguration.java
@@ -18,9 +18,11 @@
 package org.apache.commons.configuration.web;
 
 import java.util.Iterator;
+import java.util.List;
 import javax.servlet.FilterConfig;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
+import org.apache.commons.configuration.PropertyConverter;
 
 /**
  * A configuration wrapper around a {@link FilterConfig}. This configuration is
@@ -48,7 +50,14 @@ public class ServletFilterConfiguration extends BaseWebConfiguration
 
     public Object getProperty(String key)
     {
-        return handleDelimiters(config.getInitParameter(key));
+        Object value = config.getInitParameter(key);
+        if (!isDelimiterParsingDisabled())
+        {
+            List list = PropertyConverter.split((String) value, getListDelimiter());
+            value = list.size() > 1 ? list : value;
+        }
+
+        return value;
     }
 
     public Iterator getKeys()
diff --git a/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java b/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java
index 49d581e8..251b3f58 100644
--- a/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java
+++ b/src/java/org/apache/commons/configuration/web/ServletRequestConfiguration.java
@@ -17,11 +17,8 @@
 
 package org.apache.commons.configuration.web;
 
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.Iterator;
-import java.util.List;
-
+import java.util.Arrays;
 import javax.servlet.ServletRequest;
 
 import org.apache.commons.collections.iterators.EnumerationIterator;
@@ -60,25 +57,11 @@ public class ServletRequestConfiguration extends BaseWebConfiguration
         }
         else if (values.length == 1)
         {
-            return handleDelimiters(values[0]);
+            return values[0];
         }
         else
         {
-            // ensure that escape characters in all list elements are removed
-            List result = new ArrayList(values.length);
-            for (int i = 0; i < values.length; i++)
-            {
-                Object val = handleDelimiters(values[i]);
-                if (val instanceof Collection)
-                {
-                    result.addAll((Collection) val);
-                }
-                else
-                {
-                    result.add(val);
-                }
-            }
-            return result;
+            return Arrays.asList(values);
         }
     }
 
