diff --git a/src/test/org/apache/commons/configuration/DatabaseConfigurationTestHelper.java b/src/test/org/apache/commons/configuration/DatabaseConfigurationTestHelper.java
deleted file mode 100644
index 77a6cfe8..00000000
--- a/src/test/org/apache/commons/configuration/DatabaseConfigurationTestHelper.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.configuration;
-
-import java.io.FileInputStream;
-
-import javax.sql.DataSource;
-
-import org.apache.commons.configuration.test.HsqlDB;
-import org.apache.commons.dbcp.BasicDataSource;
-import org.dbunit.database.DatabaseConnection;
-import org.dbunit.database.IDatabaseConnection;
-import org.dbunit.dataset.IDataSet;
-import org.dbunit.dataset.xml.XmlDataSet;
-import org.dbunit.operation.DatabaseOperation;
-
-/**
- * A helper class for performing tests for {@link DatabaseConfiguration}. This
- * class maintains an in-process database that stores configuration data and can
- * be accessed from a {@link DatabaseConfiguration} instance. Constants for
- * table and column names and database connection settings are provided, too.
- *
- * @version $Id$
- */
-public class DatabaseConfigurationTestHelper
-{
-    /** Constant for the JDBC driver class. */
-    public final String DATABASE_DRIVER = "org.hsqldb.jdbcDriver";
-
-    /** Constant for the connection URL. */
-    public final String DATABASE_URL = "jdbc:hsqldb:mem:testdb";
-
-    /** Constant for the DB user name. */
-    public final String DATABASE_USERNAME = "sa";
-
-    /** Constant for the DB password. */
-    public final String DATABASE_PASSWORD = "";
-
-    /** Constant for the configuration table. */
-    public static final String TABLE = "configuration";
-
-    /** Constant for the multi configuration table. */
-    public static final String TABLE_MULTI = "configurations";
-
-    /** Constant for the column with the keys. */
-    public static final String COL_KEY = "key";
-
-    /** Constant for the column with the values. */
-    public static final String COL_VALUE = "value";
-
-    /** Constant for the column with the configuration name. */
-    public static final String COL_NAME = "name";
-
-    /** Constant for the name of the test configuration. */
-    public static final String CONFIG_NAME = "test";
-
-    /** Stores the in-process database. */
-    private static HsqlDB hsqlDB = null;
-
-    /** The data source. */
-    private DataSource datasource;
-
-    /**
-     * Initializes this helper object. This method can be called from a
-     * <code>setUp()</code> method of a unit test class. It creates the database
-     * instance if necessary and populates it with test data.
-     *
-     * @throws Exception if an error occurs
-     */
-    public void setUp() throws Exception
-    {
-        if (hsqlDB == null)
-        {
-            hsqlDB = new HsqlDB(DATABASE_URL, DATABASE_DRIVER,
-                    "conf/testdb.script");
-        }
-
-        BasicDataSource datasource = new BasicDataSource();
-        datasource.setDriverClassName(DATABASE_DRIVER);
-        datasource.setUrl(DATABASE_URL);
-        datasource.setUsername(DATABASE_USERNAME);
-        datasource.setPassword(DATABASE_PASSWORD);
-
-        this.datasource = datasource;
-
-        // prepare the database
-        IDatabaseConnection connection = new DatabaseConnection(datasource
-                .getConnection());
-        IDataSet dataSet = new XmlDataSet(new FileInputStream(
-                "conf/dataset.xml"));
-
-        try
-        {
-            DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);
-        }
-        finally
-        {
-            connection.close();
-        }
-    }
-
-    /**
-     * Frees the resources used by this helper class. This method can be called
-     * by a <code>tearDown()</code> method of a unit test class.
-     *
-     * @throws Exception if an error occurs
-     */
-    public void tearDown() throws Exception
-    {
-        datasource.getConnection().commit();
-        datasource.getConnection().close();
-    }
-
-    /**
-     * Creates a database configuration with default values.
-     *
-     * @return the configuration
-     */
-    public DatabaseConfiguration setUpConfig()
-    {
-        return new DatabaseConfiguration(datasource, TABLE, COL_KEY, COL_VALUE);
-    }
-
-    /**
-     * Creates a database configuration that supports multiple configurations in
-     * a table with default values.
-     *
-     * @return the configuration
-     */
-    public DatabaseConfiguration setUpMultiConfig()
-    {
-        return new DatabaseConfiguration(datasource, TABLE_MULTI, COL_NAME,
-                COL_KEY, COL_VALUE, CONFIG_NAME);
-    }
-
-    /**
-     * Returns the <code>DataSource</code> managed by this class.
-     *
-     * @return the <code>DataSource</code>
-     */
-    public DataSource getDatasource()
-    {
-        return datasource;
-    }
-}
diff --git a/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java b/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java
index 41307862..7d596414 100644
--- a/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestDatabaseConfiguration.java
@@ -17,6 +17,7 @@
 
 package org.apache.commons.configuration;
 
+import java.io.FileInputStream;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.Iterator;
@@ -27,6 +28,13 @@ import javax.sql.DataSource;
 import junit.framework.TestCase;
 
 import org.apache.commons.configuration.event.ConfigurationErrorListener;
+import org.apache.commons.configuration.test.HsqlDB;
+import org.apache.commons.dbcp.BasicDataSource;
+import org.dbunit.database.DatabaseConnection;
+import org.dbunit.database.IDatabaseConnection;
+import org.dbunit.dataset.IDataSet;
+import org.dbunit.dataset.xml.XmlDataSet;
+import org.dbunit.operation.DatabaseOperation;
 
 /**
  * Test for database stored configurations.  Note, when running this Unit
@@ -37,12 +45,36 @@ import org.apache.commons.configuration.event.ConfigurationErrorListener;
  */
 public class TestDatabaseConfiguration extends TestCase
 {
+    public final String DATABASE_DRIVER = "org.hsqldb.jdbcDriver";
+    public final String DATABASE_URL = "jdbc:hsqldb:target/test-classes/testdb";
+    public final String DATABASE_USERNAME = "sa";
+    public final String DATABASE_PASSWORD = "";
+
+    /** Constant for the configuration table.*/
+    private static final String TABLE = "configuration";
+
+    /** Constant for the multi configuration table.*/
+    private static final String TABLE_MULTI = "configurations";
+
+    /** Constant for the column with the keys.*/
+    private static final String COL_KEY = "key";
+
+    /** Constant for the column with the values.*/
+    private static final String COL_VALUE = "value";
+
+    /** Constant for the column with the configuration name.*/
+    private static final String COL_NAME = "name";
+
+    /** Constant for the name of the test configuration.*/
+    private static final String CONFIG_NAME = "test";
+
+    private static HsqlDB hsqlDB = null;
+
+    private DataSource datasource;
+
     /** An error listener for testing whether internal errors occurred.*/
     private ConfigurationErrorListenerImpl listener;
 
-    /** The test helper. */
-    private DatabaseConfigurationTestHelper helper;
-
     protected void setUp() throws Exception
     {
         /*
@@ -53,19 +85,43 @@ public class TestDatabaseConfiguration extends TestCase
 
         // set up the datasource
 
-        helper = new DatabaseConfigurationTestHelper();
-        helper.setUp();
+        if (hsqlDB == null)
+        {
+            hsqlDB = new HsqlDB(DATABASE_URL, DATABASE_DRIVER, "conf/testdb.script");
+        }
+
+        BasicDataSource datasource = new BasicDataSource();
+        datasource.setDriverClassName(DATABASE_DRIVER);
+        datasource.setUrl(DATABASE_URL);
+        datasource.setUsername(DATABASE_USERNAME);
+        datasource.setPassword(DATABASE_PASSWORD);
+
+        this.datasource = datasource;
+
+
+        // prepare the database
+        IDatabaseConnection connection = new DatabaseConnection(datasource.getConnection());
+        IDataSet dataSet = new XmlDataSet(new FileInputStream("conf/dataset.xml"));
+
+        try
+        {
+            DatabaseOperation.CLEAN_INSERT.execute(connection, dataSet);
+        }
+        finally
+        {
+            connection.close();
+        }
     }
 
-    protected void tearDown() throws Exception
-    {
+    protected void tearDown() throws Exception{
+        datasource.getConnection().commit();
+        datasource.getConnection().close();
+
         // if an error listener is defined, we check whether an error occurred
         if(listener != null)
         {
             assertEquals("An internal error occurred", 0, listener.getErrorCount());
         }
-        helper.tearDown();
-
         super.tearDown();
     }
 
@@ -76,10 +132,7 @@ public class TestDatabaseConfiguration extends TestCase
      */
     private PotentialErrorDatabaseConfiguration setUpConfig()
     {
-        return new PotentialErrorDatabaseConfiguration(helper.getDatasource(),
-                DatabaseConfigurationTestHelper.TABLE,
-                DatabaseConfigurationTestHelper.COL_KEY,
-                DatabaseConfigurationTestHelper.COL_VALUE);
+        return new PotentialErrorDatabaseConfiguration(datasource, TABLE, COL_KEY, COL_VALUE);
     }
 
     /**
@@ -90,7 +143,7 @@ public class TestDatabaseConfiguration extends TestCase
      */
     private DatabaseConfiguration setUpMultiConfig()
     {
-        return helper.setUpMultiConfig();
+        return new DatabaseConfiguration(datasource, TABLE_MULTI, COL_NAME, COL_KEY, COL_VALUE, CONFIG_NAME);
     }
 
     /**
@@ -256,20 +309,20 @@ public class TestDatabaseConfiguration extends TestCase
         Configuration config1 = setUpMultiConfig();
         assertFalse("The configuration named 'test' is empty", config1.isEmpty());
 
-        Configuration config2 = new DatabaseConfiguration(helper.getDatasource(), DatabaseConfigurationTestHelper.TABLE_MULTI, DatabaseConfigurationTestHelper.COL_NAME, DatabaseConfigurationTestHelper.COL_KEY, DatabaseConfigurationTestHelper.COL_VALUE, "testIsEmpty");
+        Configuration config2 = new DatabaseConfiguration(datasource, TABLE_MULTI, COL_NAME, COL_KEY, COL_VALUE, "testIsEmpty");
         assertTrue("The configuration named 'testIsEmpty' is not empty", config2.isEmpty());
     }
 
     public void testGetList()
     {
-        Configuration config1 = new DatabaseConfiguration(helper.getDatasource(), "configurationList", DatabaseConfigurationTestHelper.COL_KEY, DatabaseConfigurationTestHelper.COL_VALUE);
+        Configuration config1 = new DatabaseConfiguration(datasource, "configurationList", COL_KEY, COL_VALUE);
         List list = config1.getList("key3");
         assertEquals(3,list.size());
     }
 
     public void testGetKeys()
     {
-        Configuration config1 = new DatabaseConfiguration(helper.getDatasource(), "configurationList", DatabaseConfigurationTestHelper.COL_KEY, DatabaseConfigurationTestHelper.COL_VALUE);
+        Configuration config1 = new DatabaseConfiguration(datasource, "configurationList", COL_KEY, COL_VALUE);
         Iterator i = config1.getKeys();
         assertTrue(i.hasNext());
         Object key = i.next();
@@ -294,7 +347,7 @@ public class TestDatabaseConfiguration extends TestCase
      */
     public void testLogErrorListener()
     {
-        DatabaseConfiguration config = new DatabaseConfiguration(helper.getDatasource(), DatabaseConfigurationTestHelper.TABLE, DatabaseConfigurationTestHelper.COL_KEY, DatabaseConfigurationTestHelper.COL_VALUE);
+        DatabaseConfiguration config = new DatabaseConfiguration(datasource, TABLE, COL_KEY, COL_VALUE);
         assertEquals("No error listener registered", 1, config.getErrorListeners().size());
     }
 
diff --git a/src/test/org/apache/commons/configuration/event/TestDatabaseConfigurationEvents.java b/src/test/org/apache/commons/configuration/event/TestDatabaseConfigurationEvents.java
deleted file mode 100644
index e9071909..00000000
--- a/src/test/org/apache/commons/configuration/event/TestDatabaseConfigurationEvents.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.configuration.event;
-
-import org.apache.commons.configuration.AbstractConfiguration;
-import org.apache.commons.configuration.DatabaseConfigurationTestHelper;
-
-/**
- * A test class for the events generated by DatabaseConfiguration.
- *
- * @author hacker
- * @version $Id$
- */
-public class TestDatabaseConfigurationEvents extends
-        AbstractTestConfigurationEvents
-{
-    /** The test helper. */
-    private DatabaseConfigurationTestHelper helper;
-
-    protected void setUp() throws Exception
-    {
-        helper = new DatabaseConfigurationTestHelper();
-        helper.setUp();
-
-        super.setUp();
-    }
-
-    protected void tearDown() throws Exception
-    {
-        helper.tearDown();
-        super.tearDown();
-    }
-
-    protected AbstractConfiguration createConfiguration()
-    {
-        return helper.setUpConfig();
-    }
-}
