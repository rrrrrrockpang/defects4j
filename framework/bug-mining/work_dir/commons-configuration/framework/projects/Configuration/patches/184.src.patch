diff --git a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
index 926ee1a2..e1a50b1b 100644
--- a/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
+++ b/src/main/java/org/apache/commons/configuration/tree/xpath/ConfigurationNodeIteratorChildren.java
@@ -38,12 +38,6 @@ import org.apache.commons.lang3.StringUtils;
 class ConfigurationNodeIteratorChildren<T> extends
         ConfigurationNodeIteratorBase<T>
 {
-    /** Constant for the prefix separator. */
-    private static final String PREFIX_SEPARATOR = ":";
-
-    /** A format for constructing a node name with a namespace prefix. */
-    private static final String FMT_NAMESPACE = "%s" + PREFIX_SEPARATOR + "%s";
-
     /** The list with the sub nodes to iterate over. */
     private final List<T> subNodes;
 
@@ -114,9 +108,11 @@ class ConfigurationNodeIteratorChildren<T> extends
      */
     private List<T> createSubNodeList(T node, NodeTest test)
     {
+        List<T> children = getNodeHandler().getChildren(node);
+
         if (test == null)
         {
-            return getNodeHandler().getChildren(node);
+            return children;
         }
         else
         {
@@ -124,8 +120,24 @@ class ConfigurationNodeIteratorChildren<T> extends
             {
                 NodeNameTest nameTest = (NodeNameTest) test;
                 QName name = nameTest.getNodeName();
-                return nameTest.isWildcard() ? createSubNodeListForWildcardName(
-                        node, name) : createSubNodeListForName(node, name);
+                if (name.getPrefix() == null)
+                {
+                    if (nameTest.isWildcard())
+                    {
+                        return children;
+                    }
+
+                    List<T> result = new ArrayList<T>();
+                    for (T child : children)
+                    {
+                        if (StringUtils.equals(name.getName(), getNodeHandler()
+                                .nodeName(child)))
+                        {
+                            result.add(child);
+                        }
+                    }
+                    return result;
+                }
             }
 
             else if (test instanceof NodeTypeTest)
@@ -134,7 +146,7 @@ class ConfigurationNodeIteratorChildren<T> extends
                 if (typeTest.getNodeType() == Compiler.NODE_TYPE_NODE
                         || typeTest.getNodeType() == Compiler.NODE_TYPE_TEXT)
                 {
-                    return getNodeHandler().getChildren(node);
+                    return children;
                 }
             }
         }
@@ -142,62 +154,6 @@ class ConfigurationNodeIteratorChildren<T> extends
         return Collections.emptyList();
     }
 
-    /**
-     * Obtains the list of selected nodes for a {@code NodeNameTest} with either
-     * a simple or a qualified name.
-     *
-     * @param node the current node
-     * @param name the name to be selected
-     * @return the list with selected sub nodes
-     */
-    private List<T> createSubNodeListForName(T node, QName name)
-    {
-        String compareName =
-                (name.getPrefix() == null) ? name.getName() : prefixName(
-                        name.getPrefix(), name.getName());
-        List<T> result = new ArrayList<T>();
-        for (T child : getNodeHandler().getChildren(node))
-        {
-            if (StringUtils.equals(compareName, getNodeHandler()
-                    .nodeName(child)))
-            {
-                result.add(child);
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Obtains the list of selected sub nodes for a {@code NodeNameTest} with a
-     * wildcard name.
-     *
-     * @param node the current node
-     * @param name the name to be selected
-     * @return the list with selected sub nodes
-     */
-    private List<T> createSubNodeListForWildcardName(T node, QName name)
-    {
-        List<T> children = getNodeHandler().getChildren(node);
-        if (name.getPrefix() == null)
-        {
-            return children;
-        }
-        else
-        {
-            List<T> prefixChildren = new ArrayList<T>(children.size());
-            String prefix = prefixName(name.getPrefix(), null);
-            for (T child : children)
-            {
-                if (StringUtils.startsWith(getNodeHandler().nodeName(child),
-                        prefix))
-                {
-                    prefixChildren.add(child);
-                }
-            }
-            return prefixChildren;
-        }
-    }
-
     /**
      * Determines the start position of the iteration. Finds the index of the
      * given start node in the children of the root node.
@@ -220,17 +176,4 @@ class ConfigurationNodeIteratorChildren<T> extends
 
         return -1;
     }
-
-    /**
-     * Generates a qualified name with a namespace prefix.
-     *
-     * @param prefix the prefix
-     * @param name the name
-     * @return the qualified name
-     */
-    private static String prefixName(String prefix, String name)
-    {
-        return String.format(FMT_NAMESPACE, prefix,
-                StringUtils.defaultString(name));
-    }
 }
