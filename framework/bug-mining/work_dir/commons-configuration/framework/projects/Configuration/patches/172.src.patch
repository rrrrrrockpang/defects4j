diff --git a/src/main/java/org/apache/commons/configuration/MapConfiguration.java b/src/main/java/org/apache/commons/configuration/MapConfiguration.java
index 6b0dd8b4..dbffc147 100644
--- a/src/main/java/org/apache/commons/configuration/MapConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/MapConfiguration.java
@@ -18,6 +18,7 @@
 package org.apache.commons.configuration;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
@@ -107,16 +108,15 @@ public class MapConfiguration extends AbstractConfiguration implements Cloneable
     }
 
     /**
-     * Creates a new instance of {@code MapConfiguration} which uses the
-     * specified {@code Properties} object as its data store. All changes of
-     * this configuration affect the given {@code Properties} object and
-     * vice versa. Note that while {@code Properties} actually
-     * implements {@code Map<Object, Object>}, we expect it to contain only
-     * string keys. Other key types will lead to {@code ClassCastException}
-     * exceptions on certain methods.
+     * Creates a new instance of {@code MapConfiguration} and initializes its
+     * content from the specified {@code Properties} object. The resulting
+     * configuration is not connected to the {@code Properties} object, but all
+     * keys which are strings are copied (keys of other types are ignored).
      *
      * @param props the {@code Properties} object defining the content of this
      *        configuration
+     * @throws NullPointerException if the {@code Properties} object is
+     *         <b>null</b>
      * @since 1.8
      */
     public MapConfiguration(Properties props)
@@ -250,19 +250,22 @@ public class MapConfiguration extends AbstractConfiguration implements Cloneable
     }
 
     /**
-     * Helper method for converting the type of the {@code Properties} object
-     * to a supported map type. As stated by the comment of the constructor,
-     * we expect the {@code Properties} object to contain only String key;
-     * therefore, it is safe to do this cast.
+     * Helper method for copying all string keys from the given
+     * {@code Properties} object to a newly created map.
      *
      * @param props the {@code Properties} to be copied
      * @return a newly created map with all string keys of the properties
      */
-    @SuppressWarnings("unchecked")
     private static Map<String, Object> convertPropertiesToMap(Properties props)
     {
-        @SuppressWarnings("rawtypes")
-        Map map = props;
+        Map<String, Object> map = new HashMap<String, Object>();
+        for (Map.Entry<Object, Object> e : props.entrySet())
+        {
+            if (e.getKey() instanceof String)
+            {
+                map.put((String) e.getKey(), e.getValue());
+            }
+        }
         return map;
     }
 }
