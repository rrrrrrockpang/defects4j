diff --git a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
index 893d6969..667f87c5 100644
--- a/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestCombinedConfiguration.java
@@ -20,21 +20,18 @@ import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.PrintWriter;
-import java.text.MessageFormat;
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.Set;
 
-import junit.framework.Assert;
-import junit.framework.TestCase;
-
 import org.apache.commons.configuration.event.ConfigurationEvent;
 import org.apache.commons.configuration.event.ConfigurationListener;
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
 import org.apache.commons.configuration.tree.NodeCombiner;
 import org.apache.commons.configuration.tree.UnionCombiner;
 
+import junit.framework.Assert;
+import junit.framework.TestCase;
+
 /**
  * Test class for CombinedConfiguration.
  *
@@ -43,40 +40,22 @@ import org.apache.commons.configuration.tree.UnionCombiner;
 public class TestCombinedConfiguration extends TestCase
 {
     /** Constant for the name of a sub configuration. */
-    private static final String TEST_NAME = "SUBCONFIG";
+    static final String TEST_NAME = "SUBCONFIG";
 
     /** Constant for a test key. */
-    private static final String TEST_KEY = "test.value";
+    static final String TEST_KEY = "test.value";
 
     /** Constant for the name of the first child configuration.*/
-    private static final String CHILD1 = TEST_NAME + "1";
+    static final String CHILD1 = TEST_NAME + "1";
 
     /** Constant for the name of the second child configuration.*/
-    private static final String CHILD2 = TEST_NAME + "2";
-
-    /** Constant for the name of the XML reload test file.*/
-    private static final String RELOAD_XML_NAME = "reload.xml";
-
-    /** Constant for the content of a XML reload test file.*/
-    private static final String RELOAD_XML_CONTENT = "<xml><xmlReload>{0}</xmlReload></xml>";
-
-    /** Constant for the name of the properties reload test file.*/
-    private static final String RELOAD_PROPS_NAME = "reload.properties";
-
-    /** Constant for the content of a properties reload test file.*/
-    private static final String RELOAD_PROPS_CONTENT = "propsReload = {0}";
-
-    /** Constant for the directory for writing test files.*/
-    private static final File TEST_DIR = new File("target");
-
-    /** A list with files created during a test.*/
-    private Collection testFiles;
+    static final String CHILD2 = TEST_NAME + "2";
 
     /** The configuration to be tested. */
-    private CombinedConfiguration config;
+    CombinedConfiguration config;
 
     /** The test event listener. */
-    private CombinedListener listener;
+    CombinedListener listener;
 
     protected void setUp() throws Exception
     {
@@ -86,25 +65,6 @@ public class TestCombinedConfiguration extends TestCase
         config.addConfigurationListener(listener);
     }
 
-    /**
-     * Performs clean-up after a test run. If test files have been created, they
-     * are removed now.
-     */
-    protected void tearDown() throws Exception
-    {
-        if (testFiles != null)
-        {
-            for (Iterator it = testFiles.iterator(); it.hasNext();)
-            {
-                File f = (File) it.next();
-                if (f.exists())
-                {
-                    assertTrue("Cannot delete test file: " + f, f.delete());
-                }
-            }
-        }
-    }
-
     /**
      * Tests accessing a newly created combined configuration.
      */
@@ -462,8 +422,11 @@ public class TestCombinedConfiguration extends TestCase
     public void testReloading() throws Exception
     {
         config.setForceReloadCheck(true);
-        File testXmlFile = writeReloadFile(RELOAD_XML_NAME, RELOAD_XML_CONTENT, 0);
-        File testPropsFile = writeReloadFile(RELOAD_PROPS_NAME, RELOAD_PROPS_CONTENT, 0);
+        File testDir = new File("target");
+        File testXmlFile = new File(testDir, "reload.xml");
+        File testPropsFile = new File(testDir, "reload.properties");
+        writeFile(testXmlFile, "<xml><xmlReload>0</xmlReload></xml>");
+        writeFile(testPropsFile, "propsReload = 0");
         XMLConfiguration c1 = new XMLConfiguration(testXmlFile);
         c1.setReloadingStrategy(new FileAlwaysReloadingStrategy());
         PropertiesConfiguration c2 = new PropertiesConfiguration(testPropsFile);
@@ -475,31 +438,15 @@ public class TestCombinedConfiguration extends TestCase
         assertEquals("Wrong props reload value", 0, config
                 .getInt("propsReload"));
 
-        writeReloadFile(RELOAD_XML_NAME, RELOAD_XML_CONTENT, 1);
+        writeFile(testXmlFile, "<xml><xmlReload>1</xmlReload></xml>");
         assertEquals("XML reload not detected", 1, config.getInt("xmlReload"));
         config.setForceReloadCheck(false);
-        writeReloadFile(RELOAD_PROPS_NAME, RELOAD_PROPS_CONTENT, 1);
+        writeFile(testPropsFile, "propsReload = 1");
         assertEquals("Props reload detected though check flag is false", 0, config
                 .getInt("propsReload"));
-    }
 
-    /**
-     * Tests whether the reload check works with a subnode configuration. This
-     * test is related to CONFIGURATION-341.
-     */
-    public void testReloadingSubnodeConfig() throws IOException,
-            ConfigurationException
-    {
-        config.setForceReloadCheck(true);
-        File testXmlFile = writeReloadFile(RELOAD_XML_NAME, RELOAD_XML_CONTENT,
-                0);
-        XMLConfiguration c1 = new XMLConfiguration(testXmlFile);
-        c1.setReloadingStrategy(new FileAlwaysReloadingStrategy());
-        final String prefix = "reloadCheck";
-        config.addConfiguration(c1, CHILD1, prefix);
-        SubnodeConfiguration sub = config.configurationAt(prefix, true);
-        writeReloadFile(RELOAD_XML_NAME, RELOAD_XML_CONTENT, 1);
-        assertEquals("Reload not detected", 1, sub.getInt("xmlReload"));
+        assertTrue("XML file cannot be removed", testXmlFile.delete());
+        assertTrue("Props file cannot be removed", testPropsFile.delete());
     }
 
     /**
@@ -638,26 +585,19 @@ public class TestCombinedConfiguration extends TestCase
     }
 
     /**
-     * Helper method for writing a file. The file is also added to a list and
-     * will be deleted in teadDown() automatically.
+     * Helper method for writing a file.
      *
      * @param file the file to be written
      * @param content the file's content
      * @throws IOException if an error occurs
      */
-    private void writeFile(File file, String content) throws IOException
+    private static void writeFile(File file, String content) throws IOException
     {
         PrintWriter out = null;
         try
         {
             out = new PrintWriter(new FileWriter(file));
             out.print(content);
-
-            if (testFiles == null)
-            {
-                testFiles = new ArrayList();
-            }
-            testFiles.add(file);
         }
         finally
         {
@@ -668,40 +608,6 @@ public class TestCombinedConfiguration extends TestCase
         }
     }
 
-    /**
-     * Helper method for writing a test file. The file will be created in the
-     * test directory. It is also scheduled for automatic deletion after the
-     * test.
-     *
-     * @param fileName the name of the test file
-     * @param content the content of the file
-     * @return the <code>File</code> object for the test file
-     * @throws IOException if an error occurs
-     */
-    private File writeFile(String fileName, String content) throws IOException
-    {
-        File file = new File(TEST_DIR, fileName);
-        writeFile(file, content);
-        return file;
-    }
-
-    /**
-     * Writes a file for testing reload operations.
-     *
-     * @param name the name of the reload test file
-     * @param content the content of the file
-     * @param value the value of the reload test property
-     * @return the file that was written
-     * @throws IOException if an error occurs
-     */
-    private File writeReloadFile(String name, String content, int value)
-            throws IOException
-    {
-        return writeFile(name, MessageFormat.format(content, new Object[] {
-            new Integer(value)
-        }));
-    }
-
     /**
      * Helper method for creating a test configuration to be added to the
      * combined configuration.
