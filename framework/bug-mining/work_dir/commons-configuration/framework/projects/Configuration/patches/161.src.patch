diff --git a/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java
index f5f7a969..85ed6996 100644
--- a/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/main/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -60,6 +60,9 @@ public final class ConfigurationUtils
     /** Constant for the name of the clone() method.*/
     private static final String METHOD_CLONE = "clone";
 
+    /** Constant for parsing numbers in hex format. */
+    private static final int HEX = 16;
+
     /**
      * An array with interfaces to be implemented by a proxy for an immutable
      * configuration.
@@ -719,14 +722,34 @@ public final class ConfigurationUtils
 
     /**
      * Tries to convert the specified URL to a file object. If this fails,
-     * <b>null</b> is returned.
+     * <b>null</b> is returned. Note: This code has been copied from the
+     * {@code FileUtils} class from <em>Commons IO</em>.
      *
      * @param url the URL
      * @return the resulting file object
      */
     public static File fileFromURL(URL url)
     {
-        return FileUtils.toFile(url);
+        if (url == null || !url.getProtocol().equals(PROTOCOL_FILE))
+        {
+            return null;
+        }
+        else
+        {
+            String filename = url.getFile().replace('/', File.separatorChar);
+            int pos = 0;
+            while ((pos = filename.indexOf('%', pos)) >= 0)
+            {
+                if (pos + 2 < filename.length())
+                {
+                    String hexStr = filename.substring(pos + 1, pos + 3);
+                    char ch = (char) Integer.parseInt(hexStr, HEX);
+                    filename = filename.substring(0, pos) + ch
+                            + filename.substring(pos + 3);
+                }
+            }
+            return new File(filename);
+        }
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/configuration/FileUtils.java b/src/main/java/org/apache/commons/configuration/FileUtils.java
deleted file mode 100644
index 89476cbf..00000000
--- a/src/main/java/org/apache/commons/configuration/FileUtils.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.configuration;
-
-import java.io.File;
-import java.net.URL;
-import java.nio.ByteBuffer;
-import java.nio.charset.Charset;
-
-/**
- * This class is a subset of org.apache.commons.io.FileUtils,
- * git-svn-id: https://svn.apache.org/repos/asf/commons/proper/io/trunk@1423916 13f79535-47bb-0310-9956-ffa450edef68.
- * The subset is determined by {@link org.apache.commons.configuration.ConfigurationUtils}.
- * The copied constants and methods are <em>literally</em> copied.<br />
- *
- * See CONFIGURATION-521 for a discussion.
- * @version $Id$
- */
-class FileUtils {
-    /**
-     * The UTF-8 character set, used to decode octets in URLs.
-     */
-    private static final Charset UTF8 = Charset.forName("UTF-8");
-
-    //-----------------------------------------------------------------------
-    /**
-     * Convert from a <code>URL</code> to a <code>File</code>.
-     * <p>
-     * From version 1.1 this method will decode the URL.
-     * Syntax such as <code>file:///my%20docs/file.txt</code> will be
-     * correctly decoded to <code>/my docs/file.txt</code>. Starting with version
-     * 1.5, this method uses UTF-8 to decode percent-encoded octets to characters.
-     * Additionally, malformed percent-encoded octets are handled leniently by
-     * passing them through literally.
-     *
-     * @param url  the file URL to convert, {@code null} returns {@code null}
-     * @return the equivalent <code>File</code> object, or {@code null}
-     *  if the URL's protocol is not <code>file</code>
-     */
-    public static File toFile(final URL url) {
-        if (url == null || !"file".equalsIgnoreCase(url.getProtocol())) {
-            return null;
-        } else {
-            String filename = url.getFile().replace('/', File.separatorChar);
-            filename = decodeUrl(filename);
-            return new File(filename);
-        }
-    }
-
-    /**
-     * Decodes the specified URL as per RFC 3986, i.e. transforms
-     * percent-encoded octets to characters by decoding with the UTF-8 character
-     * set. This function is primarily intended for usage with
-     * {@link java.net.URL} which unfortunately does not enforce proper URLs. As
-     * such, this method will leniently accept invalid characters or malformed
-     * percent-encoded octets and simply pass them literally through to the
-     * result string. Except for rare edge cases, this will make unencoded URLs
-     * pass through unaltered.
-     *
-     * @param url  The URL to decode, may be {@code null}.
-     * @return The decoded URL or {@code null} if the input was
-     *         {@code null}.
-     */
-    static String decodeUrl(final String url) {
-        String decoded = url;
-        if (url != null && url.indexOf('%') >= 0) {
-            final int n = url.length();
-            final StringBuffer buffer = new StringBuffer();
-            final ByteBuffer bytes = ByteBuffer.allocate(n);
-            for (int i = 0; i < n;) {
-                if (url.charAt(i) == '%') {
-                    try {
-                        do {
-                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
-                            bytes.put(octet);
-                            i += 3;
-                        } while (i < n && url.charAt(i) == '%');
-                        continue;
-                    } catch (final RuntimeException e) {
-                        // malformed percent-encoded octet, fall through and
-                        // append characters literally
-                    } finally {
-                        if (bytes.position() > 0) {
-                            bytes.flip();
-                            buffer.append(UTF8.decode(bytes).toString());
-                            bytes.clear();
-                        }
-                    }
-                }
-                buffer.append(url.charAt(i++));
-            }
-            decoded = buffer.toString();
-        }
-        return decoded;
-    }
-
-}
