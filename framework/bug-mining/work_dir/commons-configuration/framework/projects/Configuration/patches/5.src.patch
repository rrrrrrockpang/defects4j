diff --git a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
index ffc18b9a..05c8434d 100644
--- a/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractFileConfiguration.java
@@ -26,7 +26,6 @@ import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.io.UnsupportedEncodingException;
 import java.io.Writer;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Iterator;
 
@@ -524,10 +523,8 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
     }
 
     /**
-     * Set the name of the file. The passed in file name can contain a
-     * relative path. 
-     * It must be used when referring files with relative paths from classpath.
-     * Use <code>{@link AbstractFileConfiguration#setPath(String)
+     * Set the name of the file. The passed in file name should not contain a
+     * path. Use <code>{@link AbstractFileConfiguration#setPath(String)
      * setPath()}</code> to set a full qualified file name.
      *
      * @param fileName the name of the file
@@ -562,8 +559,7 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
 
     /**
      * Return the file where the configuration is stored. If the base path is a
-     * URL with a protocol different than &quot;file&quot;, or the configuration 
-     * file is within a compressed archive, the return value
+     * URL with a protocol different than &quot;file&quot;, the return value
      * will not point to a valid file object.
      *
      * @return the file where the configuration is stored; this can be <b>null</b>
@@ -604,51 +600,19 @@ public abstract class AbstractFileConfiguration extends BaseConfiguration implem
 
     /**
      * Returns the full path to the file this configuration is based on. The
-     * return value is a valid File path only if this configuration is based on 
-     * a file on the local disk.
-     * If the configuration was loaded from a packed archive the returned value
-     * is the string form of the URL from which the configuration was loaded.
+     * return value is valid only if this configuration is based on a file on
+     * the local disk.
      *
      * @return the full path to the configuration file
      */
     public String getPath()
     {
-        String path = null;
-        File file = getFile();
-        // if resource was loaded from jar file may be null
-        if (file != null)
-        {
-            path = file.getAbsolutePath();
-        }
-        
-        // try to see if file was loaded from a jar
-        if (path == null)
-        {
-            if (sourceURL != null)
-            {
-                path = sourceURL.getPath();
-            }
-            else
-            {
-                try {
-                    path = ConfigurationUtils.getURL(getBasePath(),
-                            getFileName()).getPath();
-                } catch (MalformedURLException e) {
-                    // simply ignore it and return null
-                }
-            }
-        }
-
-        return path;
+        return getFile().getAbsolutePath();
     }
 
     /**
-     * Sets the location of this configuration as a full or relative path name. 
-     * The passed in path should represent a valid file name on the file system.
-     * It must not be used to specify relative paths for files that exist 
-     * in classpath, either plain file system or compressed archive, 
-     * because this method expands any relative path to an absolute one which
-     * may end in an invalid absolute path for classpath references.
+     * Sets the location of this configuration as a full path name. The passed
+     * in path should represent a valid file name.
      *
      * @param path the full path name of the configuration file
      */
diff --git a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
index 0a99c01c..e0f9d4c6 100644
--- a/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
+++ b/src/java/org/apache/commons/configuration/AbstractHierarchicalFileConfiguration.java
@@ -65,7 +65,7 @@ implements FileConfiguration, ConfigurationListener
     {
         this();
         // store the file name
-        delegate.setFileName(fileName);
+        delegate.setPath(fileName);
 
         // load the file
         load();
diff --git a/src/java/org/apache/commons/configuration/ConfigurationUtils.java b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
index 17878db1..771239a2 100644
--- a/src/java/org/apache/commons/configuration/ConfigurationUtils.java
+++ b/src/java/org/apache/commons/configuration/ConfigurationUtils.java
@@ -486,32 +486,31 @@ public final class ConfigurationUtils
             }
         }
 
-        // attempt to load from classpath
+        String resourceName = null;
         if (url == null)
         {
-            url = locateFromClasspath(name);
+            if (base != null)
+            {
+                resourceName = base + RESOURCE_PATH_SEPARATOR + name;
+            }
+            else
+            {
+                resourceName = name;
+            }
         }
-        return url;
-    }
 
-    /**
-     * Tries to find a resource with the given name in the classpath.
-     * @param resourceName the name of the resource
-     * @return the URL to the found resource or <b>null</b> if the resource
-     * cannot be found
-     */
-    static URL locateFromClasspath(String resourceName)
-    {
-        URL url = null;
         // attempt to load from the context classpath
-        ClassLoader loader = Thread.currentThread().getContextClassLoader();
-        if (loader != null)
+        if (url == null)
         {
-            url = loader.getResource(resourceName);
-
-            if (url != null)
+            ClassLoader loader = Thread.currentThread().getContextClassLoader();
+            if (loader != null)
             {
-                log.debug("Configuration loaded from the context classpath (" + resourceName + ")");
+                url = loader.getResource(resourceName);
+
+                if (url != null)
+                {
+                    log.debug("Configuration loaded from the context classpath (" + resourceName + ")");
+                }
             }
         }
 
@@ -525,6 +524,7 @@ public final class ConfigurationUtils
                 log.debug("Configuration loaded from the system classpath (" + resourceName + ")");
             }
         }
+
         return url;
     }
 
