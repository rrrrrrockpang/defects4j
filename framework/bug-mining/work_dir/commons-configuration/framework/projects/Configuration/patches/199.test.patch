diff --git a/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java b/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java
index ebddccb2..ec8a3a27 100644
--- a/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java
+++ b/src/test/java/org/apache/commons/configuration2/TestConfigurationUtils.java
@@ -31,7 +31,6 @@ import java.util.List;
 import java.util.Map;
 
 import junitx.framework.ListAssert;
-
 import org.apache.commons.configuration2.builder.XMLBuilderParametersImpl;
 import org.apache.commons.configuration2.convert.DefaultListDelimiterHandler;
 import org.apache.commons.configuration2.event.ConfigurationErrorEvent;
@@ -43,7 +42,6 @@ import org.apache.commons.configuration2.sync.NoOpSynchronizer;
 import org.apache.commons.configuration2.tree.DefaultExpressionEngine;
 import org.apache.commons.configuration2.tree.DefaultExpressionEngineSymbols;
 import org.apache.commons.configuration2.tree.ExpressionEngine;
-import org.apache.commons.configuration2.tree.ImmutableNode;
 import org.easymock.EasyMock;
 import org.junit.After;
 import org.junit.Before;
@@ -93,7 +91,7 @@ public class TestConfigurationUtils
         assertEquals("String representation of a configuration", "two=2" , ConfigurationUtils.toString(config));
 
         config.setProperty("one","1");
-        assertEquals("String representation of a configuration", "two=2" + lineSeparator + "one=1", ConfigurationUtils.toString(config));
+        assertEquals("String representation of a configuration", "two=2" + lineSeparator + "one=1" , ConfigurationUtils.toString(config));
     }
 
     @Test
@@ -282,26 +280,6 @@ public class TestConfigurationUtils
         assertEquals("Wrong value 3", 3, hc.getInt("test(2)"));
     }
 
-    /**
-     * Tests that the structure of the resulting hierarchical configuration
-     * does not depend on the order of properties in the source configuration.
-     * This test is related to CONFIGURATION-604.
-     */
-    @Test
-    public void testConvertToHierarchicalOrderOfProperties()
-    {
-        PropertiesConfiguration config = new PropertiesConfiguration();
-        config.addProperty("x.y.z", true);
-        config.addProperty("x.y", true);
-        @SuppressWarnings("unchecked")
-        HierarchicalConfiguration<ImmutableNode> hc =
-                (HierarchicalConfiguration<ImmutableNode>)
-                        ConfigurationUtils.convertToHierarchical(config);
-        ImmutableNode rootNode = hc.getNodeModel().getNodeHandler().getRootNode();
-        ImmutableNode nodeX = rootNode.getChildren().get(0);
-        assertEquals("Wrong number of children of x", 1, nodeX.getChildren().size());
-    }
-
     /**
      * Tests cloning a configuration that supports this operation.
      */
diff --git a/src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java b/src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java
index d5e76b0b..0023eee2 100644
--- a/src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java
+++ b/src/test/java/org/apache/commons/configuration2/tree/TestOverrideCombiner.java
@@ -18,14 +18,11 @@ package org.apache.commons.configuration2.tree;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
 
 import java.util.List;
 
 import org.apache.commons.configuration2.BaseHierarchicalConfiguration;
-import org.apache.commons.configuration2.CombinedConfiguration;
 import org.apache.commons.configuration2.HierarchicalConfiguration;
-import org.apache.commons.configuration2.PropertiesConfiguration;
 import org.apache.commons.configuration2.ex.ConfigurationException;
 import org.junit.Test;
 
@@ -179,36 +176,4 @@ public class TestOverrideCombiner extends AbstractCombinerTest
         assertFalse("An attribute result", nds.get(0).isAttributeResult());
         return nds.get(0).getNode();
     }
-
-    /**
-     * Tests a combine operation of non-hierarchical properties. This test is
-     * related to CONFIGURATION-604.
-     */
-    @Test
-    public void testCombineProperties()
-    {
-        PropertiesConfiguration c1 = new PropertiesConfiguration();
-        c1.addProperty("x.y.simpleCase", false);
-        c1.addProperty("x.y.between", false);
-        c1.addProperty("x.y.isDistinctFrom",false);
-        c1.addProperty("x.y",false);
-        PropertiesConfiguration c2 = new PropertiesConfiguration();
-        c2.addProperty("x.y", true);
-        c2.addProperty("x.y.between",true);
-        c2.addProperty("x.y.comparison",true);
-        c2.addProperty("x.y.in",true);
-        c2.addProperty("x.y.isDistinctFrom",true);
-        c2.addProperty("x.y.simpleCase", true);
-
-        CombinedConfiguration config = new CombinedConfiguration(new OverrideCombiner());
-        config.addConfiguration(c1);
-        config.addConfiguration(c2);
-        assertFalse("Wrong value for x.y", config.getBoolean("x.y"));
-        assertFalse("Wrong value for x.y.between", config.getBoolean("x.y.between"));
-        assertFalse("Wrong value for x.y.isDistinctFrom", config.getBoolean("x.y.isDistinctFrom"));
-        assertFalse("Wrong value for x.y.simpleCase", config.getBoolean("x.y.simpleCase"));
-        assertTrue("Wrong value for x.y.in", config.getBoolean("x.y.in"));
-        assertTrue("Wrong value for x.y.comparison", config.getBoolean("x.y.comparison"));
-        assertEquals("Wrong size", 6, config.size());
-    }
 }
