diff --git a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
index 79e2482b..0994f679 100644
--- a/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
+++ b/src/main/java/org/apache/commons/configuration/PropertiesConfiguration.java
@@ -352,30 +352,6 @@ public class PropertiesConfiguration extends AbstractFileConfiguration
         getLayout().setHeaderComment(header);
     }
 
-    /**
-     * Returns the footer comment. This is a comment at the very end of the
-     * file.
-     *
-     * @return the footer comment
-     * @since 2.0
-     */
-    public String getFooter()
-    {
-        return getLayout().getFooterComment();
-    }
-
-    /**
-     * Sets the footer comment. If set, this comment is written after all
-     * properties at the end of the file.
-     *
-     * @param footer the footer comment
-     * @since 2.0
-     */
-    public void setFooter(String footer)
-    {
-        getLayout().setFooterComment(footer);
-    }
-
     /**
      * Returns the encoding to be used when loading or storing configuration
      * data. This implementation ensures that the default encoding will be used
diff --git a/src/main/java/org/apache/commons/configuration/PropertiesConfigurationLayout.java b/src/main/java/org/apache/commons/configuration/PropertiesConfigurationLayout.java
index b3f5f125..5d33c567 100644
--- a/src/main/java/org/apache/commons/configuration/PropertiesConfigurationLayout.java
+++ b/src/main/java/org/apache/commons/configuration/PropertiesConfigurationLayout.java
@@ -131,9 +131,6 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
     /** Stores the header comment. */
     private String headerComment;
 
-    /** Stores the footer comment. */
-    private String footerComment;
-
     /** The global separator that will be used for all properties. */
     private String globalSeparator;
 
@@ -209,7 +206,15 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
      */
     public String getCanonicalComment(String key, boolean commentChar)
     {
-        return constructCanonicalComment(getComment(key), commentChar);
+        String comment = getComment(key);
+        if (comment == null)
+        {
+            return null;
+        }
+        else
+        {
+            return trimComment(comment, commentChar);
+        }
     }
 
     /**
@@ -278,7 +283,8 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
      */
     public String getCanonicalHeaderComment(boolean commentChar)
     {
-        return constructCanonicalComment(getHeaderComment(), commentChar);
+        return (getHeaderComment() == null) ? null : trimComment(
+                getHeaderComment(), commentChar);
     }
 
     /**
@@ -305,47 +311,6 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
         headerComment = comment;
     }
 
-    /**
-     * Returns the footer comment of the represented properties file in a
-     * canonical form. This method works like
-     * {@code getCanonicalHeaderComment()}, but reads the footer comment.
-     *
-     * @param commentChar determines the presence of comment characters
-     * @return the footer comment (can be <b>null</b>)
-     * @see #getCanonicalHeaderComment(boolean)
-     * @since 2.0
-     */
-    public String getCanonicalFooterCooment(boolean commentChar)
-    {
-        return constructCanonicalComment(getFooterComment(), commentChar);
-    }
-
-    /**
-     * Returns the footer comment of the represented properties file. This
-     * method returns the footer comment exactly as it was set using
-     * {@code setFooterComment()} or extracted from the loaded properties
-     * file.
-     *
-     * @return the footer comment (can be <b>null</b>)
-     * @since 2.0
-     */
-    public String getFooterComment()
-    {
-        return footerComment;
-    }
-
-    /**
-     * Sets the footer comment for the represented properties file. This comment
-     * will be output at the bottom of the file.
-     *
-     * @param footerComment the footer comment
-     * @since 2.0
-     */
-    public void setFooterComment(String footerComment)
-    {
-        this.footerComment = footerComment;
-    }
-
     /**
      * Returns a flag whether the specified property is defined on a single
      * line. This is meaningful only if this property has multiple values.
@@ -547,9 +512,6 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
                     }
                 }
             }
-
-            setFooterComment(extractComment(reader.getCommentLines(), 0, reader
-                    .getCommentLines().size() - 1));
         }
         catch (IOException ioex)
         {
@@ -613,8 +575,6 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
                             key), singleLine);
                 }
             }
-
-            writeComment(writer, getCanonicalFooterCooment(true));
             writer.flush();
         }
         catch (IOException ioex)
@@ -861,9 +821,6 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
             PropertyLayoutData data = c.layoutData.get(key);
             layoutData.put(key, data.clone());
         }
-
-        setHeaderComment(c.getHeaderComment());
-        setFooterComment(c.getFooterComment());
     }
 
     /**
@@ -885,21 +842,6 @@ public class PropertiesConfigurationLayout implements ConfigurationListener
         }
     }
 
-    /**
-     * Helper method for generating a comment string. Depending on the boolean
-     * argument the resulting string either has no comment characters or a
-     * leading comment character at each line.
-     *
-     * @param comment the comment string to be processed
-     * @param commentChar determines the presence of comment characters
-     * @return the canonical comment string (can be <b>null</b>)
-     */
-    private static String constructCanonicalComment(String comment,
-            boolean commentChar)
-    {
-        return (comment == null) ? null : trimComment(comment, commentChar);
-    }
-
     /**
      * A helper class for storing all layout related information for a
      * configuration property.
