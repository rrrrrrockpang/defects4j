diff --git a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
index 0ac9b6bc..2134a906 100644
--- a/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
+++ b/src/test/org/apache/commons/configuration/TestXMLConfiguration.java
@@ -33,6 +33,7 @@ import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 
 import org.apache.commons.configuration.reloading.FileAlwaysReloadingStrategy;
+import org.apache.commons.configuration.reloading.FileChangedReloadingStrategy;
 import org.apache.commons.configuration.reloading.InvariantReloadingStrategy;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.configuration.tree.xpath.XPathExpressionEngine;
@@ -509,7 +510,7 @@ public class TestXMLConfiguration extends TestCase
 
     public void testAutoSave() throws Exception
     {
-        conf.setFile(testSaveConf);
+        conf.setFile(new File("target/testsave.xml"));
         assertFalse(conf.isAutoSave());
         conf.setAutoSave(true);
         assertTrue(conf.isAutoSave());
@@ -1024,43 +1025,6 @@ public class TestXMLConfiguration extends TestCase
                 .containsKey("attrList.a(5)[@test]"));
     }
 
-    /**
-     * Tests whether the auto save mechanism is triggered by changes at a
-     * subnode configuration.
-     */
-    public void testAutoSaveWithSubnodeConfig() throws ConfigurationException
-    {
-        final String newValue = "I am autosaved";
-        conf.setFile(testSaveConf);
-        conf.setAutoSave(true);
-        Configuration sub = conf.configurationAt("element2.subelement");
-        sub.setProperty("subsubelement", newValue);
-        assertEquals("Change not visible to parent", newValue, conf
-                .getString("element2.subelement.subsubelement"));
-        XMLConfiguration conf2 = new XMLConfiguration(testSaveConf);
-        assertEquals("Change was not saved", newValue, conf2
-                .getString("element2.subelement.subsubelement"));
-    }
-
-    /**
-     * Tests whether a subnode configuration created from another subnode
-     * configuration of a XMLConfiguration can trigger the auto save mechanism.
-     */
-    public void testAutoSaveWithSubSubnodeConfig() throws ConfigurationException
-    {
-        final String newValue = "I am autosaved";
-        conf.setFile(testSaveConf);
-        conf.setAutoSave(true);
-        SubnodeConfiguration sub1 = conf.configurationAt("element2");
-        SubnodeConfiguration sub2 = sub1.configurationAt("subelement");
-        sub2.setProperty("subsubelement", newValue);
-        assertEquals("Change not visible to parent", newValue, conf
-                .getString("element2.subelement.subsubelement"));
-        XMLConfiguration conf2 = new XMLConfiguration(testSaveConf);
-        assertEquals("Change was not saved", newValue, conf2
-                .getString("element2.subelement.subsubelement"));
-    }
-
     /**
      * Prepares a configuration object for testing a reload operation.
      *
@@ -1072,7 +1036,14 @@ public class TestXMLConfiguration extends TestCase
         removeTestFile();
         conf.save(testSaveConf);
         XMLConfiguration c = new XMLConfiguration(testSaveConf);
-        c.setReloadingStrategy(new FileAlwaysReloadingStrategy());
+        c.setReloadingStrategy(new FileChangedReloadingStrategy()
+        {
+            // Report always a change
+            protected boolean hasChanged()
+            {
+                return true;
+            }
+        });
         conf.setProperty("test(0).entity", "newValue");
         conf.save(testSaveConf);
         return c;
diff --git a/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java b/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java
index 9cdce8db..d4aab043 100644
--- a/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java
+++ b/src/test/org/apache/commons/configuration/event/AbstractTestConfigurationEvents.java
@@ -218,29 +218,16 @@ public abstract class AbstractTestConfigurationEvents extends TestCase
         public void checkEvent(int type, String propName, Object propValue,
                 boolean before)
         {
-            ConfigurationEvent e = nextEvent(type);
+            assertFalse("Too few events received", events.isEmpty());
+            ConfigurationEvent e = (ConfigurationEvent) events.removeFirst();
+            assertEquals("Wrong event source", config, e.getSource());
+            assertEquals("Wrong event type", type, e.getType());
             assertEquals("Wrong property name", propName, e.getPropertyName());
             assertEquals("Wrong property value", propValue, e
                     .getPropertyValue());
             assertEquals("Wrong before flag", before, e.isBeforeUpdate());
         }
 
-        /**
-         * Returns the next received event and checks for the expected type.
-         * This method can be used instead of <code>checkEvent()</code> for
-         * comparing complex event values.
-         * @param expectedType the expected type of the event
-         * @return the event object
-         */
-        public ConfigurationEvent nextEvent(int expectedType)
-        {
-            assertFalse("Too few events received", events.isEmpty());
-            ConfigurationEvent e = (ConfigurationEvent) events.removeFirst();
-            assertEquals("Wrong event source", config, e.getSource());
-            assertEquals("Wrong event type", expectedType, e.getType());
-            return e;
-        }
-
         /**
          * Skips to the last received event and checks that no events of the
          * given type have been received. This method is used by checks for
diff --git a/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java b/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java
index 528b3abb..2e1d858b 100644
--- a/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java
+++ b/src/test/org/apache/commons/configuration/event/TestHierarchicalConfigurationEvents.java
@@ -21,7 +21,6 @@ import java.util.Collection;
 
 import org.apache.commons.configuration.AbstractConfiguration;
 import org.apache.commons.configuration.HierarchicalConfiguration;
-import org.apache.commons.configuration.SubnodeConfiguration;
 import org.apache.commons.configuration.tree.DefaultConfigurationNode;
 
 /**
@@ -80,44 +79,4 @@ public class TestHierarchicalConfigurationEvents extends
                 new ArrayList());
         l.done();
     }
-
-    /**
-     * Tests whether manipulations of a subnode configuration trigger correct
-     * events.
-     */
-    public void testSubnodeChangedEvent()
-    {
-        SubnodeConfiguration sub = ((HierarchicalConfiguration) config)
-                .configurationAt(EXIST_PROPERTY);
-        sub.addProperty("newProp", "newValue");
-        checkSubnodeEvent(l
-                .nextEvent(HierarchicalConfiguration.EVENT_SUBNODE_CHANGED),
-                true);
-        checkSubnodeEvent(l
-                .nextEvent(HierarchicalConfiguration.EVENT_SUBNODE_CHANGED),
-                false);
-        l.done();
-    }
-
-    /**
-     * Tests whether a received event contains a correct subnode event.
-     *
-     * @param event the event object
-     * @param before the expected before flag
-     */
-    private void checkSubnodeEvent(ConfigurationEvent event, boolean before)
-    {
-        assertEquals("Wrong before flag of nesting event", before, event
-                .isBeforeUpdate());
-        assertTrue("No subnode event found in value",
-                event.getPropertyValue() instanceof ConfigurationEvent);
-        ConfigurationEvent evSub = (ConfigurationEvent) event
-                .getPropertyValue();
-        assertEquals("Wrong event type",
-                HierarchicalConfiguration.EVENT_ADD_PROPERTY, evSub.getType());
-        assertEquals("Wrong property name", "newProp", evSub.getPropertyName());
-        assertEquals("Wrong property value", "newValue", evSub
-                .getPropertyValue());
-        assertEquals("Wrong before flag", before, evSub.isBeforeUpdate());
-    }
 }
